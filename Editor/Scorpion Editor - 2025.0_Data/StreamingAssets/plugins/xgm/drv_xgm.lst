0001   0000             ; eXtended Genesis Music (XGM) Z80 driver - Stephane Dallongeville @2014-2016
0002   0000             ;
0003   0000             ; XGM is a music format dedicated to the Sega Megadrive/Genesis system.
0004   0000             ; It has been designed to minimize CPU decoding resource and keep reasonable data size (should be smaller than VGM file).
0005   0000             ; It supports both FM and PSG chip and allow up to 4 PCM channels (8 bits signed at 14 Khz) to be played at once.
0006   0000             ; These 4 PCM channels are obtained by software mixing in the FM DAC in replacement of the 6th FM channel (so at best you can have 5FM + 4PCM + 4PSG = 13 channels)
0007   0000             ;
0008   0000             ; The driver supports playing SFX in PCM format with 16 priority levels.
0009   0000             ; PCM samples can be >32KB but with the restriction of having their address and size aligned on 256 bytes.
0010   0000             ;
0011   0000             ; we have to do 254 cycles per sample output which consist of :
0012   0000             ; - bufferize 4 PCM samples from the rom and mix them in write buffer
0013   0000             ; - read 1 sample from read buffer and output it to the DAC
0014   0000             ; - handle loop
0015   0000             ; - bufferize XGM data / parse and apply XGM command / handle extern command
0016   0000             ;
0017   0000             ; register usage :
0018   0000             ; HL  = sample source (in ROM)
0019   0000             ; DE  = write buffer / XGM buffer
0020   0000             ; BC  = counter
0021   0000             ; C = $80 (used for overflow and sample unsign)
0022   0000             ; IYH = temp value
0023   0000             ; HL' = YMPORT1
0024   0000             ; BC' = read buffer
0025   0000             
0026   0000             ; ###########################      define      ##############################
0027   0000             
0028   0000                         INCLUDE "z80_def.i80"   ; basic definitions
0001+  0000             ; ############################ define ##############################
0002+  0000             
0003+  0000             YMPORT0     EQU     $4000           ; YM2612 port 0
0004+  0000             YMPORT1     EQU     $4001           ; YM2612 port 1
0005+  0000             YMPORT2     EQU     $4002           ; YM2612 port 2
0006+  0000             YMPORT3     EQU     $4003           ; YM2612 port 3
0007+  0000             VDPSTATUS_H EQU     $7F04           ; VDP status port high
0008+  0000             VDPSTATUS_L EQU     $7F05           ; VDP status port low
0009+  0000             VCOUNTER    EQU     $7F08           ; V counter
0010+  0000             HCOUNTER    EQU     $7F09           ; H counter
0011+  0000             PSGPORT     EQU     $7F11           ; PSG port
0012+  0000             BANKREG     EQU     $6000           ; bank register
0013+  0000             
0014+  0000             COMPLAY_SFT EQU     0               ; start play command
0015+  0000             COMSTOP_SFT EQU     4               ; stop play command
0016+  0000             
0017+  0000             STATPLAY_SFT  EQU   0               ; playing status
0018+  0000             STATREADY_SFT EQU   7               ; driver ready status
0019+  0000             
0020+  0000             CH0_SFT     EQU     0               ; channel 0
0021+  0000             CH1_SFT     EQU     1               ; channel 1
0022+  0000             CH2_SFT     EQU     2               ; channel 2
0023+  0000             CH3_SFT     EQU     3               ; channel 3
0024+  0000             
0025+  0000             COMPLAY     EQU     1<<COMPLAY_SFT
0026+  0000             COMSTOP     EQU     1<<COMSTOP_SFT
0027+  0000             
0028+  0000             STATPLAY    EQU     1<<STATPLAY_SFT
0029+  0000             STATREADY   EQU     1<<STATREADY_SFT
0030+  0000             
0031+  0000             CH0         EQU     1<<CH0_SFT
0032+  0000             CH1         EQU     1<<CH1_SFT
0033+  0000             CH2         EQU     1<<CH2_SFT
0034+  0000             CH3         EQU     1<<CH3_SFT
0035+  0000             
0036+  0000             
0037+  0000             ; ########################### variable #############################
0038+  0000             
0039+  0000             COMMAND     EQU     $0100           ; command from 68K
0040+  0000             STATUS      EQU     $0102           ; status from Z80
0041+  0000             PARAMS      EQU     $0104           ; parameters (68K and Z80)
0029   0000             
0030   0000             
0031   0000             ; ###########################       var        ##############################
0032   0000             
0033   0000             XGM_PLAY_SFT    EQU     6           ; XGM music play command bit
0034   0000             XGM_RESUME_SFT  EQU     5           ; XGM music resume command bit
0035   0000             XGM_PAUSE_SFT   EQU     4           ; XGM music pause command bit
0036   0000             
0037   0000                                                 ; COMMAND b0 = play PCM0   STATUS b0 = PCM0 playing
0038   0000                                                 ; COMMAND b1 = play PCM1   STATUS b1 = PCM1 playing
0039   0000                                                 ; COMMAND b2 = play PCM2   STATUS b2 = PCM2 playing
0040   0000                                                 ; COMMAND b3 = play PCM3   STATUS b3 = PCM3 playing
0041   0000                                                 ; COMMAND b4 = stop XGM
0042   0000                                                 ; COMMAND b5 = resume XGM
0043   0000                                                 ; COMMAND b6 = play XGM    STATUS b6 = XGM playing
0044   0000             
0045   0000             XGM_ARG_A   EQU     PARAMS+$00      ; XGM address (bit 0 --> bit 23)
0046   0000             
0047   0000             PCM0_ARG_P  EQU     PARAMS+$04      ; priority (0 to 15)
0048   0000             PCM0_ARG_ID EQU     PARAMS+$05      ; PCM id (0 to 255)
0049   0000             PCM1_ARG_P  EQU     PARAMS+$06      ; priority (0 to 15)
0050   0000             PCM1_ARG_ID EQU     PARAMS+$07      ; PCM id (0 to 255)
0051   0000             PCM2_ARG_P  EQU     PARAMS+$08      ; priority (0 to 15)
0052   0000             PCM2_ARG_ID EQU     PARAMS+$09      ; PCM id (0 to 255)
0053   0000             PCM3_ARG_P  EQU     PARAMS+$0A      ; priority (0 to 15)
0054   0000             PCM3_ARG_ID EQU     PARAMS+$0B      ; PCM id (0 to 255)
0055   0000             
0056   0000             PCM_ARG_P   EQU     PCM0_ARG_P
0057   0000             PCM_ARG_ID  EQU     PCM0_ARG_ID
0058   0000             
0059   0000             LOOP_ARG    EQU     PARAMS+$0C      ; number of loop (0 = 255 loop)
0060   0000             PROTECT_ARG EQU     PARAMS+$0D      ; set to 1 from 68k during DMA (in vblank period)
0061   0000                                                 ; to prevent Z80 accessing 68k BUS
0062   0000             
0063   0000             MODIFYING_F EQU     PARAMS+$0E      ; Z80 is modifying the 'PENDING_FRM' variable
0064   0000             PENDING_FRM EQU     PARAMS+$0F      ; contains number of XGM frame to process
0065   0000             
0066   0000             PCM0_PRIO   EQU     PARAMS+$10      ; PCM0 internal priority
0067   0000             PCM0_ADDR   EQU     PARAMS+$12      ; PCM0 internal addr (bit8 --> bit23)
0068   0000             PCM0_LEN    EQU     PARAMS+$14      ; PCM0 internal len (bit8 --> bit23)
0069   0000             PCM1_PRIO   EQU     PARAMS+$18      ; PCM1 internal priority
0070   0000             PCM1_ADDR   EQU     PARAMS+$1A      ; PCM1 internal addr (bit8 --> bit23)
0071   0000             PCM1_LEN    EQU     PARAMS+$1C      ; PCM1 internal len (bit8 --> bit23)
0072   0000             PCM2_PRIO   EQU     PARAMS+$20      ; PCM2 internal priority
0073   0000             PCM2_ADDR   EQU     PARAMS+$22      ; PCM2 internal addr (bit8 --> bit23)
0074   0000             PCM2_LEN    EQU     PARAMS+$24      ; PCM2 internal len (bit8 --> bit23)
0075   0000             PCM3_PRIO   EQU     PARAMS+$28      ; PCM3 internal priority
0076   0000             PCM3_ADDR   EQU     PARAMS+$2A      ; PCM3 internal addr (bit8 --> bit23)
0077   0000             PCM3_LEN    EQU     PARAMS+$2C      ; PCM3 internal len (bit8 --> bit23)
0078   0000             
0079   0000             PCM_PRIO    EQU     PCM0_PRIO
0080   0000             PCM_ADDR    EQU     PCM0_ADDR
0081   0000             PCM_LEN     EQU     PCM0_LEN
0082   0000             
0083   0000             XGM_ADDR    EQU     PARAMS+$30      ; XGM internal addr (bit0 --> bit23)
0084   0000             
0085   0000             WRITEBUF    EQU     PARAMS+$34      ; PCM write buffer pointer (bit8 --> bit9)
0086   0000             READBUF     EQU     PARAMS+$36      ; PCM read buffer pointer (bit8 --> bit9)
0087   0000             
0088   0000             REM_LOOP    EQU     PARAMS+$38      ; remaining loop (0 = 255)
0089   0000             
0090   0000             YM_RR_SAV   EQU     PARAMS+$40      ; YM RR save (4 slots * 6 channels)
0091   0000             PSG_ENV_SAV EQU     PARAMS+$58      ; PSG env save (4 channels)
0092   0000             YM_RR_OFF   EQU     PARAMS+$60      ; YM RR off (4 slots * 6 channels)
0093   0000             PSG_ENV_OFF EQU     PARAMS+$78      ; PSG env off (4 channels)
0094   0000             
0095   0000             YM_2B_SAV   EQU     PARAMS+$5C      ; YM register $2B last write save
0096   0000             YM_2B_CNT   EQU     PARAMS+$5D      ; YM register $2B ON expiration
0097   0000             
0098   0000             IDLE_LOOP   EQU     PARAMS+$7C      ; idle loop counter (XGM frame wait)
0099   0000             WAIT_LOOP   EQU     PARAMS+$7E      ; wait loop counter (DMA contention wait)
0100   0000             
0101   0000             DEBUG_1     EQU     PARAMS+$80      ; debug
0102   0000             DEBUG_2     EQU     PARAMS+$81      ; debug
0103   0000             DEBUG_3     EQU     PARAMS+$82      ; debug
0104   0000             DEBUG_4     EQU     PARAMS+$83      ; debug
0105   0000             DEBUG_5     EQU     PARAMS+$84      ; debug
0106   0000             DEBUG_6     EQU     PARAMS+$85      ; debug
0107   0000             DEBUG_7     EQU     PARAMS+$86      ; debug
0108   0000             DEBUG_8     EQU     PARAMS+$87      ; debug
0109   0000             DEBUG_9     EQU     PARAMS+$88      ; debug
0110   0000             DEBUG_A     EQU     PARAMS+$89      ; debug
0111   0000             DEBUG_B     EQU     PARAMS+$8A      ; debug
0112   0000             
0113   0000             ELAPSED     EQU     PARAMS+$90      ; elapsed frame since beginning of music (in frames), encoded on 24 bit
0114   0000             
0115   0000             JUMP_TABLE  EQU     $1600           ; XGM command jump table (size = $100)
0116   0000             XGM_BUFFER  EQU     $1700           ; XGM music data buffer (size = $100)
0117   0000             
0118   0000             PCM_BUFFER0 EQU     $1800           ; PCM buffer 0
0119   0000             PCM_BUFFER1 EQU     $1900           ; PCM buffer 1
0120   0000             PCM_BUFFER2 EQU     $1A00           ; PCM buffer 2
0121   0000             PCM_BUFFER3 EQU     $1B00           ; PCM buffer 3
0122   0000             
0123   0000             PCM_BUFFER  EQU     PCM_BUFFER0     ; PCM buffer
0124   0000             
0125   0000             
0126   0000             ID_TABLE    EQU     $1C00           ; sample id table (size = $400)
0127   0000             
0128   0000             STACK       EQU     JUMP_TABLE      ; stack pointer above buffer region ($1600 --> $15XX)
0129   0000             
0130   0000             
0131   0000             ; ###########################      macro       ##############################
0132   0000             
0133   0000                         INCLUDE "z80_mac.i80"  ; basic macros
0001+  0000             ; ############################     macro     ##############################
0002+  0000             
0003+  0000             
0004+  0000             ; setBank
0005+  0000             ; -------
0006+  0000             ; A    -> bit 22-15 of rom address to set in the bank register
0007+  0000             ; HL  <-  BANKREG
0008+  0000             ;
0009+  0000             ; set the bank register for ROM area
0010+  0000             ; = 101 cycles
0011+  0000             
0012+  0000                         macro   setBank
0013+  0000~            
0014+  0000~                        LD  HL, BANKREG         ; HL = BANKREG              ' 10
0015+  0000~                        LD  (HL), A             ; #1 (bit 15)               ' 7
0016+  0000~                        RRCA                     ;                          ' 4
0017+  0000~                        LD  (HL), A             ; #2 (bit 16)               ' 7
0018+  0000~                        RRCA                     ;                          ' 4
0019+  0000~                        LD  (HL), A             ; #3 (bit 17)               ' 7
0020+  0000~                        RRCA                     ;                          ' 4
0021+  0000~                        LD  (HL), A             ; #4 (bit 18)               ' 7
0022+  0000~                        RRCA                     ;                          ' 4
0023+  0000~                        LD  (HL), A             ; #5 (bit 19)               ' 7
0024+  0000~                        RRCA                     ;                          ' 4
0025+  0000~                        LD  (HL), A             ; #6 (bit 20)               ' 7
0026+  0000~                        RRCA                     ;                          ' 4
0027+  0000~                        LD  (HL), A             ; #7 (bit 21)               ' 7
0028+  0000~                        RRCA                     ;                          ' 4
0029+  0000~                        LD  (HL), A             ; #8 (bit 22)               ' 7
0030+  0000~                        LD  (HL), L             ; #9 (bit 23 = 0)           ' 7
0031+  0000~            
0032+  0000                         endm                    ;                           ' 101
0033+  0000             
0034+  0000             
0035+  0000             ; setBankFast
0036+  0000             ; -----------
0037+  0000             ; A    -> bit 21-15 of rom address to set in the bank register
0038+  0000             ; HL  <-  BANKREG
0039+  0000             ;
0040+  0000             ; set the bank register for ROM area
0041+  0000             ; = 97 cycles
0042+  0000             
0043+  0000                         macro   setBankFast
0044+  0000~            
0045+  0000~                        LD  HL, BANKREG         ; HL = BANKREG              ' 10
0046+  0000~                        LD  (HL), A             ; #1 (bit 15)               ' 7
0047+  0000~                        RRCA                     ;                          ' 4
0048+  0000~                        LD  (HL), A             ; #2 (bit 16)               ' 7
0049+  0000~                        RRCA                     ;                          ' 4
0050+  0000~                        LD  (HL), A             ; #3 (bit 17)               ' 7
0051+  0000~                        RRCA                     ;                          ' 4
0052+  0000~                        LD  (HL), A             ; #4 (bit 18)               ' 7
0053+  0000~                        RRCA                     ;                          ' 4
0054+  0000~                        LD  (HL), A             ; #5 (bit 19)               ' 7
0055+  0000~                        RRCA                     ;                          ' 4
0056+  0000~                        LD  (HL), A             ; #6 (bit 20)               ' 7
0057+  0000~                        RRCA                     ;                          ' 4
0058+  0000~                        LD  (HL), A             ; #7 (bit 21)               ' 7
0059+  0000~                        LD  (HL), L             ; #8 (bit 22 = 0)           ' 7
0060+  0000~                        LD  (HL), L             ; #9 (bit 23 = 0)           ' 7
0061+  0000~            
0062+  0000                         endm                    ;                           ' 97
0063+  0000             
0064+  0000             
0065+  0000             ; setBank_BC
0066+  0000             ; ----------
0067+  0000             ; A    -> bit 21-15 of rom address to set in the bank register
0068+  0000             ; BC  <-  BANKREG
0069+  0000             ; A   <-  0
0070+  0000             ;
0071+  0000             ; set the bank register for ROM area
0072+  0000             ; = 101 cycles
0073+  0000             
0074+  0000                         macro   setBank_BC
0075+  0000~            
0076+  0000~                        LD  BC, BANKREG         ; BC = BANKREG              ' 10
0077+  0000~                        LD  (BC), A             ; #1 (bit 15)               ' 7
0078+  0000~                        RRCA                    ;                           ' 4
0079+  0000~                        LD  (BC), A             ; #2 (bit 16)               ' 7
0080+  0000~                        RRCA                    ;                           ' 4
0081+  0000~                        LD  (BC), A             ; #3 (bit 17)               ' 7
0082+  0000~                        RRCA                    ;                           ' 4
0083+  0000~                        LD  (BC), A             ; #4 (bit 18)               ' 7
0084+  0000~                        RRCA                    ;                           ' 4
0085+  0000~                        LD  (BC), A             ; #5 (bit 19)               ' 7
0086+  0000~                        RRCA                    ;                           ' 4
0087+  0000~                        LD  (BC), A             ; #6 (bit 20)               ' 7
0088+  0000~                        RRCA                    ;                           ' 4
0089+  0000~                        LD  (BC), A             ; #7 (bit 21)               ' 7
0090+  0000~                        XOR A                   ;                           ' 4
0091+  0000~                        LD  (BC), A             ; #8 (bit 22 = 0)           ' 7
0092+  0000~                        LD  (BC), A             ; #9 (bit 23 = 0)           ' 7
0093+  0000~            
0094+  0000                         endm                    ;                           ' 101
0095+  0000             
0096+  0000             
0097+  0000             ; setBank_DE
0098+  0000             ; ----------
0099+  0000             ; A    -> bit 22-15 of rom address to set in the bank register
0100+  0000             ; DE  <-  BANKREG
0101+  0000             ; A   <-  0
0102+  0000             ;
0103+  0000             ; set the bank register for ROM area
0104+  0000             ; = 105 cycles
0105+  0000             
0106+  0000                         macro   setBank_DE
0107+  0000~            
0108+  0000~                        LD  DE, BANKREG         ; DE = BANKREG              ' 10
0109+  0000~                        LD  (DE), A             ; #1 (bit 15)               ' 7
0110+  0000~                        RRCA                     ;                          ' 4
0111+  0000~                        LD  (DE), A             ; #2 (bit 16)               ' 7
0112+  0000~                        RRCA                     ;                          ' 4
0113+  0000~                        LD  (DE), A             ; #3 (bit 17)               ' 7
0114+  0000~                        RRCA                     ;                          ' 4
0115+  0000~                        LD  (DE), A             ; #4 (bit 18)               ' 7
0116+  0000~                        RRCA                     ;                          ' 4
0117+  0000~                        LD  (DE), A             ; #5 (bit 19)               ' 7
0118+  0000~                        RRCA                     ;                          ' 4
0119+  0000~                        LD  (DE), A             ; #6 (bit 20)               ' 7
0120+  0000~                        RRCA                     ;                          ' 4
0121+  0000~                        LD  (DE), A             ; #7 (bit 21)               ' 7
0122+  0000~                        RRCA                     ;                          ' 4
0123+  0000~                        LD  (DE), A             ; #8 (bit 22)               ' 7
0124+  0000~                        XOR A                    ;                          ' 4
0125+  0000~                        LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
0126+  0000~            
0127+  0000                         endm                    ;                           ' 105
0128+  0000             
0129+  0000             
0130+  0000             ; writeYMFast
0131+  0000             ; -----------
0132+  0000             ; HL  <-> YM port where to write
0133+  0000             ; D    -> address
0134+  0000             ; E    -> value
0135+  0000             ;
0136+  0000             ; write to YM2612 (no busy check)
0137+  0000             ; = 18 cycles
0138+  0000             
0139+  0000                         macro   writeYMFast
0140+  0000~            
0141+  0000~                        LD      (HL), D         ; write address             ' 7     |
0142+  0000~                        INC     L               ; next port                 ' 4     | 18
0143+  0000~                        LD      (HL), E         ; write value               ' 7     |
0144+  0000~            
0145+  0000                         endm
0146+  0000             
0147+  0000             
0148+  0000             
0149+  0000             ; getPlayCommand
0150+  0000             ; --------------
0151+  0000             ; HL  <-  point to COMMAND
0152+  0000             ; zf  <-  channel 'ch' play command
0153+  0000             ;
0154+  0000             ; Z flag reset if play command for channel 'ch'
0155+  0000             ; = 22 cycles
0156+  0000             
0157+  0000                         macro   getPlayCommand ch
0158+  0000~            
0159+  0000~                        LD      HL, COMMAND             ;                   ' 10
0160+  0000~                        BIT     COMPLAY_SFT+ch, (HL)    ; play command ?    ' 12
0161+  0000~            
0162+  0000                         endm                            ;                   ' 22
0163+  0000             
0164+  0000             
0165+  0000             ; getStopCommand
0166+  0000             ; --------------
0167+  0000             ; HL  <-  point to COMMAND
0168+  0000             ; zf  <-  channel 'ch' stop command
0169+  0000             ;
0170+  0000             ; Z flag reset if stop command for channel 'ch'
0171+  0000             ; = 22 cycles
0172+  0000             
0173+  0000                         macro   getStopCommand ch
0174+  0000~            
0175+  0000~                        LD      HL, COMMAND             ;                   ' 10
0176+  0000~                        BIT     COMSTOP_SFT+ch, (HL)    ; stop command ?    ' 12
0177+  0000~            
0178+  0000                         endm                            ;                   ' 22
0179+  0000             
0180+  0000             
0181+  0000             ; setPlayCommand
0182+  0000             ; ----------------
0183+  0000             ; HL  <-  point to COMMAND
0184+  0000             ;
0185+  0000             ; set the play command for channel 'ch'
0186+  0000             ; = 25 cycles
0187+  0000             
0188+  0000                         macro   setPlayCommand ch
0189+  0000~            
0190+  0000~                        LD      HL, COMMAND             ;                   ' 10
0191+  0000~                        SET     COMPLAY_SFT+ch, (HL)    ; set command       ' 15
0192+  0000~            
0193+  0000                         endm                            ;                   ' 25
0194+  0000             
0195+  0000             
0196+  0000             ; setStopCommand
0197+  0000             ; ----------------
0198+  0000             ; HL  <-  point to COMMAND
0199+  0000             ;
0200+  0000             ; set the stop command for channel 'ch'
0201+  0000             ; = 25 cycles
0202+  0000             
0203+  0000                         macro   setStopCommand ch
0204+  0000~            
0205+  0000~                        LD      HL, COMMAND             ;                   ' 10
0206+  0000~                        SET     COMSTOP_SFT+ch, (HL)    ; set command       ' 15
0207+  0000~            
0208+  0000                         endm                            ;                   ' 25
0209+  0000             
0210+  0000             
0211+  0000             ; clearPlayCommand
0212+  0000             ; ----------------
0213+  0000             ; HL  <-  point to COMMAND
0214+  0000             ;
0215+  0000             ; clear the play command for channel 'ch'
0216+  0000             ; = 25 cycles
0217+  0000             
0218+  0000                         macro   clearPlayCommand ch
0219+  0000~            
0220+  0000~                        LD      HL, COMMAND             ;                   ' 10
0221+  0000~                        RES     COMPLAY_SFT+ch, (HL)    ; clear command     ' 15
0222+  0000~            
0223+  0000                         endm                            ;                   ' 25
0224+  0000             
0225+  0000             
0226+  0000             ; clearStopCommand
0227+  0000             ; ----------------
0228+  0000             ; HL  <-  point to COMMAND
0229+  0000             ;
0230+  0000             ; clear the stop command for channel 'ch'
0231+  0000             ; = 25 cycles
0232+  0000             
0233+  0000                         macro   clearStopCommand ch
0234+  0000~            
0235+  0000~                        LD      HL, COMMAND             ;                   ' 10
0236+  0000~                        RES     COMSTOP_SFT+ch, (HL)    ; clear command     ' 15
0237+  0000~            
0238+  0000                         endm                            ;                   ' 25
0239+  0000             
0240+  0000             
0241+  0000             ; getPlayStatus
0242+  0000             ; -------------
0243+  0000             ; HL  <- point to STATUS
0244+  0000             ; zf  <-  channel 'ch' is playing
0245+  0000             ;
0246+  0000             ; Z flag reset if play status for channel 'ch'
0247+  0000             ; = 22 cycles
0248+  0000             
0249+  0000                         macro   getPlayStatus ch
0250+  0000~            
0251+  0000~                        LD      HL, STATUS              ;                   ' 10
0252+  0000~                        BIT     STATPLAY_SFT+ch, (HL)   ; get status        ' 12
0253+  0000~            
0254+  0000                         endm                            ;                   ' 22
0255+  0000             
0256+  0000             
0257+  0000             ; setPlayStatus
0258+  0000             ; -------------
0259+  0000             ; HL  <- point to STATUS
0260+  0000             ;
0261+  0000             ; set the play status for channel 'ch'
0262+  0000             ; = 25 cycles
0263+  0000             
0264+  0000                         macro   setPlayStatus ch
0265+  0000~            
0266+  0000~                        LD      HL, STATUS              ;                   ' 10
0267+  0000~                        SET     STATPLAY_SFT+ch, (HL)   ; set status        ' 15
0268+  0000~            
0269+  0000                         endm                            ;                   ' 25
0270+  0000             
0271+  0000             
0272+  0000             ; clearPlayStatus
0273+  0000             ; ---------------
0274+  0000             ; HL  <- point to STATUS
0275+  0000             ;
0276+  0000             ; clear play status for channel 'ch'
0277+  0000             ; = 25 cycles
0278+  0000             
0279+  0000                         macro   clearPlayStatus ch
0280+  0000~            
0281+  0000~                        LD      HL, STATUS              ;                   ' 10
0282+  0000~                        RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
0283+  0000~            
0284+  0000                         endm                            ;                   ' 25
0285+  0000             
0286+  0000             
0287+  0000             ; getLoopStatus
0288+  0000             ; -------------
0289+  0000             ; HL  <- point to STATUS+1
0290+  0000             ; zf  <-  channel 'ch' is playing
0291+  0000             ;
0292+  0000             ; Z flag reset if loop status for channel 'ch'
0293+  0000             ; = 22 cycles
0294+  0000             
0295+  0000                         macro   getLoopStatus ch
0296+  0000~            
0297+  0000~                        LD      HL, STATUS+1            ;                   ' 10
0298+  0000~                        BIT     STATPLAY_SFT+ch, (HL)   ; get status        ' 12
0299+  0000~            
0300+  0000                         endm                            ;                   ' 22
0301+  0000             
0302+  0000             
0303+  0000             ; setLoopStatus
0304+  0000             ; -------------
0305+  0000             ; HL  <- point to STATUS+1
0306+  0000             ;
0307+  0000             ; set the loop status for channel 'ch'
0308+  0000             ; = 25 cycles
0309+  0000             
0310+  0000                         macro   setLoopStatus ch
0311+  0000~            
0312+  0000~                        LD      HL, STATUS+1            ;                   ' 10
0313+  0000~                        SET     STATPLAY_SFT+ch, (HL)   ; set status        ' 15
0314+  0000~            
0315+  0000                         endm                            ;                   ' 25
0316+  0000             
0317+  0000             
0318+  0000             ; clearLoopStatus
0319+  0000             ; ---------------
0320+  0000             ; HL  <- point to STATUS+1
0321+  0000             ;
0322+  0000             ; clear loop status for channel 'ch'
0323+  0000             ; = 25 cycles
0324+  0000             
0325+  0000                         macro   clearLoopStatus ch
0326+  0000~            
0327+  0000~                        LD      HL, STATUS+1            ;                   ' 10
0328+  0000~                        RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
0329+  0000~            
0330+  0000                         endm                            ;                   ' 25
0331+  0000             
0332+  0000             
0333+  0000             ; clearAllStatus
0334+  0000             ; --------------
0335+  0000             ; HL  <- 0
0336+  0000             ;
0337+  0000             ; clear play and loop status for all channel
0338+  0000             ; = 26 cycles
0339+  0000             
0340+  0000                         macro   clearAllStatus
0341+  0000~            
0342+  0000~                        LD      HL, $00                 ;                   ' 10
0343+  0000~                        LD      (STATUS), HL            ; clear status      ' 16
0344+  0000~            
0345+  0000                         endm                            ;                   ' 26
0346+  0000             
0347+  0000             
0348+  0000             ; ############################  macro wait macro  ##############################
0349+  0000             
0350+  0000             
0351+  0000             ; wait2p16x
0352+  0000             ; ---------
0353+  0000             ; wait for ((w * 16) + 2) cycles
0354+  0000             ;
0355+  0000                         macro   wait2p16x w
0356+  0000~            
0357+  0000~                        LD      A, w            ; 7-2
0358+  0000~            .loop
0359+  0000~                        DEC     A               ; 4
0360+  0000~                        JR      NZ, .loop       ; 12
0361+  0000~            
0362+  0000                         endm
0363+  0000             
0364+  0000             
0365+  0000                         macro   wait4
0366+  0000~                        NOP
0367+  0000                         endm
0368+  0000             
0369+  0000                         macro   wait6
0370+  0000~                        INC     DE
0371+  0000                         endm
0372+  0000             
0373+  0000                         macro   wait7
0374+  0000~                        OR      $0
0375+  0000                         endm
0376+  0000             
0377+  0000                         macro   wait8
0378+  0000~                        wait4
0379+  0000~                        wait4
0380+  0000                         endm
0381+  0000             
0382+  0000                         macro   wait9
0383+  0000~                        LD      R, A
0384+  0000                         endm
0385+  0000             
0386+  0000                         macro   wait10
0387+  0000~                        JP      .go
0388+  0000~            .go
0389+  0000                         endm
0390+  0000             
0391+  0000                         macro   wait11
0392+  0000~                        wait7
0393+  0000~                        wait4
0394+  0000                         endm
0395+  0000             
0396+  0000                         macro   wait12
0397+  0000~                        JR      .go
0398+  0000~            .go
0399+  0000                         endm
0400+  0000             
0401+  0000                         macro   wait13
0402+  0000~                        wait9
0403+  0000~                        wait4
0404+  0000                         endm
0405+  0000             
0406+  0000                         macro   wait14
0407+  0000~                        wait7
0408+  0000~                        wait7
0409+  0000                         endm
0410+  0000             
0411+  0000                         macro   wait15
0412+  0000~                        wait8
0413+  0000~                        wait7
0414+  0000                         endm
0415+  0000             
0416+  0000                         macro   wait16
0417+  0000~                        wait12
0418+  0000~                        wait4
0419+  0000                         endm
0420+  0000             
0421+  0000                         macro   wait17
0422+  0000~                        wait10
0423+  0000~                        wait7
0424+  0000                         endm
0425+  0000             
0426+  0000                         macro   wait18
0427+  0000~                        wait9
0428+  0000~                        wait9
0429+  0000                         endm
0430+  0000             
0431+  0000                         macro   wait19
0432+  0000~                        wait12
0433+  0000~                        wait7
0434+  0000                         endm
0435+  0000             
0436+  0000                         macro   wait20
0437+  0000~                        wait11
0438+  0000~                        wait9
0439+  0000                         endm
0440+  0000             
0441+  0000                         macro   wait21
0442+  0000~                        wait12
0443+  0000~                        wait9
0444+  0000                         endm
0445+  0000             
0446+  0000                         macro   wait22
0447+  0000~                        wait18
0448+  0000~                        wait4
0449+  0000                         endm
0450+  0000             
0451+  0000                         macro   wait23
0452+  0000~                        wait14
0453+  0000~                        wait9
0454+  0000                         endm
0455+  0000             
0456+  0000                         macro   wait24
0457+  0000~                        wait12
0458+  0000~                        wait12
0459+  0000                         endm
0460+  0000             
0461+  0000                         macro   wait25
0462+  0000~                        wait21
0463+  0000~                        wait4
0464+  0000                         endm
0465+  0000             
0466+  0000                         macro   wait26
0467+  0000~                        wait18
0468+  0000~                        wait8
0469+  0000                         endm
0470+  0000             
0471+  0000                         macro   wait27
0472+  0000~                        wait18
0473+  0000~                        wait9
0474+  0000                         endm
0475+  0000             
0476+  0000                         macro   wait28
0477+  0000~                        wait21
0478+  0000~                        wait7
0479+  0000                         endm
0480+  0000             
0481+  0000                         macro   wait29
0482+  0000~                        wait21
0483+  0000~                        wait8
0484+  0000                         endm
0485+  0000             
0486+  0000                         macro   wait30
0487+  0000~                        wait21
0488+  0000~                        wait9
0489+  0000                         endm
0490+  0000             
0491+  0000                         macro   wait31
0492+  0000~                        wait21
0493+  0000~                        wait10
0494+  0000                         endm
0495+  0000             
0496+  0000                         macro   wait32
0497+  0000~                        wait20
0498+  0000~                        wait12
0499+  0000                         endm
0500+  0000             
0501+  0000                         macro   wait33
0502+  0000~                        wait21
0503+  0000~                        wait12
0504+  0000                         endm
0505+  0000             
0506+  0000                         macro   wait34
0507+  0000~                        wait2p16x 2
0508+  0000                         endm
0509+  0000             
0510+  0000                         macro   wait35
0511+  0000~                        wait28
0512+  0000~                        wait7
0513+  0000                         endm
0514+  0000             
0515+  0000                         macro   wait36
0516+  0000~                        wait27
0517+  0000~                        wait9
0518+  0000                         endm
0519+  0000             
0520+  0000                         macro   wait37
0521+  0000~                        wait28
0522+  0000~                        wait9
0523+  0000                         endm
0524+  0000             
0525+  0000                         macro   wait38
0526+  0000~                        wait24
0527+  0000~                        wait14
0528+  0000                         endm
0529+  0000             
0530+  0000                         macro   wait39
0531+  0000~                        wait27
0532+  0000~                        wait12
0533+  0000                         endm
0534+  0000             
0535+  0000                         macro   wait40
0536+  0000~                        wait27
0537+  0000~                        wait13
0538+  0000                         endm
0539+  0000             
0540+  0000                         macro   wait41
0541+  0000~                        wait34
0542+  0000~                        wait7
0543+  0000                         endm
0544+  0000             
0545+  0000                         macro   wait42
0546+  0000~                        wait34
0547+  0000~                        wait8
0548+  0000                         endm
0549+  0000             
0550+  0000                         macro   wait43
0551+  0000~                        wait36
0552+  0000~                        wait7
0553+  0000                         endm
0554+  0000             
0555+  0000                         macro   wait44
0556+  0000~                        wait34
0557+  0000~                        wait10
0558+  0000                         endm
0559+  0000             
0560+  0000                         macro   wait45
0561+  0000~                        wait36
0562+  0000~                        wait9
0563+  0000                         endm
0564+  0000             
0565+  0000                         macro   wait46
0566+  0000~                        wait34
0567+  0000~                        wait12
0568+  0000                         endm
0569+  0000             
0570+  0000                         macro   wait47
0571+  0000~                        wait34
0572+  0000~                        wait13
0573+  0000                         endm
0574+  0000             
0575+  0000                         macro   wait48
0576+  0000~                        wait36
0577+  0000~                        wait12
0578+  0000                         endm
0579+  0000             
0580+  0000                         macro   wait49
0581+  0000~                        wait36
0582+  0000~                        wait13
0583+  0000                         endm
0584+  0000             
0585+  0000                         macro   wait50
0586+  0000~                        wait2p16x 3
0587+  0000                         endm
0588+  0000             
0589+  0000                         macro   wait51
0590+  0000~                        wait34
0591+  0000~                        wait17
0592+  0000                         endm
0593+  0000             
0594+  0000                         macro   wait52
0595+  0000~                        wait34
0596+  0000~                        wait18
0597+  0000                         endm
0598+  0000             
0599+  0000                         macro   wait53
0600+  0000~                        wait36
0601+  0000~                        wait17
0602+  0000                         endm
0603+  0000             
0604+  0000                         macro   wait54
0605+  0000~                        wait50
0606+  0000~                        wait4
0607+  0000                         endm
0608+  0000             
0609+  0000                         macro   wait55
0610+  0000~                        wait34
0611+  0000~                        wait21
0612+  0000                         endm
0613+  0000             
0614+  0000                         macro   wait56
0615+  0000~                        wait34
0616+  0000~                        wait22
0617+  0000                         endm
0618+  0000             
0619+  0000                         macro   wait57
0620+  0000~                        wait50
0621+  0000~                        wait7
0622+  0000                         endm
0623+  0000             
0624+  0000                         macro   wait58
0625+  0000~                        wait50
0626+  0000~                        wait8
0627+  0000                         endm
0628+  0000             
0629+  0000                         macro   wait59
0630+  0000~                        wait50
0631+  0000~                        wait9
0632+  0000                         endm
0633+  0000             
0634+  0000                         macro   wait60
0635+  0000~                        wait50
0636+  0000~                        wait10
0637+  0000                         endm
0638+  0000             
0639+  0000                         macro   wait61
0640+  0000~                        wait50
0641+  0000~                        wait11
0642+  0000                         endm
0643+  0000             
0644+  0000                         macro   wait62
0645+  0000~                        wait50
0646+  0000~                        wait12
0647+  0000                         endm
0648+  0000             
0649+  0000                         macro   wait63
0650+  0000~                        wait50
0651+  0000~                        wait13
0652+  0000                         endm
0653+  0000             
0654+  0000                         macro   wait64
0655+  0000~                        wait50
0656+  0000~                        wait14
0657+  0000                         endm
0658+  0000             
0659+  0000                         macro   wait65
0660+  0000~                        wait50
0661+  0000~                        wait15
0662+  0000                         endm
0663+  0000             
0664+  0000                         macro   wait66
0665+  0000~                        wait2p16x 4
0666+  0000                         endm
0667+  0000             
0668+  0000                         macro   wait67
0669+  0000~                        wait50
0670+  0000~                        wait17
0671+  0000                         endm
0672+  0000             
0673+  0000                         macro   wait68
0674+  0000~                        wait50
0675+  0000~                        wait18
0676+  0000                         endm
0677+  0000             
0678+  0000                         macro   wait69
0679+  0000~                        wait50
0680+  0000~                        wait19
0681+  0000                         endm
0682+  0000             
0683+  0000                         macro   wait70
0684+  0000~                        wait66
0685+  0000~                        wait4
0686+  0000                         endm
0687+  0000             
0688+  0000                         macro   wait71
0689+  0000~                        wait50
0690+  0000~                        wait21
0691+  0000                         endm
0692+  0000             
0693+  0000                         macro   wait72
0694+  0000~                        wait50
0695+  0000~                        wait22
0696+  0000                         endm
0697+  0000             
0698+  0000                         macro   wait73
0699+  0000~                        wait66
0700+  0000~                        wait7
0701+  0000                         endm
0702+  0000             
0703+  0000                         macro   wait74
0704+  0000~                        wait66
0705+  0000~                        wait8
0706+  0000                         endm
0707+  0000             
0708+  0000                         macro   wait75
0709+  0000~                        wait66
0710+  0000~                        wait9
0711+  0000                         endm
0712+  0000             
0713+  0000                         macro   wait76
0714+  0000~                        wait66
0715+  0000~                        wait10
0716+  0000                         endm
0717+  0000             
0718+  0000                         macro   wait77
0719+  0000~                        wait66
0720+  0000~                        wait11
0721+  0000                         endm
0722+  0000             
0723+  0000                         macro   wait78
0724+  0000~                        wait66
0725+  0000~                        wait12
0726+  0000                         endm
0727+  0000             
0728+  0000                         macro   wait79
0729+  0000~                        wait66
0730+  0000~                        wait13
0731+  0000                         endm
0732+  0000             
0733+  0000                         macro   wait80
0734+  0000~                        wait66
0735+  0000~                        wait14
0736+  0000                         endm
0737+  0000             
0738+  0000                         macro   wait81
0739+  0000~                        wait66
0740+  0000~                        wait15
0741+  0000                         endm
0742+  0000             
0743+  0000                         macro   wait82
0744+  0000~                        wait2p16x 5
0745+  0000                         endm
0746+  0000             
0747+  0000                         macro   wait83
0748+  0000~                        wait66
0749+  0000~                        wait17
0750+  0000                         endm
0751+  0000             
0752+  0000                         macro   wait84
0753+  0000~                        wait66
0754+  0000~                        wait18
0755+  0000                         endm
0756+  0000             
0757+  0000                         macro   wait85
0758+  0000~                        wait66
0759+  0000~                        wait19
0760+  0000                         endm
0761+  0000             
0762+  0000                         macro   wait86
0763+  0000~                        wait82
0764+  0000~                        wait4
0765+  0000                         endm
0766+  0000             
0767+  0000                         macro   wait87
0768+  0000~                        wait66
0769+  0000~                        wait21
0770+  0000                         endm
0771+  0000             
0772+  0000                         macro   wait88
0773+  0000~                        wait66
0774+  0000~                        wait22
0775+  0000                         endm
0776+  0000             
0777+  0000                         macro   wait89
0778+  0000~                        wait82
0779+  0000~                        wait7
0780+  0000                         endm
0781+  0000             
0782+  0000                         macro   wait90
0783+  0000~                        wait82
0784+  0000~                        wait8
0785+  0000                         endm
0786+  0000             
0787+  0000                         macro   wait91
0788+  0000~                        wait82
0789+  0000~                        wait9
0790+  0000                         endm
0791+  0000             
0792+  0000                         macro   wait92
0793+  0000~                        wait82
0794+  0000~                        wait10
0795+  0000                         endm
0796+  0000             
0797+  0000                         macro   wait94
0798+  0000~                        wait82
0799+  0000~                        wait12
0800+  0000                         endm
0801+  0000             
0802+  0000                         macro   wait95
0803+  0000~                        wait82
0804+  0000~                        wait13
0805+  0000                         endm
0806+  0000             
0807+  0000                         macro   wait96
0808+  0000~                        wait82
0809+  0000~                        wait14
0810+  0000                         endm
0811+  0000             
0812+  0000                         macro   wait97
0813+  0000~                        wait82
0814+  0000~                        wait15
0815+  0000                         endm
0816+  0000             
0817+  0000                         macro   wait98
0818+  0000~                        wait2p16x 6
0819+  0000                         endm
0820+  0000             
0821+  0000                         macro   wait99
0822+  0000~                        wait82
0823+  0000~                        wait17
0824+  0000                         endm
0825+  0000             
0826+  0000                         macro   wait100
0827+  0000~                        wait82
0828+  0000~                        wait18
0829+  0000                         endm
0830+  0000             
0831+  0000                         macro   wait102
0832+  0000~                        wait98
0833+  0000~                        wait4
0834+  0000                         endm
0835+  0000             
0836+  0000                         macro   wait103
0837+  0000~                        wait82
0838+  0000~                        wait21
0839+  0000                         endm
0840+  0000             
0841+  0000                         macro   wait104
0842+  0000~                        wait82
0843+  0000~                        wait22
0844+  0000                         endm
0845+  0000             
0846+  0000                         macro   wait105
0847+  0000~                        wait98
0848+  0000~                        wait7
0849+  0000                         endm
0850+  0000             
0851+  0000                         macro   wait106
0852+  0000~                        wait98
0853+  0000~                        wait8
0854+  0000                         endm
0855+  0000             
0856+  0000                         macro   wait107
0857+  0000~                        wait98
0858+  0000~                        wait9
0859+  0000                         endm
0860+  0000             
0861+  0000                         macro   wait108
0862+  0000~                        wait98
0863+  0000~                        wait10
0864+  0000                         endm
0865+  0000             
0866+  0000                         macro   wait109
0867+  0000~                        wait98
0868+  0000~                        wait11
0869+  0000                         endm
0870+  0000             
0871+  0000                         macro   wait110
0872+  0000~                        wait98
0873+  0000~                        wait12
0874+  0000                         endm
0875+  0000             
0876+  0000                         macro   wait111
0877+  0000~                        wait98
0878+  0000~                        wait13
0879+  0000                         endm
0880+  0000             
0881+  0000                         macro   wait112
0882+  0000~                        wait98
0883+  0000~                        wait14
0884+  0000                         endm
0885+  0000             
0886+  0000                         macro   wait114
0887+  0000~                        wait2p16x 7
0888+  0000                         endm
0889+  0000             
0890+  0000                         macro   wait115
0891+  0000~                        wait98
0892+  0000~                        wait17
0893+  0000                         endm
0894+  0000             
0895+  0000                         macro   wait116
0896+  0000~                        wait98
0897+  0000~                        wait18
0898+  0000                         endm
0899+  0000             
0900+  0000                         macro   wait117
0901+  0000~                        wait98
0902+  0000~                        wait19
0903+  0000                         endm
0904+  0000             
0905+  0000                         macro   wait118
0906+  0000~                        wait114
0907+  0000~                        wait4
0908+  0000                         endm
0909+  0000             
0910+  0000                         macro   wait119
0911+  0000~                        wait98
0912+  0000~                        wait21
0913+  0000                         endm
0914+  0000             
0915+  0000                         macro   wait120
0916+  0000~                        wait98
0917+  0000~                        wait22
0918+  0000                         endm
0919+  0000             
0920+  0000                         macro   wait121
0921+  0000~                        wait114
0922+  0000~                        wait7
0923+  0000                         endm
0924+  0000             
0925+  0000                         macro   wait122
0926+  0000~                        wait114
0927+  0000~                        wait8
0928+  0000                         endm
0929+  0000             
0930+  0000                         macro   wait123
0931+  0000~                        wait114
0932+  0000~                        wait9
0933+  0000                         endm
0934+  0000             
0935+  0000                         macro   wait124
0936+  0000~                        wait114
0937+  0000~                        wait10
0938+  0000                         endm
0939+  0000             
0940+  0000                         macro   wait125
0941+  0000~                        wait114
0942+  0000~                        wait11
0943+  0000                         endm
0944+  0000             
0945+  0000                         macro   wait126
0946+  0000~                        wait114
0947+  0000~                        wait12
0948+  0000                         endm
0949+  0000             
0950+  0000                         macro   wait127
0951+  0000~                        wait114
0952+  0000~                        wait13
0953+  0000                         endm
0954+  0000             
0955+  0000                         macro   wait128
0956+  0000~                        wait114
0957+  0000~                        wait14
0958+  0000                         endm
0959+  0000             
0960+  0000                         macro   wait129
0961+  0000~                        wait114
0962+  0000~                        wait15
0963+  0000                         endm
0964+  0000             
0965+  0000                         macro   wait130
0966+  0000~                        wait2p16x 8
0967+  0000                         endm
0968+  0000             
0969+  0000                         macro   wait131
0970+  0000~                        wait114
0971+  0000~                        wait17
0972+  0000                         endm
0973+  0000             
0974+  0000                         macro   wait132
0975+  0000~                        wait114
0976+  0000~                        wait18
0977+  0000                         endm
0978+  0000             
0979+  0000                         macro   wait133
0980+  0000~                        wait114
0981+  0000~                        wait19
0982+  0000                         endm
0983+  0000             
0984+  0000                         macro   wait134
0985+  0000~                        wait130
0986+  0000~                        wait4
0987+  0000                         endm
0988+  0000             
0989+  0000                         macro   wait135
0990+  0000~                        wait114
0991+  0000~                        wait21
0992+  0000                         endm
0993+  0000             
0994+  0000                         macro   wait136
0995+  0000~                        wait114
0996+  0000~                        wait22
0997+  0000                         endm
0998+  0000             
0999+  0000                         macro   wait137
1000+  0000~                        wait130
1001+  0000~                        wait7
1002+  0000                         endm
1003+  0000             
1004+  0000                         macro   wait138
1005+  0000~                        wait130
1006+  0000~                        wait8
1007+  0000                         endm
1008+  0000             
1009+  0000                         macro   wait139
1010+  0000~                        wait130
1011+  0000~                        wait9
1012+  0000                         endm
1013+  0000             
1014+  0000                         macro   wait140
1015+  0000~                        wait130
1016+  0000~                        wait10
1017+  0000                         endm
1018+  0000             
1019+  0000                         macro   wait141
1020+  0000~                        wait130
1021+  0000~                        wait11
1022+  0000                         endm
1023+  0000             
1024+  0000                         macro   wait144
1025+  0000~                        wait130
1026+  0000~                        wait14
1027+  0000                         endm
1028+  0000             
1029+  0000                         macro   wait145
1030+  0000~                        wait130
1031+  0000~                        wait15
1032+  0000                         endm
1033+  0000             
1034+  0000                         macro   wait146
1035+  0000~                        wait2p16x 9
1036+  0000                         endm
1037+  0000             
1038+  0000                         macro   wait147
1039+  0000~                        wait130
1040+  0000~                        wait17
1041+  0000                         endm
1042+  0000             
1043+  0000                         macro   wait148
1044+  0000~                        wait130
1045+  0000~                        wait18
1046+  0000                         endm
1047+  0000             
1048+  0000                         macro   wait149
1049+  0000~                        wait130
1050+  0000~                        wait19
1051+  0000                         endm
1052+  0000             
1053+  0000                         macro   wait150
1054+  0000~                        wait146
1055+  0000~                        wait4
1056+  0000                         endm
1057+  0000             
1058+  0000                         macro   wait154
1059+  0000~                        wait146
1060+  0000~                        wait8
1061+  0000                         endm
1062+  0000             
1063+  0000                         macro   wait155
1064+  0000~                        wait146
1065+  0000~                        wait9
1066+  0000                         endm
1067+  0000             
1068+  0000                         macro   wait156
1069+  0000~                        wait146
1070+  0000~                        wait10
1071+  0000                         endm
1072+  0000             
1073+  0000                         macro   wait157
1074+  0000~                        wait146
1075+  0000~                        wait11
1076+  0000                         endm
1077+  0000             
1078+  0000                         macro   wait158
1079+  0000~                        wait146
1080+  0000~                        wait12
1081+  0000                         endm
1082+  0000             
1083+  0000                         macro   wait160
1084+  0000~                        wait146
1085+  0000~                        wait14
1086+  0000                         endm
1087+  0000             
1088+  0000                         macro   wait161
1089+  0000~                        wait146
1090+  0000~                        wait15
1091+  0000                         endm
1092+  0000             
1093+  0000                         macro   wait162
1094+  0000~                        wait2p16x 10
1095+  0000                         endm
1096+  0000             
1097+  0000                         macro   wait164
1098+  0000~                        wait146
1099+  0000~                        wait18
1100+  0000                         endm
1101+  0000             
1102+  0000                         macro   wait165
1103+  0000~                        wait146
1104+  0000~                        wait19
1105+  0000                         endm
1106+  0000             
1107+  0000                         macro   wait166
1108+  0000~                        wait162
1109+  0000~                        wait4
1110+  0000                         endm
1111+  0000             
1112+  0000                         macro   wait172
1113+  0000~                        wait162
1114+  0000~                        wait10
1115+  0000                         endm
1116+  0000             
1117+  0000                         macro   wait174
1118+  0000~                        wait162
1119+  0000~                        wait12
1120+  0000                         endm
1121+  0000             
1122+  0000                         macro   wait175
1123+  0000~                        wait162
1124+  0000~                        wait13
1125+  0000                         endm
1126+  0000             
1127+  0000                         macro   wait176
1128+  0000~                        wait162
1129+  0000~                        wait14
1130+  0000                         endm
1131+  0000             
1132+  0000                         macro   wait178
1133+  0000~                        wait2p16x 11
1134+  0000                         endm
1135+  0000             
1136+  0000                         macro   wait179
1137+  0000~                        wait162
1138+  0000~                        wait17
1139+  0000                         endm
1140+  0000             
1141+  0000                         macro   wait180
1142+  0000~                        wait162
1143+  0000~                        wait18
1144+  0000                         endm
1145+  0000             
1146+  0000                         macro   wait182
1147+  0000~                        wait178
1148+  0000~                        wait4
1149+  0000                         endm
1150+  0000             
1151+  0000                         macro   wait183
1152+  0000~                        wait162
1153+  0000~                        wait121
1154+  0000                         endm
1155+  0000             
1156+  0000                         macro   wait186
1157+  0000~                        wait178
1158+  0000~                        wait8
1159+  0000                         endm
1160+  0000             
1161+  0000                         macro   wait187
1162+  0000~                        wait178
1163+  0000~                        wait9
1164+  0000                         endm
1165+  0000             
1166+  0000                         macro   wait189
1167+  0000~                        wait178
1168+  0000~                        wait11
1169+  0000                         endm
1170+  0000             
1171+  0000                         macro   wait191
1172+  0000~                        wait178
1173+  0000~                        wait13
1174+  0000                         endm
1175+  0000             
1176+  0000                         macro   wait192
1177+  0000~                        wait178
1178+  0000~                        wait14
1179+  0000                         endm
1180+  0000             
1181+  0000                         macro   wait193
1182+  0000~                        wait178
1183+  0000~                        wait15
1184+  0000                         endm
1185+  0000             
1186+  0000                         macro   wait194
1187+  0000~                        wait2p16x 12
1188+  0000                         endm
1189+  0000             
1190+  0000                         macro   wait197
1191+  0000~                        wait178
1192+  0000~                        wait19
1193+  0000                         endm
1194+  0000             
1195+  0000                         macro   wait203
1196+  0000~                        wait194
1197+  0000~                        wait9
1198+  0000                         endm
1199+  0000             
1200+  0000                         macro   wait210
1201+  0000~                        wait2p16x 13
1202+  0000                         endm
1203+  0000             
1204+  0000                         macro   wait218
1205+  0000~                        wait210
1206+  0000~                        wait8
1207+  0000                         endm
1208+  0000             
1209+  0000                         macro   wait226
1210+  0000~                        wait2p16x 14
1211+  0000                         endm
1212+  0000             
1213+  0000                         macro   wait234
1214+  0000~                        wait226
1215+  0000~                        wait8
1216+  0000                         endm
1217+  0000             
1218+  0000                         macro   wait242
1219+  0000~                        wait2p16x 15
1220+  0000                         endm
1221+  0000             
1222+  0000                         macro   wait244
1223+  0000~                        wait226
1224+  0000~                        wait18
1225+  0000                         endm
1226+  0000             
1227+  0000                         macro   wait246
1228+  0000~                        wait242
1229+  0000~                        wait4
1230+  0000                         endm
1231+  0000             
1232+  0000                         macro   wait254
1233+  0000~                        wait242
1234+  0000~                        wait12
1235+  0000                         endm
1236+  0000             
1237+  0000                         macro   wait258
1238+  0000~                        wait2p16x 16
1239+  0000                         endm
1240+  0000             
1241+  0000                         macro   wait260
1242+  0000~                        wait242
1243+  0000~                        wait18
1244+  0000                         endm
1245+  0000             
1246+  0000                         macro   wait262
1247+  0000~                        wait258
1248+  0000~                        wait4
1249+  0000                         endm
1250+  0000             
1251+  0000                         macro   wait264
1252+  0000~                        wait242
1253+  0000~                        wait22
1254+  0000                         endm
1255+  0000             
1256+  0000                         macro   wait268
1257+  0000~                        wait258
1258+  0000~                        wait10
1259+  0000                         endm
1260+  0000             
1261+  0000                         macro   wait274
1262+  0000~                        wait2p16x 17
1263+  0000                         endm
1264+  0000             
1265+  0000                         macro   wait276
1266+  0000~                        wait258
1267+  0000~                        wait18
1268+  0000                         endm
1269+  0000             
1270+  0000                         macro   wait278
1271+  0000~                        wait274
1272+  0000~                        wait4
1273+  0000                         endm
1274+  0000             
1275+  0000                         macro   wait282
1276+  0000~                        wait274
1277+  0000~                        wait8
1278+  0000                         endm
1279+  0000             
1280+  0000                         macro   wait283
1281+  0000~                        wait274
1282+  0000~                        wait9
1283+  0000                         endm
1284+  0000             
1285+  0000                         macro   wait285
1286+  0000~                        wait274
1287+  0000~                        wait11
1288+  0000                         endm
1289+  0000             
1290+  0000                         macro   wait287
1291+  0000~                        wait274
1292+  0000~                        wait13
1293+  0000                         endm
1294+  0000             
1295+  0000                         macro   wait290
1296+  0000~                        wait2p16x 18
1297+  0000                         endm
1298+  0000             
1299+  0000                         macro   wait294
1300+  0000~                        wait290
1301+  0000~                        wait4
1302+  0000                         endm
1303+  0000             
1304+  0000                         macro   wait295
1305+  0000~                        wait274
1306+  0000~                        wait21
1307+  0000                         endm
1308+  0000             
1309+  0000                         macro   wait298
1310+  0000~                        wait290
1311+  0000~                        wait8
1312+  0000                         endm
1313+  0000             
1314+  0000                         macro   wait305
1315+  0000~                        wait290
1316+  0000~                        wait15
1317+  0000                         endm
1318+  0000             
1319+  0000                         macro   wait306
1320+  0000~                        wait2p16x 19
1321+  0000                         endm
1322+  0000             
1323+  0000                         macro   wait308
1324+  0000~                        wait290
1325+  0000~                        wait18
1326+  0000                         endm
1327+  0000             
1328+  0000                         macro   wait320
1329+  0000~                        wait306
1330+  0000~                        wait14
1331+  0000                         endm
1332+  0000             
1333+  0000                         macro   wait322
1334+  0000~                        wait2p16x 20
1335+  0000                         endm
1336+  0000             
1337+  0000                         macro   wait324
1338+  0000~                        wait306
1339+  0000~                        wait18
1340+  0000                         endm
1341+  0000             
1342+  0000                         macro   wait329
1343+  0000~                        wait322
1344+  0000~                        wait7
1345+  0000                         endm
1346+  0000             
1347+  0000                         macro   wait337
1348+  0000~                        wait322
1349+  0000~                        wait15
1350+  0000                         endm
1351+  0000             
1352+  0000                         macro   wait338
1353+  0000~                        wait2p16x 21
1354+  0000                         endm
1355+  0000             
1356+  0000                         macro   wait345
1357+  0000~                        wait338
1358+  0000~                        wait7
1359+  0000                         endm
1360+  0000             
1361+  0000                         macro   wait434
1362+  0000~                        wait2p16x 27
1363+  0000                         endm
1364+  0000             
1365+  0000                         macro   wait450
1366+  0000~                        wait2p16x 28
1367+  0000                         endm
1368+  0000             
1369+  0000                         macro   wait454
1370+  0000~                        wait450
1371+  0000~                        wait4
1372+  0000                         endm
1373+  0000             
1374+  0000                         macro   wait455
1375+  0000~                        wait434
1376+  0000~                        wait21
1377+  0000                         endm
1378+  0000             
1379+  0000                         macro   wait546
1380+  0000~                        wait2p16x 34
1381+  0000                         endm
1382+  0000             
1383+  0000                         macro   wait562
1384+  0000~                        wait2p16x 35
1385+  0000                         endm
1386+  0000             
1387+  0000                         macro   wait567
1388+  0000~                        wait546
1389+  0000~                        wait21
1390+  0000                         endm
1391+  0000             
1392+  0000                         macro   wait578
1393+  0000~                        wait2p16x 36
1394+  0000                         endm
1395+  0000             
1396+  0000                         macro   wait586
1397+  0000~                        wait578
1398+  0000~                        wait8
1399+  0000                         endm
1400+  0000             
1401+  0000                         macro   wait590
1402+  0000~                        wait578
1403+  0000~                        wait12
1404+  0000                         endm
1405+  0000             
1406+  0000                         macro   wait594
1407+  0000~                        wait2p16x 37
1408+  0000                         endm
1409+  0000             
1410+  0000                         macro   wait595
1411+  0000~                        wait578
1412+  0000~                        wait17
1413+  0000                         endm
1414+  0000             
1415+  0000                         macro   wait598
1416+  0000~                        wait594
1417+  0000~                        wait4
1418+  0000                         endm
1419+  0000             
1420+  0000                         macro   wait599
1421+  0000~                        wait578
1422+  0000~                        wait21
1423+  0000                         endm
1424+  0000             
1425+  0000                         macro   wait602
1426+  0000~                        wait594
1427+  0000~                        wait8
1428+  0000                         endm
1429+  0000             
1430+  0000                         macro   wait609
1431+  0000~                        wait594
1432+  0000~                        wait15
1433+  0000                         endm
1434+  0000             
1435+  0000                         macro   wait610
1436+  0000~                        wait2p16x 38
1437+  0000                         endm
1438+  0000             
1439+  0000                         macro   wait614
1440+  0000~                        wait610
1441+  0000~                        wait4
1442+  0000                         endm
1443+  0000             
1444+  0000                         macro   wait618
1445+  0000~                        wait610
1446+  0000~                        wait8
1447+  0000                         endm
1448+  0000             
1449+  0000                         macro   wait619
1450+  0000~                        wait610
1451+  0000~                        wait9
1452+  0000                         endm
1453+  0000             
1454+  0000                         macro   wait622
1455+  0000~                        wait610
1456+  0000~                        wait12
1457+  0000                         endm
1458+  0000             
1459+  0000                         macro   wait623
1460+  0000~                        wait610
1461+  0000~                        wait13
1462+  0000                         endm
1463+  0000             
1464+  0000                         macro   wait626
1465+  0000~                        wait2p16x 39
1466+  0000                         endm
1467+  0000             
1468+  0000                         macro   wait634
1469+  0000~                        wait626
1470+  0000~                        wait8
1471+  0000                         endm
1472+  0000             
1473+  0000                         macro   wait638
1474+  0000~                        wait626
1475+  0000~                        wait12
1476+  0000                         endm
0134   0000             
0135   0000             
0136   0000             ; handlePCMCommand
0137   0000             ; ----------------
0138   0000             ; ? ->  HL  -> ?
0139   0000             ; ? ->  BC  -> ?
0140   0000             ; ? ->  SP  -> ?
0141   0000             ;
0142   0000             ; handle PCM command for channel 'ch' (PCM id < 0x100)
0143   0000             ; = 157 cycles
0144   0000             
0145   0000                         macro handlePCMCommand ch
0146   0000~            
0147   0000~                        LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
0148   0000~                        LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
0149   0000~            
0150   0000~                        LD      A, C                    ; A = new prio              ' 4     |
0151   0000~                        CP      (HL)                    ; compare to old prio       ' 7     | 21 (51)
0152   0000~                        JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
0153   0000~            
0154   0000~                        wait96                          ; sync                      ' 96    |
0155   0000~                        JP      .end                    ;                           ' 10    | 106 (157)
0156   0000~            
0157   0000~            .play_new
0158   0000~                        LD      A, B                    ; A = SFX id                ' 4     |
0159   0000~                        OR      A                       ; not a stop PCM command ?  ' 4     | 18 (69)
0160   0000~                        JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
0161   0000~            
0162   0000~                        LD      C, 0                    ; reset prio for stop       ' 7     | +2
0163   0000~            
0164   0000~            .PCM_play                                   ;                           ' 69
0165   0000~                        LD      (HL), C                 ; set new prio              ' 7     | (76)
0166   0000~            
0167   0000~                        LD      H, (ID_TABLE>>10)       ;                           ' 7     |
0168   0000~                        LD      L, A                    ;                           ' 4     |
0169   0000~                        ADD     HL, HL                  ;                           ' 6     |
0170   0000~                        ADD     HL, HL                  ; HL point on new PCM addr  ' 6     | 29 (105)
0171   0000~                        LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
0172   0000~            
0173   0000~                        POP     HL                      ; copy params               ' 10    |
0174   0000~                        LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
0175   0000~                        POP     HL                      ;                           ' 10    | 52 (157)
0176   0000~                        LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
0177   0000~            
0178   0000~            .end
0179   0000                         endm
0180   0000             
0181   0000             
0182   0000             ; handlePCMCommandXGM
0183   0000             ; -------------------
0184   0000             ; XGM data ->  DE  -> XGM data
0185   0000             ; PCM prio ->  C   -> ?
0186   0000             ; ?        ->  HL  -> ?
0187   0000             ; ?        ->  SP  -> ?
0188   0000             ;
0189   0000             ; handle PCM command for channel 'ch' for XGM music (PCM id < 0x40)
0190   0000             ; = 142 cycles
0191   0000             
0192   0000                         macro handlePCMCommandXGM ch
0193   0000~            
0194   0000~                        LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    |
0195   0000~                        LD      A, C                    ; A = new prio              ' 4     |
0196   0000~                        CP      (HL)                    ; compare new and old prio  ' 7     | (31)
0197   0000~                        JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
0198   0000~            
0199   0000~                        INC     E                       ; next XGM command          ' 4     |
0200   0000~                        wait97                          ; sync                      ' 97    | 111 (142)
0201   0000~                        JP      .end                    ; done                      ' 10    |
0202   0000~            
0203   0000~            .play_new
0204   0000~                        LD      A, (DE)                 ; A = PCM id (max = $3F)    ' 7     |
0205   0000~                        INC     E                       ; next XGM command          ' 4     |
0206   0000~                        OR      A                       ; not a stop PCM command ?  ' 4     | 27 (58)
0207   0000~                        JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
0208   0000~            
0209   0000~                        LD      C, 0                    ; reset prio for stop       ' 7     | +2
0210   0000~            
0211   0000~            .PCM_play
0212   0000~                        LD      (HL), C                 ; set new prio              ' 7     | (65)
0213   0000~            
0214   0000~                        LD      H, (ID_TABLE>>8)        ;                           ' 7     |
0215   0000~                        ADD     A                       ;                           ' 4     |
0216   0000~                        ADD     A                       ;                           ' 4     | 25 (90)
0217   0000~                        LD      L, A                    ; HL point on new PCM addr  ' 4     |
0218   0000~                        LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
0219   0000~            
0220   0000~                        POP     HL                      ; copy params               ' 10    |
0221   0000~                        LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
0222   0000~                        POP     HL                      ;                           ' 10    | 52 (142)
0223   0000~                        LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
0224   0000~            
0225   0000~            .end                                        ;                           ' 142
0226   0000~            
0227   0000                         endm
0228   0000             
0229   0000             
0230   0000             ; prepareChannelAlt
0231   0000             ; -----------------
0232   0000             ; ? ->  HL  ->  point to the sample source (ROM)
0233   0000             ; ? ->  DE  ->  point to write buffer
0234   0000             ;
0235   0000             ; set bank and prepare registers to play PCM channel 'ch'
0236   0000             ; = 176 cycles
0237   0000             
0238   0000                         macro prepareChannelAlt ch
0239   0000~            
0240   0000~                        LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
0241   0000~            
0242   0000~                        LD      A, L                    ; A = bit 8-15          ' 4     |
0243   0000~                        RLA                             ; C flag = bit 15       ' 4     |
0244   0000~                        LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
0245   0000~                        RLA                             ; A = bit 15-22         ' 4     |
0246   0000~            
0247   0000~                        setBank_DE                      ; set bank              ' 105   | (137)
0248   0000~            
0249   0000~                        LD      H, L                    ;                       ' 4     |
0250   0000~                        SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
0251   0000~                        LD      L, 0                    ; HL = sample addr bank ' 7     |
0252   0000~            
0253   0000~                        LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
0254   0000~            
0255   0000                         endm
0256   0000             
0257   0000             ; prepareChannel
0258   0000             ; --------------
0259   0000             ; ? ->  SP  ->  point to the sample source (ROM)
0260   0000             ; ? ->  HL  ->  point to write buffer
0261   0000             ;
0262   0000             ; set bank and prepare registers to play PCM channel 'ch'
0263   0000             ; = 178 cycles
0264   0000             
0265   0000                         macro prepareChannel ch
0266   0000~            
0267   0000~                        LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
0268   0000~            
0269   0000~                        LD      A, L                    ; A = bit 8-15          ' 4     |
0270   0000~                        RLA                             ; C flag = bit 15       ' 4     |
0271   0000~                        LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
0272   0000~                        RLA                             ; A = bit 15-22         ' 4     |
0273   0000~            
0274   0000~                        setBank_DE                      ; set bank              ' 105   | (137)
0275   0000~            
0276   0000~                        LD      H, L                    ;                       ' 4     |
0277   0000~                        SET     7, H                    ; HL |= 0x8000          ' 8     | 25 (162)
0278   0000~                        LD      L, 0                    ; HL = sample addr bank ' 7     |
0279   0000~                        LD      SP, HL                  ; SP point on sample    ' 6     |
0280   0000~            
0281   0000~                        LD      HL, (WRITEBUF)          ; HL = write buffer     ' 16    | (178)
0282   0000~            
0283   0000                         endm
0284   0000             
0285   0000             
0286   0000             ; stopChannel
0287   0000             ; -----------
0288   0000             ; ? ->  HL  -> STATUS
0289   0000             ;
0290   0000             ; set null sample play for channel 'ch'
0291   0000             ; = 75 cycles
0292   0000             
0293   0000                         macro stopChannel ch
0294   0000~            
0295   0000~                        LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0296   0000~                        LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0297   0000~                        LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0298   0000~                        LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0299   0000~            
0300   0000~                        XOR     A                       ;                           ' 4     |
0301   0000~                        LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0302   0000~            
0303   0000                         endm
0304   0000             
0305   0000             
0306   0000             ; updateChannelData
0307   0000             ; -----------------
0308   0000             ; ? ->  HL  -> ?
0309   0000             ;
0310   0000             ; update sample address and sample lenght
0311   0000             ; check if sample is done and stop it if needed
0312   0000             ; = 153 cycles
0313   0000             
0314   0000                         macro updateChannelData ch
0315   0000~            
0316   0000~                        LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
0317   0000~                        INC     HL                      ;                       ' 6     | (38)
0318   0000~                        LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
0319   0000~            
0320   0000~                        LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
0321   0000~                        DEC     HL                      ;                       ' 6     | 22 (60)
0322   0000~            
0323   0000~                        LD      A, H                    ;                       ' 4     |
0324   0000~                        OR      L                       ;                       ' 4     | 18 (78)
0325   0000~                        JP      Z, .done                ; sample done ?         ' 10    |
0326   0000~            
0327   0000~                        LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    |
0328   0000~                        wait49                          ;                       ' 49    | 75 (153)
0329   0000~                        JP      .end                    ;                       ' 10    |
0330   0000~            
0331   0000~            .done
0332   0000~                        stopChannel ch                  ; stop channel          ' 75    | (153)
0333   0000~            
0334   0000~            .end
0335   0000~            
0336   0000                         endm
0337   0000             
0338   0000             
0339   0000             ; compareReadWrite
0340   0000             ; ----------------
0341   0000             ; read buffer  -> BC'
0342   0000             ; write buffer -> DE
0343   0000             ;                 ZF ->  Write == Read buffer
0344   0000             ;
0345   0000             ; compare read and write buffer
0346   0000             ; = 16 cycles
0347   0000             
0348   0000                         macro compareReadWrite
0349   0000~            
0350   0000~                        EXX                     ;                           ' 4     |
0351   0000~                        LD      A, B            ; A = read buffer high      ' 4     |
0352   0000~                        EXX                     ;                           ' 4     | 16
0353   0000~                        CP      D               ; compare write buffer high ' 4     |
0354   0000~            
0355   0000                         endm
0356   0000             
0357   0000             
0358   0000             ; readAndClear
0359   0000             ; ------------
0360   0000             ; point to sample source (ROM) ->  HL  ->  point to sample source (ROM)
0361   0000             ; point to write buffer        ->  DE  ->  point to write buffer
0362   0000             ; ?                            ->  PF  ->  0=done 1=not done
0363   0000             ;
0364   0000             ; read 1 sample from rom and write it in output buffer
0365   0000             ; = 19 cycles
0366   0000             
0367   0000                         macro readAndClear
0368   0000~            
0369   0000~                        LDI                     ;                           ' 16+3  | 19
0370   0000~            
0371   0000                         endm
0372   0000             
0373   0000             
0374   0000             ; readAndClear2
0375   0000             ; -------------
0376   0000             ; point to sample source (ROM) ->  HL  ->  point to sample source (ROM)
0377   0000             ; point to write buffer        ->  DE  ->  point to write buffer
0378   0000             ; ?                            ->  PF  ->  0=done 1=not done
0379   0000             ;
0380   0000             ; read 2 samples from rom and write them in write buffer
0381   0000             ; = 38 cycles
0382   0000             
0383   0000                         macro readAndClear2
0384   0000~            
0385   0000~                        LDI                     ;                           ' 16+3  |
0386   0000~                        LDI                     ;                           ' 16+3  | (38)
0387   0000~            
0388   0000                         endm
0389   0000             
0390   0000             
0391   0000             ; readAndMix2
0392   0000             ; -----------
0393   0000             ; point to sample source (ROM) ->  SP  ->  point to sample source (ROM)
0394   0000             ; point to write buffer        ->  HL  ->  point to write buffer
0395   0000             ; $80 ->  C
0396   0000             ;
0397   0000             ; read 2 samples and mix them in output buffer
0398   0000             ; = 80 (+22 when overflow)
0399   0000             
0400   0000                         macro readAndMix2
0401   0000~            
0402   0000~                        POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
0403   0000~            
0404   0000~                        LD      A, E            ; first sample              ' 4     |
0405   0000~                        ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
0406   0000~                        JP      PO, .ok         ; check overflow            ' 10    |
0407   0000~            
0408   0000~                        LD      A, C            ; fix overflow              ' 4     |
0409   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0410   0000~            
0411   0000~            .ok
0412   0000~                        LD      (HL), A         ; store it in write sample  ' 7     |
0413   0000~                        INC     L               ;                           ' 4     | 11 (48)
0414   0000~            
0415   0000~                        LD      A, D            ; second sample             ' 4     |
0416   0000~                        ADD     (HL)            ; mix                       ' 7     | 21 (69)
0417   0000~                        JP      PO, .ok2        ; check overflow            ' 10    |
0418   0000~            
0419   0000~                        LD      A, C            ; fix overflow              ' 4     |
0420   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0421   0000~            
0422   0000~            .ok2
0423   0000~                        LD      (HL), A         ; store it in write sample  ' 7     |
0424   0000~                        INC     L               ;                           ' 4     | 11 (80)
0425   0000~            
0426   0000                         endm                    ;                           ' 80 (+22)
0427   0000             
0428   0000             
0429   0000             ; readAndMix16WhilePlay3
0430   0000             ; ----------------------
0431   0000             ; point to sample source (ROM) ->  SP  ->  point to sample source (ROM)
0432   0000             ; point to write buffer        ->  HL  ->  point to write buffer
0433   0000             ; $80 ->  C
0434   0000             ;
0435   0000             ; read 16 samples and mix them in output buffer
0436   0000             ; = 2 samples + 240 cycles
0437   0000             
0438   0000                         macro readAndMix16WhilePlay3
0439   0000~            
0440   0000~                        sampleOutput            ;                           ' 36    | (36)
0441   0000~            
0442   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    |
0443   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    | 160 (196)
0444   0000~            
0445   0000~                        POP     DE              ; read 2 samples from ROM   ' 10+6  | (212)
0446   0000~            
0447   0000~                        LD      A, E            ; first sample              ' 4     |
0448   0000~                        ADD     (HL)            ; mix with write buffer     ' 7     | 21 (233)
0449   0000~                        JP      PO, .ok         ; check overflow            ' 10    |
0450   0000~            
0451   0000~                        LD      A, C            ; fix overflow              ' 4     |
0452   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0453   0000~            
0454   0000~            .ok
0455   0000~                        LD      (HL), A         ; store it in write sample  ' 7     |
0456   0000~                        INC     L               ;                           ' 4     | 11 (254-10)
0457   0000~            
0458   0000~                        sampleOutput            ; -10 --> too soon          ' 36    | (36-10)
0459   0000~            
0460   0000~                        LD      A, D            ; second sample             ' 4     |
0461   0000~                        ADD     (HL)            ; mix                       ' 7     | 21 (47)
0462   0000~                        JP      PO, .ok2        ; check overflow            ' 10    |
0463   0000~            
0464   0000~                        LD      A, C            ; fix overflow              ' 4     |
0465   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0466   0000~            
0467   0000~            .ok2
0468   0000~                        LD      (HL), A         ; store it in write sample  ' 7     |
0469   0000~                        INC     L               ;                           ' 4     | 11 (58)
0470   0000~            
0471   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    |
0472   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    | 160 (218)
0473   0000~            
0474   0000~                        POP     DE              ; read 2 samples from ROM   ' 10+6  | (234)
0475   0000~            
0476   0000~                        LD      A, E            ; first sample              ' 4     |
0477   0000~                        ADD     (HL)            ; mix with write buffer     ' 7     | 21 (254+1)
0478   0000~                        JP      PO, .ok3        ; check overflow            ' 10    |
0479   0000~            
0480   0000~                        LD      A, C            ; fix overflow              ' 4     |
0481   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0482   0000~            
0483   0000~            .ok3
0484   0000~                        LD      (HL), A         ; store it in write sample  ' 7     | (254+8)
0485   0000~            
0486   0000~                        sampleOutput            ; +8 --> too late           ' 36    | (36+8)
0487   0000~            
0488   0000~                        INC     L               ;                           ' 4     | (48)
0489   0000~            
0490   0000~                        LD      A, D            ; second sample             ' 4     |
0491   0000~                        ADD     (HL)            ; mix                       ' 7     | 21 (69)
0492   0000~                        JP      PO, .ok4        ; check overflow            ' 10    |
0493   0000~            
0494   0000~                        LD      A, C            ; fix overflow              ' 4     |
0495   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0496   0000~            
0497   0000~            .ok4
0498   0000~                        LD      (HL), A         ; store it in write sample  ' 7     |
0499   0000~                        INC     L               ;                           ' 4     | 11 (80)
0500   0000~            
0501   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    |
0502   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    | 160 (240)
0503   0000~            
0504   0000                         endm                    ;                           ' 240
0505   0000             
0506   0000             
0507   0000             ; readMixAndUnsign
0508   0000             ; ----------------
0509   0000             ; point to sample source (ROM) ->  HL  ->  point to sample source (ROM)
0510   0000             ; point to write buffer        ->  DE  ->  point to write buffer
0511   0000             ; $80 ->  C
0512   0000             ;
0513   0000             ; read 1 sample and mix it with output buffer, then unsign it
0514   0000             ; = 46 (+11 when overflow)
0515   0000             
0516   0000                         macro readMixAndUnsign
0517   0000~            
0518   0000~                        LD      A, (DE)         ; read value in write buf   ' 7     |
0519   0000~                        ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
0520   0000~                        JP      PO, .ok         ; check overflow            ' 10    |
0521   0000~            
0522   0000~                        LD      A, C            ; fix overflow              ' 4     |
0523   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0524   0000~            
0525   0000~            .ok
0526   0000~                        ADD     C               ; unsign                    ' 4     |
0527   0000~                        LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
0528   0000~                        INC     E               ;                           ' 4     |
0529   0000~                        INC     L               ; next                      ' 4     |
0530   0000~            
0531   0000                         endm                    ;                           ' 46 (+11)
0532   0000             
0533   0000             
0534   0000             ; sampleOutput
0535   0000             ; ------------
0536   0000             ; YMPORT0     -> HL'
0537   0000             ; YMPORT1     -> DE'
0538   0000             ; read buffer -> BC' ->  read buffer
0539   0000             ;
0540   0000             ; output a sample to the DAC
0541   0000             ; = 36 cycles
0542   0000             
0543   0000                         macro sampleOutput
0544   0000~            
0545   0000~                        EXX                     ;                           ' 4     | 4
0546   0000~            
0547   0000~                        LD      A, (BC)         ; read sample from buffer   ' 7     |
0548   0000~                        INC     BC              ; increment read address    ' 6     |
0549   0000~                        RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0550   0000~                        LD      (DE), A         ; play sample               ' 7     |
0551   0000~            
0552   0000~                        EXX                     ;                           ' 4     | (36)
0553   0000~            
0554   0000                         endm
0555   0000             
0556   0000             
0557   0000             ; sampleOutputSafe
0558   0000             ; ----------------
0559   0000             ; YMPORT0     -> HL'
0560   0000             ; YMPORT1     -> DE'
0561   0000             ; read buffer -> BC' ->  read buffer
0562   0000             ;
0563   0000             ; output a sample to the DAC
0564   0000             ; = 46 cycles
0565   0000             
0566   0000                         macro sampleOutputSafe
0567   0000~            
0568   0000~                        EXX                     ;                           ' 4     | 4
0569   0000~            
0570   0000~                        LD      (HL), $2A       ; prepare DAC write         ' 10    |
0571   0000~                        LD      A, (BC)         ; read sample from buffer   ' 7     |
0572   0000~                        INC     BC              ; increment read address    ' 6     | 38 (42)
0573   0000~                        RES     2, B            ; read_address &= 0x03FF    ' 8     |
0574   0000~                        LD      (DE), A         ; play sample               ' 7     |
0575   0000~            
0576   0000~                        EXX                     ;                           ' 4     | (46)
0577   0000~            
0578   0000                         endm
0579   0000             
0580   0000             
0581   0000             ; waitYMReadyFast
0582   0000             ; ---------------
0583   0000             ; YMPORT0   -> HL
0584   0000             ;
0585   0000             ; wait until YM ready
0586   0000             ; = 22 cycles minimum (22 * X)
0587   0000             
0588   0000                         macro waitYMReadyFast
0589   0000~            
0590   0000~            .wait
0591   0000~                        BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
0592   0000~                        JP      NZ, .wait       ; wait while busy           ' 10    |
0593   0000~            
0594   0000                         endm
0595   0000             
0596   0000             
0597   0000             ; waitYMReady
0598   0000             ; -----------
0599   0000             ; YMPORT0   -> HL'
0600   0000             ;
0601   0000             ; wait until YM ready
0602   0000             ; = 30 cycles minimum (8 + (22 * X))
0603   0000             
0604   0000                         macro waitYMReady
0605   0000~            
0606   0000~                        EXX                     ;                           ' 4     | (4)
0607   0000~            
0608   0000~            .wait
0609   0000~                        BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
0610   0000~                        JP      NZ, .wait       ; wait while busy           ' 10    |
0611   0000~            
0612   0000~                        EXX                     ;                           ' 4     | (30)
0613   0000~            
0614   0000                         endm
0615   0000             
0616   0000             
0617   0000             ; ###########################       init       ##############################
0618   0000             
0619   0000                         ORG     $0000
0620   0000             
0621   0000             init
0622   0000 F3                      DI                      ; disable ints
0623   0001 31 00 16                LD      SP, STACK       ; setup stack
0624   0004 ED 56                   IM      $01             ; set int mode 1
0625   0006 AF                      XOR     A
0626   0007 32 02 01                LD      (STATUS), A     ; driver not ready
0627   000A 32 00 01                LD      (COMMAND), A    ; command cleared
0628   000D C3 00 02                JP      start           ; jump to start
0629   0010             
0630   0010             
0631   0010             ; ###########################       main       ##############################
0632   0010             
0633   0010 00                      BLOCK   $0200-$
0634   0200             
0635   0200             start
0636   0200             
0637   0200 21 04 01                LD      HL, PARAMS
0638   0203 3E 00                   LD      A, $00
0639   0205 06 40                   LD      B, $40
0640   0207             
0641   0207             cp_loop
0642   0207 77                      LD      (HL), A         ; clear parameters
0643   0208 23                      INC     HL
0644   0209 10 FC                   DJNZ    cp_loop
0645   020B             
0646   020B 21 64 01                LD      HL, YM_RR_OFF
0647   020E 3E FF                   LD      A, $FF
0648   0210 06 18                   LD      B, (6 * 4)
0649   0212             
0650   0212             off_loop
0651   0212 77                      LD      (HL), A         ; clear off settings
0652   0213 23                      INC     HL
0653   0214 10 FC                   DJNZ    off_loop
0654   0216             
0655   0216 21 7C 01                LD      HL, PSG_ENV_OFF
0656   0219             
0657   0219 36 9F                   LD      (HL), $9F       ; PSG channel 0 off
0658   021B 23                      INC     HL
0659   021C 36 BF                   LD      (HL), $BF       ; PSG channel 1 off
0660   021E 23                      INC     HL
0661   021F 36 DF                   LD      (HL), $DF       ; PSG channel 2 off
0662   0221 23                      INC     HL
0663   0222 36 FF                   LD      (HL), $FF       ; PSG channel 3 off
0664   0224             
0665   0224 21 64 01                LD      HL, YM_RR_OFF
0666   0227 11 44 01                LD      DE, YM_RR_SAV
0667   022A 01 1C 00                LD      BC, (6 * 4) + 4
0668   022D ED B0                   LDIR                    ; copy off settings to sav settings
0669   022F             
0670   022F 21 00 18                LD      HL, PCM_BUFFER
0671   0232 3E 80                   LD      A, $80
0672   0234 06 00                   LD      B, $00          ; for 256 * 4 bytes to clear
0673   0236             
0674   0236             cb_loop
0675   0236 77                      LD      (HL), A         ; initialise buffers to silent
0676   0237 23                      INC     HL
0677   0238 77                      LD      (HL), A
0678   0239 23                      INC     HL
0679   023A 77                      LD      (HL), A
0680   023B 23                      INC     HL
0681   023C 77                      LD      (HL), A
0682   023D 23                      INC     HL
0683   023E 10 F6                   DJNZ    cb_loop
0684   0240             
0685   0240 3E 00                   LD      A, $00
0686   0242             
0687   0242 21 60 01                LD      HL, YM_2B_SAV
0688   0245 77                      LD      (HL), A         ; DAC disabled by default
0689   0246 21 61 01                LD      HL, YM_2B_CNT
0690   0249 77                      LD      (HL), A         ; DAC disabled by default
0691   024A             
0692   024A 21 12 01                LD      HL, MODIFYING_F
0693   024D 77                      LD      (HL), A         ; clear modifying variable flag
0694   024E 21 13 01                LD      HL, PENDING_FRM
0695   0251 77                      LD      (HL), A         ; clear frame to process counter
0696   0252             
0697   0252 CD C0 14                CALL    initDAC         ; prepare DAC for output
0698   0255             
0699   0255 21 00 18                LD      HL, PCM_BUFFER0 ; initialise write and read buffer
0700   0258 22 38 01                LD      (WRITEBUF), HL
0701   025B 21 00 19                LD      HL, PCM_BUFFER1
0702   025E 22 3A 01                LD      (READBUF), HL
0703   0261             
0704   0261 44 4D                   LD      BC, HL          ; BC' point to read buffer
0705   0263 21 00 40                LD      HL, YMPORT0     ; HL' point to YMPORT0
0706   0266 11 01 40                LD      DE, YMPORT1     ; DE' point to YMPORT1
0707   0269 D9                      EXX
0708   026A             
0709   026A                         stopChannel 0           ; stop all channels
0709   026A 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0709   026D 22 16 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0709   0270 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0709   0273 22 18 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0709   0276 AF          >            XOR     A                       ;                           ' 4     |
0709   0277 32 14 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0710   027A                         stopChannel 1
0710   027A 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0710   027D 22 1E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0710   0280 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0710   0283 22 20 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0710   0286 AF          >            XOR     A                       ;                           ' 4     |
0710   0287 32 1C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0711   028A                         stopChannel 2
0711   028A 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0711   028D 22 26 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0711   0290 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0711   0293 22 28 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0711   0296 AF          >            XOR     A                       ;                           ' 4     |
0711   0297 32 24 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0712   029A                         stopChannel 3
0712   029A 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0712   029D 22 2E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0712   02A0 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0712   02A3 22 30 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0712   02A6 AF          >            XOR     A                       ;                           ' 4     |
0712   02A7 32 2C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0713   02AA             
0714   02AA 3E 80                   LD      A, STATREADY
0715   02AC 32 02 01                LD      (STATUS), A     ; driver ready
0716   02AF             
0717   02AF             main_loop
0718   02AF             
0719   02AF             ;    LD  A, (VCOUNTER)
0720   02AF             ;    LD  (DEBUG_1), A
0721   02AF             
0722   02AF             
0723   02AF             ; prepare XGM buffer
0724   02AF             ; ------------------
0725   02AF             
0726   02AF             ; $00
0727   02AF                         sampleOutput                ;                       ' 36    | 36
0727   02AF D9          >            EXX                     ;                           ' 4     | 4
0727   02B0 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0727   02B1 03          >            INC     BC              ; increment read address    ' 6     |
0727   02B2 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0727   02B4 12          >            LD      (DE), A         ; play sample               ' 7     |
0727   02B5 D9          >            EXX                     ;                           ' 4     | (36)
0728   02B6             
0729   02B6 11 00 17                LD      DE, XGM_BUFFER      ; DE point to XGM buf   ' 10    |
0730   02B9 3A 02 01                LD      A, (STATUS)         ; A = STATUS            ' 13    |
0731   02BC CB 77                   BIT     XGM_PLAY_SFT, A     ; is XGM playing ?      ' 8     | 41 (77)
0732   02BE C2 CA 02                JP      NZ, has_xgm         ; go to prepare buf     ' 10    |
0733   02C1             
0734   02C1                         wait146                     ; sync                  ' 146   |
0734   02C1 3E 09       >            LD      A, w            ; 7-2
0734   02C3 3D          >            DEC     A               ; 4
0734   02C4 20 FD       >            JR      NZ, .loop       ; 12
0735   02C6 AF                      XOR     A                   ; A = 0                 ' 4     | 160 (237)
0736   02C7 C3 D6 04                JP      end_prep_xgm        ; preparation done      ' 10    |
0737   02CA             
0738   02CA             has_xgm
0739   02CA 2A 34 01                LD      HL, (XGM_ADDR)      ; XGM addr (b0-b15)     ' 16    |
0740   02CD 7C                      LD      A, H                ; A = XGM addr (b8-b15) ' 4     |
0741   02CE 17                      RLA                         ; CF = XGM addr b15     ' 4     | 146 (223)
0742   02CF 3A 36 01                LD      A, (XGM_ADDR+2)     ; A = sample addr (H)   ' 13    |
0743   02D2 17                      RLA                         ; sample addr (b22-b15) ' 4     |
0744   02D3                         setBank_BC                  ; setBank               ' 105   |
0744   02D3 01 00 60    >            LD  BC, BANKREG         ; BC = BANKREG              ' 10
0744   02D6 02          >            LD  (BC), A             ; #1 (bit 15)               ' 7
0744   02D7 0F          >            RRCA                    ;                           ' 4
0744   02D8 02          >            LD  (BC), A             ; #2 (bit 16)               ' 7
0744   02D9 0F          >            RRCA                    ;                           ' 4
0744   02DA 02          >            LD  (BC), A             ; #3 (bit 17)               ' 7
0744   02DB 0F          >            RRCA                    ;                           ' 4
0744   02DC 02          >            LD  (BC), A             ; #4 (bit 18)               ' 7
0744   02DD 0F          >            RRCA                    ;                           ' 4
0744   02DE 02          >            LD  (BC), A             ; #5 (bit 19)               ' 7
0744   02DF 0F          >            RRCA                    ;                           ' 4
0744   02E0 02          >            LD  (BC), A             ; #6 (bit 20)               ' 7
0744   02E1 0F          >            RRCA                    ;                           ' 4
0744   02E2 02          >            LD  (BC), A             ; #7 (bit 21)               ' 7
0744   02E3 AF          >            XOR A                   ;                           ' 4
0744   02E4 02          >            LD  (BC), A             ; #8 (bit 22 = 0)           ' 7
0744   02E5 02          >            LD  (BC), A             ; #9 (bit 23 = 0)           ' 7
0745   02E6             
0746   02E6 7C                      LD      A, H                ; save H                ' 4     |
0747   02E7 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0748   02E9 06 00                   LD      B, $0               ; B = 0                 ' 7     | 30 (254-1)
0749   02EB 4E                      LD      C, (HL)             ; BC = bytes to process ' 7     |
0750   02EC 67                      LD      H, A                ; restore H             ' 4     |
0751   02ED             
0752   02ED             ; $00+X
0753   02ED                         sampleOutput                ;                       ' 36    | (36-1)
0753   02ED D9          >            EXX                     ;                           ' 4     | 4
0753   02EE 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0753   02EF 03          >            INC     BC              ; increment read address    ' 6     |
0753   02F0 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0753   02F2 12          >            LD      (DE), A         ; play sample               ' 7     |
0753   02F3 D9          >            EXX                     ;                           ' 4     | (36)
0754   02F4             
0755   02F4 7D                      LD      A, L                ; A = addr low          ' 4     |
0756   02F5 81                      ADD     C                   ; compute new addr (L)  ' 4     |
0757   02F6 32 34 01                LD      (XGM_ADDR+0), A     ; store new addr (L)    ' 13    | 28 (63)
0758   02F9 38 1A                   JR      C, .split           ; carry --> separate    ' 7     |
0759   02FB             
0760   02FB             .no_split
0761   02FB                         wait104                     ; sync                  ' 104   | (167)
0761   02FB 3E 05       >            LD      A, w            ; 7-2
0761   02FD 3D          >            DEC     A               ; 4
0761   02FE 20 FD       >            JR      NZ, .loop       ; 12
0761   0300 ED 4F       >            LD      R, A
0761   0302 ED 4F       >            LD      R, A
0761   0304 00          >            NOP
0762   0305             
0763   0305 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0764   0307 23                      INC     HL                  ; HL = start frame data ' 6     |
0765   0308 AF                      XOR     A                   ; no second part        ' 4     |
0766   0309 FD 67                   LD      IYH, A              ; IYH = sec part size   ' 8     | 44 (211)
0767   030B 00                      NOP                         ;                       ' 4     |
0768   030C 0D                      DEC     C                   ; first part size = 0 ? ' 4     |
0769   030D CA F4 03                JP      Z, .second_part     ; go to second part     ' 10    |
0770   0310             
0771   0310                         wait12                      ; sync                  ' 12    | 22 (233)
0771   0310 18 00       >            JR      .go
0772   0312 C3 53 03                JP      .first_part_pre     ; start filling         ' 10    |
0773   0315             
0774   0315             .split
0775   0315 FD 67                   LD      IYH, A              ; IYH = sec part size   ' 8     |
0776   0317 91                      SUB     C                   ;                       ' 4     |
0777   0318 ED 44                   NEG                         ;                       ' 8     | 34 (97)
0778   031A 3D                      DEC     A                   ; A = (C - IYH) - 1     ' 4     |
0779   031B C2 39 03                JP      NZ, .first_part_ok  ; not zero --> do it    ' 10    |
0780   031E             
0781   031E 7C                      LD      A, H                ; A = addr med (M)      ' 4     |
0782   031F C6 01                   ADD     $1                  ; inc with CF set       ' 7     |
0783   0321 32 35 01                LD      (XGM_ADDR+1), A     ; store new addr (M)    ' 13    |
0784   0324 3A 36 01                LD      A, (XGM_ADDR+2)     ; load sample addr (H)  ' 13    |
0785   0327 88                      ADC     B                   ; inc                   ' 4     | 68 (164)
0786   0328 32 36 01                LD      (XGM_ADDR+2), A     ; store sample addr (H) ' 13    |
0787   032B CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0788   032D 23                      INC     HL                  ; HL = start frame data ' 6     |
0789   032E             
0790   032E                         wait36                      ; sync                  ' 36    |
0790   032E ED 4F       >            LD      R, A
0790   0330 ED 4F       >            LD      R, A
0790   0332 ED 4F       >            LD      R, A
0790   0334 ED 4F       >            LD      R, A
0791   0336 C3 F4 03                JP      .second_part        ; go second part        ' 10    | 65 (211)
0792   0339             
0793   0339             .first_part_ok
0794   0339 4F                      LD      C, A                ; C = first part size   ' 4     |
0795   033A 7C                      LD      A, H                ; A = addr med (M)      ' 4     |
0796   033B C6 01                   ADD     $1                  ; inc with CF set       ' 7     |
0797   033D 32 35 01                LD      (XGM_ADDR+1), A     ; store new addr (M)    ' 13    |
0798   0340 3A 36 01                LD      A, (XGM_ADDR+2)     ; load sample addr (H)  ' 13    | 72 (169)
0799   0343 88                      ADC     B                   ; inc                   ' 4     |
0800   0344 32 36 01                LD      (XGM_ADDR+2), A     ; store sample addr (H) ' 13    |
0801   0347 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0802   0349 23                      INC     HL                  ; HL = start frame data ' 6     |
0803   034A             
0804   034A                         wait64                      ; sync                  ' 64    | (233)
0804   034A 3E 03       >            LD      A, w            ; 7-2
0804   034C 3D          >            DEC     A               ; 4
0804   034D 20 FD       >            JR      NZ, .loop       ; 12
0804   034F F6 00       >            OR      $0
0804   0351 F6 00       >            OR      $0
0805   0353             
0806   0353             .first_part_pre                         ;                       ' 233
0807   0353 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     |
0808   0355 B9                      CP      C                   ; C < block size        ' 4     | 21 (254)
0809   0356 D2 7F 03                JP      NC, .first_part_end ; go to last bytes      ' 10    |
0810   0359             
0811   0359             .first_part
0812   0359             ; $00+X
0813   0359                         sampleOutput                ;                       ' 36    | 36
0813   0359 D9          >            EXX                     ;                           ' 4     | 4
0813   035A 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0813   035B 03          >            INC     BC              ; increment read address    ' 6     |
0813   035C CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0813   035E 12          >            LD      (DE), A         ; play sample               ' 7     |
0813   035F D9          >            EXX                     ;                           ' 4     | (36)
0814   0360             
0815   0360 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0816   0362 ED A0                   LDI                         ; 11 bytes at once      ' 16+1  |
0817   0364 ED A0                   LDI                         ;                       ' 16+1  |
0818   0366 ED A0                   LDI                         ;                       ' 16+1  |
0819   0368 ED A0                   LDI                         ;                       ' 16+1  |
0820   036A ED A0                   LDI                         ;                       ' 16+1  | 187 (223)
0821   036C ED A0                   LDI                         ;                       ' 16+1  |
0822   036E ED A0                   LDI                         ;                       ' 16+1  |
0823   0370 ED A0                   LDI                         ;                       ' 16+1  |
0824   0372 ED A0                   LDI                         ;                       ' 16+1  |
0825   0374 ED A0                   LDI                         ;                       ' 16+1  |
0826   0376             
0827   0376                         wait10                      ; sync                  ' 10    |
0827   0376 C3 79 03    >            JP      .go
0828   0379 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     |
0829   037B B9                      CP      C                   ; remaining > 11        ' 4     | 31 (254)
0830   037C DA 59 03                JP      C, .first_part      ; continu block fill    ' 10    |
0831   037F             
0832   037F             .first_part_end
0833   037F             ; $00+X
0834   037F                         sampleOutput                ;                       ' 36    | 36
0834   037F D9          >            EXX                     ;                           ' 4     | 4
0834   0380 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0834   0381 03          >            INC     BC              ; increment read address    ' 6     |
0834   0382 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0834   0384 12          >            LD      (DE), A         ; play sample               ' 7     |
0834   0385 D9          >            EXX                     ;                           ' 4     | (36)
0835   0386             
0836   0386 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0837   0388 E2 D3 03                JP      PO, .fst_part_d0    ;                       ' 10    | 27 (63)
0838   038B ED A0                   LDI                         ;                       ' 16+1  |
0839   038D E2 D9 03                JP      PO, .fst_part_d1    ;                       ' 10    | 27 (90)
0840   0390 ED A0                   LDI                         ;                       ' 16+1  |
0841   0392 E2 DF 03                JP      PO, .fst_part_d2    ;                       ' 10    | 27 (117)
0842   0395 ED A0                   LDI                         ;                       ' 16+1  |
0843   0397 E2 E5 03                JP      PO, .fst_part_d3    ;                       ' 10    | 27 (144)
0844   039A ED A0                   LDI                         ;                       ' 16+1  |
0845   039C E2 EB 03                JP      PO, .fst_part_d4    ;                       ' 10    | 27 (171)
0846   039F ED A0                   LDI                         ;                       ' 16+1  |
0847   03A1 E2 F1 03                JP      PO, .fst_part_d5    ;                       ' 10    | 27 (198)
0848   03A4             
0849   03A4                         wait56                      ; sync                  ' 56    | (254)
0849   03A4 3E 02       >            LD      A, w            ; 7-2
0849   03A6 3D          >            DEC     A               ; 4
0849   03A7 20 FD       >            JR      NZ, .loop       ; 12
0849   03A9 ED 4F       >            LD      R, A
0849   03AB ED 4F       >            LD      R, A
0849   03AD 00          >            NOP
0850   03AE             
0851   03AE             ; $00+X
0852   03AE                         sampleOutput                ;                       ' 36    | 36
0852   03AE D9          >            EXX                     ;                           ' 4     | 4
0852   03AF 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0852   03B0 03          >            INC     BC              ; increment read address    ' 6     |
0852   03B1 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0852   03B3 12          >            LD      (DE), A         ; play sample               ' 7     |
0852   03B4 D9          >            EXX                     ;                           ' 4     | (36)
0853   03B5             
0854   03B5 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0855   03B7 E2 D3 03                JP      PO, .fst_part_d0    ;                       ' 10    | 27 (63)
0856   03BA ED A0                   LDI                         ;                       ' 16+1  |
0857   03BC E2 D9 03                JP      PO, .fst_part_d1    ;                       ' 10    | 27 (90)
0858   03BF ED A0                   LDI                         ;                       ' 16+1  |
0859   03C1 E2 DF 03                JP      PO, .fst_part_d2    ;                       ' 10    | 27 (117)
0860   03C4 ED A0                   LDI                         ;                       ' 16+1  |
0861   03C6 E2 E5 03                JP      PO, .fst_part_d3    ;                       ' 10    | 27 (144)
0862   03C9 ED A0                   LDI                         ;                       ' 16+1  |
0863   03CB E2 EB 03                JP      PO, .fst_part_d4    ;                       ' 10    | 27 (171)
0864   03CE ED A0                   LDI                         ;                       ' 16+1  |
0865   03D0 C3 F1 03                JP      .fst_part_d5        ;                       ' 10    | 27 (198)
0866   03D3             
0867   03D3             .fst_part_d0
0868   03D3                         wait27                      ; sync                  ' 27    | (90)
0868   03D3 ED 4F       >            LD      R, A
0868   03D5 ED 4F       >            LD      R, A
0868   03D7 ED 4F       >            LD      R, A
0869   03D9             .fst_part_d1
0870   03D9                         wait27                      ; sync                  ' 27    | (117)
0870   03D9 ED 4F       >            LD      R, A
0870   03DB ED 4F       >            LD      R, A
0870   03DD ED 4F       >            LD      R, A
0871   03DF             .fst_part_d2
0872   03DF                         wait27                      ; sync                  ' 27    | (144)
0872   03DF ED 4F       >            LD      R, A
0872   03E1 ED 4F       >            LD      R, A
0872   03E3 ED 4F       >            LD      R, A
0873   03E5             .fst_part_d3
0874   03E5                         wait27                      ; sync                  ' 27    | (171)
0874   03E5 ED 4F       >            LD      R, A
0874   03E7 ED 4F       >            LD      R, A
0874   03E9 ED 4F       >            LD      R, A
0875   03EB             .fst_part_d4
0876   03EB                         wait27                      ; sync                  ' 27    | (198)
0876   03EB ED 4F       >            LD      R, A
0876   03ED ED 4F       >            LD      R, A
0876   03EF ED 4F       >            LD      R, A
0877   03F1             .fst_part_d5
0878   03F1                         wait13                      ; sync                  ' 13    | (211)
0878   03F1 ED 4F       >            LD      R, A
0878   03F3 00          >            NOP
0879   03F4             
0880   03F4             .second_part                            ;                       ' 211
0881   03F4 00                      NOP                         ; sync                  ' 4
0882   03F5 FD 7C                   LD      A, IYH              ; A = second part size  ' 8     |
0883   03F7 B7                      OR      A                   ;                       ' 4     | 26 (237)
0884   03F8 CA D6 04                JP      Z, end_prep_xgm     ; done                  ' 10    |
0885   03FB             
0886   03FB                         wait17                      ; sync                  ' 17    | 254
0886   03FB C3 FE 03    >            JP      .go
0886   03FE F6 00       >            OR      $0
0887   0400             
0888   0400             ; $00+X
0889   0400                         sampleOutput                ;                       ' 36    | 36
0889   0400 D9          >            EXX                     ;                           ' 4     | 4
0889   0401 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0889   0402 03          >            INC     BC              ; increment read address    ' 6     |
0889   0403 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0889   0405 12          >            LD      (DE), A         ; play sample               ' 7     |
0889   0406 D9          >            EXX                     ;                           ' 4     | (36)
0890   0407             
0891   0407 2A 34 01                LD      HL, (XGM_ADDR)      ; XGM addr (b0-b15)     ' 16    |
0892   040A 7C                      LD      A, H                ; A = XGM addr (b8-b15) ' 4     |
0893   040B 17                      RLA                         ; CF = XGM addr b15     ' 4     | 146 (182)
0894   040C 3A 36 01                LD      A, (XGM_ADDR+2)     ; A = sample addr (H)   ' 13    |
0895   040F 17                      RLA                         ; sample addr (b22-b15) ' 4     |
0896   0410                         setBank_BC                  ; setBank               ' 105   |
0896   0410 01 00 60    >            LD  BC, BANKREG         ; BC = BANKREG              ' 10
0896   0413 02          >            LD  (BC), A             ; #1 (bit 15)               ' 7
0896   0414 0F          >            RRCA                    ;                           ' 4
0896   0415 02          >            LD  (BC), A             ; #2 (bit 16)               ' 7
0896   0416 0F          >            RRCA                    ;                           ' 4
0896   0417 02          >            LD  (BC), A             ; #3 (bit 17)               ' 7
0896   0418 0F          >            RRCA                    ;                           ' 4
0896   0419 02          >            LD  (BC), A             ; #4 (bit 18)               ' 7
0896   041A 0F          >            RRCA                    ;                           ' 4
0896   041B 02          >            LD  (BC), A             ; #5 (bit 19)               ' 7
0896   041C 0F          >            RRCA                    ;                           ' 4
0896   041D 02          >            LD  (BC), A             ; #6 (bit 20)               ' 7
0896   041E 0F          >            RRCA                    ;                           ' 4
0896   041F 02          >            LD  (BC), A             ; #7 (bit 21)               ' 7
0896   0420 AF          >            XOR A                   ;                           ' 4
0896   0421 02          >            LD  (BC), A             ; #8 (bit 22 = 0)           ' 7
0896   0422 02          >            LD  (BC), A             ; #9 (bit 23 = 0)           ' 7
0897   0423             
0898   0423 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     | 15 (197)
0899   0425 2E 00                   LD      L, 0                ;                       ' 7     |
0900   0427             
0901   0427                         wait21                      ; sync                  ' 21    | (218)
0901   0427 18 00       >            JR      .go
0901   0429 ED 4F       >            LD      R, A
0902   042B             
0903   042B 06 00                   LD      B, 0                ; B = 0                 ' 7     |
0904   042D FD 4C                   LD      C, IYH              ; BC = second part size ' 8     |
0905   042F 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     | 36 (254)
0906   0431 B9                      CP      C                   ; C < block size        ' 4     |
0907   0432 D2 5B 04                JP      NC, .sec_part_end   ; go to last bytes      ' 10    |
0908   0435             
0909   0435             ; $00+X
0910   0435             .sec_part_loop
0911   0435                         sampleOutput                ;                       ' 36    | 36
0911   0435 D9          >            EXX                     ;                           ' 4     | 4
0911   0436 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0911   0437 03          >            INC     BC              ; increment read address    ' 6     |
0911   0438 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0911   043A 12          >            LD      (DE), A         ; play sample               ' 7     |
0911   043B D9          >            EXX                     ;                           ' 4     | (36)
0912   043C             
0913   043C ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0914   043E ED A0                   LDI                         ; 11 bytes at once      ' 16+1  |
0915   0440 ED A0                   LDI                         ;                       ' 16+1  |
0916   0442 ED A0                   LDI                         ;                       ' 16+1  |
0917   0444 ED A0                   LDI                         ;                       ' 16+1  |
0918   0446 ED A0                   LDI                         ;                       ' 16+1  | 187 (223)
0919   0448 ED A0                   LDI                         ;                       ' 16+1  |
0920   044A ED A0                   LDI                         ;                       ' 16+1  |
0921   044C ED A0                   LDI                         ;                       ' 16+1  |
0922   044E ED A0                   LDI                         ;                       ' 16+1  |
0923   0450 ED A0                   LDI                         ;                       ' 16+1  |
0924   0452             
0925   0452                         wait10                      ; sync                  ' 10    |
0925   0452 C3 55 04    >            JP      .go
0926   0455 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     |
0927   0457 B9                      CP      C                   ; remaining > 11        ' 4     | 31 (254)
0928   0458 DA 35 04                JP      C, .sec_part_loop   ; continu block fill    ' 10    |
0929   045B             
0930   045B             .sec_part_end
0931   045B             ; $00+X
0932   045B                         sampleOutput                ;                       ' 36    | 36
0932   045B D9          >            EXX                     ;                           ' 4     | 4
0932   045C 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0932   045D 03          >            INC     BC              ; increment read address    ' 6     |
0932   045E CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0932   0460 12          >            LD      (DE), A         ; play sample               ' 7     |
0932   0461 D9          >            EXX                     ;                           ' 4     | (36)
0933   0462             
0934   0462 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0935   0464 E2 AF 04                JP      PO, .sec_part_d0    ;                       ' 10    | 27 (63)
0936   0467 ED A0                   LDI                         ;                       ' 16+1  |
0937   0469 E2 B5 04                JP      PO, .sec_part_d1    ;                       ' 10    | 27 (90)
0938   046C ED A0                   LDI                         ;                       ' 16+1  |
0939   046E E2 BB 04                JP      PO, .sec_part_d2    ;                       ' 10    | 27 (117)
0940   0471 ED A0                   LDI                         ;                       ' 16+1  |
0941   0473 E2 C1 04                JP      PO, .sec_part_d3    ;                       ' 10    | 27 (144)
0942   0476 ED A0                   LDI                         ;                       ' 16+1  |
0943   0478 E2 C7 04                JP      PO, .sec_part_d4    ;                       ' 10    | 27 (171)
0944   047B ED A0                   LDI                         ;                       ' 16+1  |
0945   047D E2 CD 04                JP      PO, .sec_part_d5    ;                       ' 10    | 27 (198)
0946   0480             
0947   0480                         wait56                      ; sync                  ' 56    | (254)
0947   0480 3E 02       >            LD      A, w            ; 7-2
0947   0482 3D          >            DEC     A               ; 4
0947   0483 20 FD       >            JR      NZ, .loop       ; 12
0947   0485 ED 4F       >            LD      R, A
0947   0487 ED 4F       >            LD      R, A
0947   0489 00          >            NOP
0948   048A             
0949   048A             ; $00+X
0950   048A                         sampleOutput                ;                       ' 36    | 36
0950   048A D9          >            EXX                     ;                           ' 4     | 4
0950   048B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0950   048C 03          >            INC     BC              ; increment read address    ' 6     |
0950   048D CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0950   048F 12          >            LD      (DE), A         ; play sample               ' 7     |
0950   0490 D9          >            EXX                     ;                           ' 4     | (36)
0951   0491             
0952   0491 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0953   0493 E2 AF 04                JP      PO, .sec_part_d0    ;                       ' 10    | 27 (63)
0954   0496 ED A0                   LDI                         ;                       ' 16+1  |
0955   0498 E2 B5 04                JP      PO, .sec_part_d1    ;                       ' 10    | 27 (90)
0956   049B ED A0                   LDI                         ;                       ' 16+1  |
0957   049D E2 BB 04                JP      PO, .sec_part_d2    ;                       ' 10    | 27 (117)
0958   04A0 ED A0                   LDI                         ;                       ' 16+1  |
0959   04A2 E2 C1 04                JP      PO, .sec_part_d3    ;                       ' 10    | 27 (144)
0960   04A5 ED A0                   LDI                         ;                       ' 16+1  |
0961   04A7 E2 C7 04                JP      PO, .sec_part_d4    ;                       ' 10    | 27 (171)
0962   04AA ED A0                   LDI                         ;                       ' 16+1  |
0963   04AC C3 CD 04                JP      .sec_part_d5        ;                       ' 10    | 27 (198)
0964   04AF             
0965   04AF             .sec_part_d0
0966   04AF                         wait27                      ; sync                  '       | (90)
0966   04AF ED 4F       >            LD      R, A
0966   04B1 ED 4F       >            LD      R, A
0966   04B3 ED 4F       >            LD      R, A
0967   04B5             .sec_part_d1
0968   04B5                         wait27                      ; sync                  '       | (117)
0968   04B5 ED 4F       >            LD      R, A
0968   04B7 ED 4F       >            LD      R, A
0968   04B9 ED 4F       >            LD      R, A
0969   04BB             .sec_part_d2
0970   04BB                         wait27                      ; sync                  '       | (144)
0970   04BB ED 4F       >            LD      R, A
0970   04BD ED 4F       >            LD      R, A
0970   04BF ED 4F       >            LD      R, A
0971   04C1             .sec_part_d3
0972   04C1                         wait27                      ; sync                  '       | (171)
0972   04C1 ED 4F       >            LD      R, A
0972   04C3 ED 4F       >            LD      R, A
0972   04C5 ED 4F       >            LD      R, A
0973   04C7             .sec_part_d4
0974   04C7                         wait27                      ; sync                  '       | (198)
0974   04C7 ED 4F       >            LD      R, A
0974   04C9 ED 4F       >            LD      R, A
0974   04CB ED 4F       >            LD      R, A
0975   04CD             .sec_part_d5
0976   04CD                         wait35                      ; sync                  ' 35    |
0976   04CD 18 00       >            JR      .go
0976   04CF ED 4F       >            LD      R, A
0976   04D1 F6 00       >            OR      $0
0976   04D3 F6 00       >            OR      $0
0977   04D5 AF                      XOR     A                   ; A = 0                 ' 4     | 39 (237)
0978   04D6             
0979   04D6             end_prep_xgm                            ;                       ' 237
0980   04D6 12                      LD      (DE), A             ; XGM buf end with 0    ' 7     |
0981   04D7                         wait10                      ; sync                  ' 10    | 17 (254)
0981   04D7 C3 DA 04    >            JP      .go
0982   04DA             
0983   04DA             
0984   04DA             ; XGM PREP DONE
0985   04DA             ; -------------
0986   04DA             
0987   04DA             ; $01+x
0988   04DA                         sampleOutput                ;                       ' 36    | (36)
0988   04DA D9          >            EXX                     ;                           ' 4     | 4
0988   04DB 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0988   04DC 03          >            INC     BC              ; increment read address    ' 6     |
0988   04DD CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0988   04DF 12          >            LD      (DE), A         ; play sample               ' 7     |
0988   04E0 D9          >            EXX                     ;                           ' 4     | (36)
0989   04E1             
0990   04E1 3A 02 01                LD      A, (STATUS)         ; A = STATUS            ' 13    |
0991   04E4 CB 77                   BIT     XGM_PLAY_SFT, A     ; XGM playing ?         ' 8     | 31 (67)
0992   04E6 C2 F5 04                JP      NZ, .inc            ; count elapsed         ' 10    |
0993   04E9             
0994   04E9                         wait71                      ; sync                  ' 71    | 81 (148)
0994   04E9 3E 03       >            LD      A, w            ; 7-2
0994   04EB 3D          >            DEC     A               ; 4
0994   04EC 20 FD       >            JR      NZ, .loop       ; 12
0994   04EE 18 00       >            JR      .go
0994   04F0 ED 4F       >            LD      R, A
0995   04F2 C3 06 05                JP      .noinc              ; preparation done      ' 10    |
0996   04F5             
0997   04F5             .inc
0998   04F5 21 94 01                LD      HL, ELAPSED         ;                       ' 10    | (77)
0999   04F8             
1000   04F8 7E                      LD      A, (HL)             ;                       ' 7     |
1001   04F9 C6 01                   ADD     A, #1               ;                       ' 7     |
1002   04FB 77                      LD      (HL), A             ;                       ' 7     |
1003   04FC 2C                      INC     L                   ;                       ' 4     |
1004   04FD 7E                      LD      A, (HL)             ;                       ' 7     |
1005   04FE CE 00                   ADC     A, #0               ; inc elapsed frame     ' 7     | 71 (148)
1006   0500 77                      LD      (HL), A             ; (24 bit counter)      ' 7     |
1007   0501 2C                      INC     L                   ;                       ' 4     |
1008   0502 7E                      LD      A, (HL)             ;                       ' 7     |
1009   0503 CE 00                   ADC     A, #0               ;                       ' 7     |
1010   0505 77                      LD      (HL), A             ;                       ' 7     |
1011   0506             
1012   0506             .noinc
1013   0506                         wait60                      ; sync                  ' 60    | (208)
1013   0506 3E 03       >            LD      A, w            ; 7-2
1013   0508 3D          >            DEC     A               ; 4
1013   0509 20 FD       >            JR      NZ, .loop       ; 12
1013   050B C3 0E 05    >            JP      .go
1014   050E             
1015   050E ED 5B 38 01             LD      DE, (WRITEBUF)      ; DE = write buf        ' 20    |
1016   0512                         compareReadWrite            ; PCM buffer full ?     ' 16    | 46 (254)
1016   0512 D9          >            EXX                     ;                           ' 4     |
1016   0513 78          >            LD      A, B            ; A = read buffer high      ' 4     |
1016   0514 D9          >            EXX                     ;                           ' 4     | 16
1016   0515 BA          >            CP      D               ; compare write buffer high ' 4     |
1017   0516 CA EA 09                JP      Z, sync_frame       ; go to sync directly   ' 10    |
1018   0519             
1019   0519             pcm_mix
1020   0519             
1021   0519             ; PCM channel 0
1022   0519             ; -------------
1023   0519             
1024   0519             ; $02+X
1025   0519                         sampleOutput                ;                       ' 36    |
1025   0519 D9          >            EXX                     ;                           ' 4     | 4
1025   051A 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1025   051B 03          >            INC     BC              ; increment read address    ' 6     |
1025   051C CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1025   051E 12          >            LD      (DE), A         ; play sample               ' 7     |
1025   051F D9          >            EXX                     ;                           ' 4     | (36)
1026   0520                         prepareChannelAlt 0         ;                       ' 176   |
1026   0520 2A 16 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
1026   0523 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
1026   0524 17          >            RLA                             ; C flag = bit 15       ' 4     |
1026   0525 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
1026   0526 17          >            RLA                             ; A = bit 15-22         ' 4     |
1026   0527 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
1026   052A 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
1026   052B 0F          >            RRCA                     ;                          ' 4
1026   052C 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
1026   052D 0F          >            RRCA                     ;                          ' 4
1026   052E 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
1026   052F 0F          >            RRCA                     ;                          ' 4
1026   0530 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
1026   0531 0F          >            RRCA                     ;                          ' 4
1026   0532 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
1026   0533 0F          >            RRCA                     ;                          ' 4
1026   0534 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
1026   0535 0F          >            RRCA                     ;                          ' 4
1026   0536 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
1026   0537 0F          >            RRCA                     ;                          ' 4
1026   0538 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
1026   0539 AF          >            XOR A                    ;                          ' 4
1026   053A 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
1026   053B 65          >            LD      H, L                    ;                       ' 4     |
1026   053C CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
1026   053E 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
1026   0540 ED 5B 38 01 >            LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
1027   0544 01 F2 00                LD      BC, 242             ; prepare loop counter  ' 10    | 254
1028   0547                         wait32                      ; sync                  ' 32    |
1028   0547 F6 00       >            OR      $0
1028   0549 00          >            NOP
1028   054A ED 4F       >            LD      R, A
1028   054C 18 00       >            JR      .go
1029   054E             
1030   054E             ; $03-$18+X
1031   054E             .loop_ch0
1032   054E                         sampleOutput                ;                       ' 36    |
1032   054E D9          >            EXX                     ;                           ' 4     | 4
1032   054F 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1032   0550 03          >            INC     BC              ; increment read address    ' 6     |
1032   0551 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1032   0553 12          >            LD      (DE), A         ; play sample               ' 7     |
1032   0554 D9          >            EXX                     ;                           ' 4     | (36)
1033   0555                         readAndClear2               ;                       ' 38    |
1033   0555 ED A0       >            LDI                     ;                           ' 16+3  |
1033   0557 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1034   0559                         readAndClear2               ; process 11 samples    ' 38    |
1034   0559 ED A0       >            LDI                     ;                           ' 16+3  |
1034   055B ED A0       >            LDI                     ;                           ' 16+3  | (38)
1035   055D                         readAndClear2               ;                       ' 38    | 254-1
1035   055D ED A0       >            LDI                     ;                           ' 16+3  |
1035   055F ED A0       >            LDI                     ;                           ' 16+3  | (38)
1036   0561                         readAndClear2               ;                       ' 38    |
1036   0561 ED A0       >            LDI                     ;                           ' 16+3  |
1036   0563 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1037   0565                         readAndClear2               ;                       ' 38    |
1037   0565 ED A0       >            LDI                     ;                           ' 16+3  |
1037   0567 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1038   0569                         readAndClear                ;                       ' 19    |
1038   0569 ED A0       >            LDI                     ;                           ' 16+3  | 19
1039   056B                         wait8                       ; sync                  ' 8     |
1039   056B 00          >            NOP
1039   056C 00          >            NOP
1040   056D             
1041   056D                         sampleOutput                ; -1 --> a bit early    ' 36    |
1041   056D D9          >            EXX                     ;                           ' 4     | 4
1041   056E 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1041   056F 03          >            INC     BC              ; increment read address    ' 6     |
1041   0570 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1041   0572 12          >            LD      (DE), A         ; play sample               ' 7     |
1041   0573 D9          >            EXX                     ;                           ' 4     | (36)
1042   0574                         readAndClear2               ;                       ' 38    |
1042   0574 ED A0       >            LDI                     ;                           ' 16+3  |
1042   0576 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1043   0578                         readAndClear2               ; process 11 samples    ' 38    |
1043   0578 ED A0       >            LDI                     ;                           ' 16+3  |
1043   057A ED A0       >            LDI                     ;                           ' 16+3  | (38)
1044   057C                         readAndClear2               ;                       ' 38    | 254+1
1044   057C ED A0       >            LDI                     ;                           ' 16+3  |
1044   057E ED A0       >            LDI                     ;                           ' 16+3  | (38)
1045   0580                         readAndClear2               ;                       ' 38    |
1045   0580 ED A0       >            LDI                     ;                           ' 16+3  |
1045   0582 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1046   0584                         readAndClear2               ;                       ' 38    |
1046   0584 ED A0       >            LDI                     ;                           ' 16+3  |
1046   0586 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1047   0588                         readAndClear                ;                       ' 19    |
1047   0588 ED A0       >            LDI                     ;                           ' 16+3  | 19
1048   058A EA 4E 05                JP      PE, .loop_ch0       ;                       ' 10    |
1049   058D             
1050   058D             ; $19+X
1051   058D                         sampleOutput                ;                       ' 36    |
1051   058D D9          >            EXX                     ;                           ' 4     | 4
1051   058E 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1051   058F 03          >            INC     BC              ; increment read address    ' 6     |
1051   0590 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1051   0592 12          >            LD      (DE), A         ; play sample               ' 7     |
1051   0593 D9          >            EXX                     ;                           ' 4     | (36)
1052   0594                         readAndClear2               ;                       ' 38    |
1052   0594 ED A0       >            LDI                     ;                           ' 16+3  |
1052   0596 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1053   0598                         readAndClear2               ; process 10 samples    ' 38    |
1053   0598 ED A0       >            LDI                     ;                           ' 16+3  |
1053   059A ED A0       >            LDI                     ;                           ' 16+3  | (38)
1054   059C                         readAndClear2               ;                       ' 38    | 254+10
1054   059C ED A0       >            LDI                     ;                           ' 16+3  |
1054   059E ED A0       >            LDI                     ;                           ' 16+3  | (38)
1055   05A0                         readAndClear2               ;                       ' 38    |
1055   05A0 ED A0       >            LDI                     ;                           ' 16+3  |
1055   05A2 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1056   05A4                         readAndClear2               ;                       ' 38    |
1056   05A4 ED A0       >            LDI                     ;                           ' 16+3  |
1056   05A6 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1057   05A8                         readAndClear2               ;                       ' 38    |
1057   05A8 ED A0       >            LDI                     ;                           ' 16+3  |
1057   05AA ED A0       >            LDI                     ;                           ' 16+3  | (38)
1058   05AC             
1059   05AC             ; $1A+X
1060   05AC                         sampleOutput                ; +10 --> too late      ' 36+10 |
1060   05AC D9          >            EXX                     ;                           ' 4     | 4
1060   05AD 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1060   05AE 03          >            INC     BC              ; increment read address    ' 6     |
1060   05AF CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1060   05B1 12          >            LD      (DE), A         ; play sample               ' 7     |
1060   05B2 D9          >            EXX                     ;                           ' 4     | (36)
1061   05B3                         readAndClear2               ;                       ' 38    |
1061   05B3 ED A0       >            LDI                     ;                           ' 16+3  |
1061   05B5 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1062   05B7                         updateChannelData 0         ; update channel data   ' 153   | 254
1062   05B7 2A 16 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
1062   05BA 23          >            INC     HL                      ;                       ' 6     | (38)
1062   05BB 22 16 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
1062   05BE 2A 18 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
1062   05C1 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
1062   05C2 7C          >            LD      A, H                    ;                       ' 4     |
1062   05C3 B5          >            OR      L                       ;                       ' 4     | 18 (78)
1062   05C4 CA D8 05    >            JP      Z, .done                ; sample done ?         ' 10    |
1062   05C7 22 18 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    |
1062   05CA ED 4F       >            LD      R, A
1062   05CC ED 4F       >            LD      R, A
1062   05CE ED 4F       >            LD      R, A
1062   05D0 ED 4F       >            LD      R, A
1062   05D2 ED 4F       >            LD      R, A
1062   05D4 00          >            NOP
1062   05D5 C3 E8 05    >            JP      .end                    ;                       ' 10    |
1062   05D8 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
1062   05DB 22 16 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
1062   05DE 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
1062   05E1 22 18 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
1062   05E4 AF          >            XOR     A                       ;                           ' 4     |
1062   05E5 32 14 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
1063   05E8                         wait17                      ; sync                  ' 17    |
1063   05E8 C3 EB 05    >            JP      .go
1063   05EB F6 00       >            OR      $0
1064   05ED             
1065   05ED             
1066   05ED             ;    LD  A, (VCOUNTER)
1067   05ED             ;    LD  (DEBUG_2), A
1068   05ED             
1069   05ED             ; PCM channel 1
1070   05ED             ; -------------
1071   05ED             
1072   05ED             ; $1B+X
1073   05ED                         sampleOutput                ;                       ' 36    |
1073   05ED D9          >            EXX                     ;                           ' 4     | 4
1073   05EE 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1073   05EF 03          >            INC     BC              ; increment read address    ' 6     |
1073   05F0 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1073   05F2 12          >            LD      (DE), A         ; play sample               ' 7     |
1073   05F3 D9          >            EXX                     ;                           ' 4     | (36)
1074   05F4                         prepareChannel 1            ;                       ' 178   | 254
1074   05F4 2A 1E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
1074   05F7 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
1074   05F8 17          >            RLA                             ; C flag = bit 15       ' 4     |
1074   05F9 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
1074   05FA 17          >            RLA                             ; A = bit 15-22         ' 4     |
1074   05FB 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
1074   05FE 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
1074   05FF 0F          >            RRCA                     ;                          ' 4
1074   0600 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
1074   0601 0F          >            RRCA                     ;                          ' 4
1074   0602 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
1074   0603 0F          >            RRCA                     ;                          ' 4
1074   0604 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
1074   0605 0F          >            RRCA                     ;                          ' 4
1074   0606 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
1074   0607 0F          >            RRCA                     ;                          ' 4
1074   0608 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
1074   0609 0F          >            RRCA                     ;                          ' 4
1074   060A 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
1074   060B 0F          >            RRCA                     ;                          ' 4
1074   060C 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
1074   060D AF          >            XOR A                    ;                          ' 4
1074   060E 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
1074   060F 65          >            LD      H, L                    ;                       ' 4     |
1074   0610 CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 25 (162)
1074   0612 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
1074   0614 F9          >            LD      SP, HL                  ; SP point on sample    ' 6     |
1074   0615 2A 38 01    >            LD      HL, (WRITEBUF)          ; HL = write buffer     ' 16    | (178)
1075   0618 01 80 10                LD      BC, $1080           ; prepare loop counter  ' 10    |
1076   061B                         wait30                      ; sync                  ' 30    |
1076   061B 18 00       >            JR      .go
1076   061D ED 4F       >            LD      R, A
1076   061F ED 4F       >            LD      R, A
1077   0621             
1078   0621             ; $1C-4B+X
1079   0621             .loop_ch1
1080   0621                         readAndMix16WhilePlay3      ;                       ' 240   |
1080   0621 D9          >            EXX                     ;                           ' 4     | 4
1080   0622 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1080   0623 03          >            INC     BC              ; increment read address    ' 6     |
1080   0624 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1080   0626 12          >            LD      (DE), A         ; play sample               ' 7     |
1080   0627 D9          >            EXX                     ;                           ' 4     | (36)
1080   0628 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1080   0629 7B          >            LD      A, E            ; first sample              ' 4     |
1080   062A 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1080   062B E2 31 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1080   062E 79          >            LD      A, C            ; fix overflow              ' 4     |
1080   062F CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1080   0631 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1080   0632 2C          >            INC     L               ;                           ' 4     | 11 (48)
1080   0633 7A          >            LD      A, D            ; second sample             ' 4     |
1080   0634 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1080   0635 E2 3B 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1080   0638 79          >            LD      A, C            ; fix overflow              ' 4     |
1080   0639 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1080   063B 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1080   063C 2C          >            INC     L               ;                           ' 4     | 11 (80)
1080   063D D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1080   063E 7B          >            LD      A, E            ; first sample              ' 4     |
1080   063F 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1080   0640 E2 46 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1080   0643 79          >            LD      A, C            ; fix overflow              ' 4     |
1080   0644 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1080   0646 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1080   0647 2C          >            INC     L               ;                           ' 4     | 11 (48)
1080   0648 7A          >            LD      A, D            ; second sample             ' 4     |
1080   0649 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1080   064A E2 50 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1080   064D 79          >            LD      A, C            ; fix overflow              ' 4     |
1080   064E CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1080   0650 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1080   0651 2C          >            INC     L               ;                           ' 4     | 11 (80)
1080   0652 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (212)
1080   0653 7B          >            LD      A, E            ; first sample              ' 4     |
1080   0654 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (233)
1080   0655 E2 5B 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1080   0658 79          >            LD      A, C            ; fix overflow              ' 4     |
1080   0659 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1080   065B 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1080   065C 2C          >            INC     L               ;                           ' 4     | 11 (254-10)
1080   065D D9          >            EXX                     ;                           ' 4     | 4
1080   065E 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1080   065F 03          >            INC     BC              ; increment read address    ' 6     |
1080   0660 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1080   0662 12          >            LD      (DE), A         ; play sample               ' 7     |
1080   0663 D9          >            EXX                     ;                           ' 4     | (36)
1080   0664 7A          >            LD      A, D            ; second sample             ' 4     |
1080   0665 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (47)
1080   0666 E2 6C 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1080   0669 79          >            LD      A, C            ; fix overflow              ' 4     |
1080   066A CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1080   066C 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1080   066D 2C          >            INC     L               ;                           ' 4     | 11 (58)
1080   066E D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1080   066F 7B          >            LD      A, E            ; first sample              ' 4     |
1080   0670 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1080   0671 E2 77 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1080   0674 79          >            LD      A, C            ; fix overflow              ' 4     |
1080   0675 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1080   0677 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1080   0678 2C          >            INC     L               ;                           ' 4     | 11 (48)
1080   0679 7A          >            LD      A, D            ; second sample             ' 4     |
1080   067A 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1080   067B E2 81 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1080   067E 79          >            LD      A, C            ; fix overflow              ' 4     |
1080   067F CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1080   0681 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1080   0682 2C          >            INC     L               ;                           ' 4     | 11 (80)
1080   0683 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1080   0684 7B          >            LD      A, E            ; first sample              ' 4     |
1080   0685 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1080   0686 E2 8C 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1080   0689 79          >            LD      A, C            ; fix overflow              ' 4     |
1080   068A CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1080   068C 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1080   068D 2C          >            INC     L               ;                           ' 4     | 11 (48)
1080   068E 7A          >            LD      A, D            ; second sample             ' 4     |
1080   068F 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1080   0690 E2 96 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1080   0693 79          >            LD      A, C            ; fix overflow              ' 4     |
1080   0694 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1080   0696 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1080   0697 2C          >            INC     L               ;                           ' 4     | 11 (80)
1080   0698 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (234)
1080   0699 7B          >            LD      A, E            ; first sample              ' 4     |
1080   069A 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (254+1)
1080   069B E2 A1 06    >            JP      PO, .ok3        ; check overflow            ' 10    |
1080   069E 79          >            LD      A, C            ; fix overflow              ' 4     |
1080   069F CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1080   06A1 77          >            LD      (HL), A         ; store it in write sample  ' 7     | (254+8)
1080   06A2 D9          >            EXX                     ;                           ' 4     | 4
1080   06A3 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1080   06A4 03          >            INC     BC              ; increment read address    ' 6     |
1080   06A5 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1080   06A7 12          >            LD      (DE), A         ; play sample               ' 7     |
1080   06A8 D9          >            EXX                     ;                           ' 4     | (36)
1080   06A9 2C          >            INC     L               ;                           ' 4     | (48)
1080   06AA 7A          >            LD      A, D            ; second sample             ' 4     |
1080   06AB 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1080   06AC E2 B2 06    >            JP      PO, .ok4        ; check overflow            ' 10    |
1080   06AF 79          >            LD      A, C            ; fix overflow              ' 4     |
1080   06B0 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1080   06B2 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1080   06B3 2C          >            INC     L               ;                           ' 4     | 11 (80)
1080   06B4 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1080   06B5 7B          >            LD      A, E            ; first sample              ' 4     |
1080   06B6 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1080   06B7 E2 BD 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1080   06BA 79          >            LD      A, C            ; fix overflow              ' 4     |
1080   06BB CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1080   06BD 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1080   06BE 2C          >            INC     L               ;                           ' 4     | 11 (48)
1080   06BF 7A          >            LD      A, D            ; second sample             ' 4     |
1080   06C0 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1080   06C1 E2 C7 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1080   06C4 79          >            LD      A, C            ; fix overflow              ' 4     |
1080   06C5 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1080   06C7 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1080   06C8 2C          >            INC     L               ;                           ' 4     | 11 (80)
1080   06C9 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1080   06CA 7B          >            LD      A, E            ; first sample              ' 4     |
1080   06CB 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1080   06CC E2 D2 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1080   06CF 79          >            LD      A, C            ; fix overflow              ' 4     |
1080   06D0 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1080   06D2 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1080   06D3 2C          >            INC     L               ;                           ' 4     | 11 (48)
1080   06D4 7A          >            LD      A, D            ; second sample             ' 4     |
1080   06D5 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1080   06D6 E2 DC 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1080   06D9 79          >            LD      A, C            ; fix overflow              ' 4     |
1080   06DA CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1080   06DC 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1080   06DD 2C          >            INC     L               ;                           ' 4     | 11 (80)
1081   06DE 05                      DEC     B                   ;                       ' 4     | 254*3
1082   06DF C2 21 06                JP      NZ, .loop_ch1       ;                       ' 10    |
1083   06E2             
1084   06E2             ; $4C+X
1085   06E2                         sampleOutput                ;                       ' 36    |
1085   06E2 D9          >            EXX                     ;                           ' 4     | 4
1085   06E3 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1085   06E4 03          >            INC     BC              ; increment read address    ' 6     |
1085   06E5 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1085   06E7 12          >            LD      (DE), A         ; play sample               ' 7     |
1085   06E8 D9          >            EXX                     ;                           ' 4     | (36)
1086   06E9                         updateChannelData 1         ; update channel data   ' 153   | 254
1086   06E9 2A 1E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
1086   06EC 23          >            INC     HL                      ;                       ' 6     | (38)
1086   06ED 22 1E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
1086   06F0 2A 20 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
1086   06F3 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
1086   06F4 7C          >            LD      A, H                    ;                       ' 4     |
1086   06F5 B5          >            OR      L                       ;                       ' 4     | 18 (78)
1086   06F6 CA 0A 07    >            JP      Z, .done                ; sample done ?         ' 10    |
1086   06F9 22 20 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    |
1086   06FC ED 4F       >            LD      R, A
1086   06FE ED 4F       >            LD      R, A
1086   0700 ED 4F       >            LD      R, A
1086   0702 ED 4F       >            LD      R, A
1086   0704 ED 4F       >            LD      R, A
1086   0706 00          >            NOP
1086   0707 C3 1A 07    >            JP      .end                    ;                       ' 10    |
1086   070A 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
1086   070D 22 1E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
1086   0710 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
1086   0713 22 20 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
1086   0716 AF          >            XOR     A                       ;                           ' 4     |
1086   0717 32 1C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
1087   071A                         wait65                      ; sync                  ' 65    |
1087   071A 3E 03       >            LD      A, w            ; 7-2
1087   071C 3D          >            DEC     A               ; 4
1087   071D 20 FD       >            JR      NZ, .loop       ; 12
1087   071F 00          >            NOP
1087   0720 00          >            NOP
1087   0721 F6 00       >            OR      $0
1088   0723             
1089   0723             
1090   0723             ;    LD  A, (VCOUNTER)
1091   0723             ;    LD  (DEBUG_3), A
1092   0723             
1093   0723             ; PCM channel 2
1094   0723             ; -------------
1095   0723             
1096   0723             ; $4D+X
1097   0723                         sampleOutput                ;                       ' 36    |
1097   0723 D9          >            EXX                     ;                           ' 4     | 4
1097   0724 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1097   0725 03          >            INC     BC              ; increment read address    ' 6     |
1097   0726 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1097   0728 12          >            LD      (DE), A         ; play sample               ' 7     |
1097   0729 D9          >            EXX                     ;                           ' 4     | (36)
1098   072A                         prepareChannel 2            ;                       ' 178   | 254
1098   072A 2A 26 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
1098   072D 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
1098   072E 17          >            RLA                             ; C flag = bit 15       ' 4     |
1098   072F 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
1098   0730 17          >            RLA                             ; A = bit 15-22         ' 4     |
1098   0731 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
1098   0734 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
1098   0735 0F          >            RRCA                     ;                          ' 4
1098   0736 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
1098   0737 0F          >            RRCA                     ;                          ' 4
1098   0738 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
1098   0739 0F          >            RRCA                     ;                          ' 4
1098   073A 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
1098   073B 0F          >            RRCA                     ;                          ' 4
1098   073C 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
1098   073D 0F          >            RRCA                     ;                          ' 4
1098   073E 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
1098   073F 0F          >            RRCA                     ;                          ' 4
1098   0740 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
1098   0741 0F          >            RRCA                     ;                          ' 4
1098   0742 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
1098   0743 AF          >            XOR A                    ;                          ' 4
1098   0744 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
1098   0745 65          >            LD      H, L                    ;                       ' 4     |
1098   0746 CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 25 (162)
1098   0748 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
1098   074A F9          >            LD      SP, HL                  ; SP point on sample    ' 6     |
1098   074B 2A 38 01    >            LD      HL, (WRITEBUF)          ; HL = write buffer     ' 16    | (178)
1099   074E 01 80 10                LD      BC, $1080           ; prepare loop counter  ' 10    |
1100   0751                         wait30                      ; sync                  ' 30    |
1100   0751 18 00       >            JR      .go
1100   0753 ED 4F       >            LD      R, A
1100   0755 ED 4F       >            LD      R, A
1101   0757             
1102   0757             ; $4E-7D+X
1103   0757             .loop_ch2
1104   0757                         readAndMix16WhilePlay3      ;                       ' 240   |
1104   0757 D9          >            EXX                     ;                           ' 4     | 4
1104   0758 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1104   0759 03          >            INC     BC              ; increment read address    ' 6     |
1104   075A CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1104   075C 12          >            LD      (DE), A         ; play sample               ' 7     |
1104   075D D9          >            EXX                     ;                           ' 4     | (36)
1104   075E D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1104   075F 7B          >            LD      A, E            ; first sample              ' 4     |
1104   0760 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1104   0761 E2 67 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1104   0764 79          >            LD      A, C            ; fix overflow              ' 4     |
1104   0765 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1104   0767 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1104   0768 2C          >            INC     L               ;                           ' 4     | 11 (48)
1104   0769 7A          >            LD      A, D            ; second sample             ' 4     |
1104   076A 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1104   076B E2 71 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1104   076E 79          >            LD      A, C            ; fix overflow              ' 4     |
1104   076F CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1104   0771 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1104   0772 2C          >            INC     L               ;                           ' 4     | 11 (80)
1104   0773 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1104   0774 7B          >            LD      A, E            ; first sample              ' 4     |
1104   0775 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1104   0776 E2 7C 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1104   0779 79          >            LD      A, C            ; fix overflow              ' 4     |
1104   077A CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1104   077C 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1104   077D 2C          >            INC     L               ;                           ' 4     | 11 (48)
1104   077E 7A          >            LD      A, D            ; second sample             ' 4     |
1104   077F 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1104   0780 E2 86 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1104   0783 79          >            LD      A, C            ; fix overflow              ' 4     |
1104   0784 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1104   0786 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1104   0787 2C          >            INC     L               ;                           ' 4     | 11 (80)
1104   0788 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (212)
1104   0789 7B          >            LD      A, E            ; first sample              ' 4     |
1104   078A 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (233)
1104   078B E2 91 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1104   078E 79          >            LD      A, C            ; fix overflow              ' 4     |
1104   078F CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1104   0791 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1104   0792 2C          >            INC     L               ;                           ' 4     | 11 (254-10)
1104   0793 D9          >            EXX                     ;                           ' 4     | 4
1104   0794 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1104   0795 03          >            INC     BC              ; increment read address    ' 6     |
1104   0796 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1104   0798 12          >            LD      (DE), A         ; play sample               ' 7     |
1104   0799 D9          >            EXX                     ;                           ' 4     | (36)
1104   079A 7A          >            LD      A, D            ; second sample             ' 4     |
1104   079B 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (47)
1104   079C E2 A2 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1104   079F 79          >            LD      A, C            ; fix overflow              ' 4     |
1104   07A0 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1104   07A2 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1104   07A3 2C          >            INC     L               ;                           ' 4     | 11 (58)
1104   07A4 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1104   07A5 7B          >            LD      A, E            ; first sample              ' 4     |
1104   07A6 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1104   07A7 E2 AD 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1104   07AA 79          >            LD      A, C            ; fix overflow              ' 4     |
1104   07AB CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1104   07AD 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1104   07AE 2C          >            INC     L               ;                           ' 4     | 11 (48)
1104   07AF 7A          >            LD      A, D            ; second sample             ' 4     |
1104   07B0 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1104   07B1 E2 B7 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1104   07B4 79          >            LD      A, C            ; fix overflow              ' 4     |
1104   07B5 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1104   07B7 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1104   07B8 2C          >            INC     L               ;                           ' 4     | 11 (80)
1104   07B9 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1104   07BA 7B          >            LD      A, E            ; first sample              ' 4     |
1104   07BB 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1104   07BC E2 C2 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1104   07BF 79          >            LD      A, C            ; fix overflow              ' 4     |
1104   07C0 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1104   07C2 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1104   07C3 2C          >            INC     L               ;                           ' 4     | 11 (48)
1104   07C4 7A          >            LD      A, D            ; second sample             ' 4     |
1104   07C5 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1104   07C6 E2 CC 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1104   07C9 79          >            LD      A, C            ; fix overflow              ' 4     |
1104   07CA CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1104   07CC 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1104   07CD 2C          >            INC     L               ;                           ' 4     | 11 (80)
1104   07CE D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (234)
1104   07CF 7B          >            LD      A, E            ; first sample              ' 4     |
1104   07D0 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (254+1)
1104   07D1 E2 D7 07    >            JP      PO, .ok3        ; check overflow            ' 10    |
1104   07D4 79          >            LD      A, C            ; fix overflow              ' 4     |
1104   07D5 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1104   07D7 77          >            LD      (HL), A         ; store it in write sample  ' 7     | (254+8)
1104   07D8 D9          >            EXX                     ;                           ' 4     | 4
1104   07D9 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1104   07DA 03          >            INC     BC              ; increment read address    ' 6     |
1104   07DB CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1104   07DD 12          >            LD      (DE), A         ; play sample               ' 7     |
1104   07DE D9          >            EXX                     ;                           ' 4     | (36)
1104   07DF 2C          >            INC     L               ;                           ' 4     | (48)
1104   07E0 7A          >            LD      A, D            ; second sample             ' 4     |
1104   07E1 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1104   07E2 E2 E8 07    >            JP      PO, .ok4        ; check overflow            ' 10    |
1104   07E5 79          >            LD      A, C            ; fix overflow              ' 4     |
1104   07E6 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1104   07E8 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1104   07E9 2C          >            INC     L               ;                           ' 4     | 11 (80)
1104   07EA D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1104   07EB 7B          >            LD      A, E            ; first sample              ' 4     |
1104   07EC 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1104   07ED E2 F3 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1104   07F0 79          >            LD      A, C            ; fix overflow              ' 4     |
1104   07F1 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1104   07F3 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1104   07F4 2C          >            INC     L               ;                           ' 4     | 11 (48)
1104   07F5 7A          >            LD      A, D            ; second sample             ' 4     |
1104   07F6 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1104   07F7 E2 FD 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1104   07FA 79          >            LD      A, C            ; fix overflow              ' 4     |
1104   07FB CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1104   07FD 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1104   07FE 2C          >            INC     L               ;                           ' 4     | 11 (80)
1104   07FF D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1104   0800 7B          >            LD      A, E            ; first sample              ' 4     |
1104   0801 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1104   0802 E2 08 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1104   0805 79          >            LD      A, C            ; fix overflow              ' 4     |
1104   0806 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1104   0808 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1104   0809 2C          >            INC     L               ;                           ' 4     | 11 (48)
1104   080A 7A          >            LD      A, D            ; second sample             ' 4     |
1104   080B 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1104   080C E2 12 08    >            JP      PO, .ok2        ; check overflow            ' 10    |
1104   080F 79          >            LD      A, C            ; fix overflow              ' 4     |
1104   0810 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1104   0812 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1104   0813 2C          >            INC     L               ;                           ' 4     | 11 (80)
1105   0814 05                      DEC     B                   ;                       ' 4     | 254*3
1106   0815 C2 57 07                JP      NZ, .loop_ch2       ;                       ' 10    |
1107   0818             
1108   0818             ; $7E+X
1109   0818                         sampleOutput                ;                       ' 36    |
1109   0818 D9          >            EXX                     ;                           ' 4     | 4
1109   0819 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1109   081A 03          >            INC     BC              ; increment read address    ' 6     |
1109   081B CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1109   081D 12          >            LD      (DE), A         ; play sample               ' 7     |
1109   081E D9          >            EXX                     ;                           ' 4     | (36)
1110   081F                         updateChannelData 2         ; update channel data   ' 153   | 254
1110   081F 2A 26 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
1110   0822 23          >            INC     HL                      ;                       ' 6     | (38)
1110   0823 22 26 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
1110   0826 2A 28 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
1110   0829 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
1110   082A 7C          >            LD      A, H                    ;                       ' 4     |
1110   082B B5          >            OR      L                       ;                       ' 4     | 18 (78)
1110   082C CA 40 08    >            JP      Z, .done                ; sample done ?         ' 10    |
1110   082F 22 28 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    |
1110   0832 ED 4F       >            LD      R, A
1110   0834 ED 4F       >            LD      R, A
1110   0836 ED 4F       >            LD      R, A
1110   0838 ED 4F       >            LD      R, A
1110   083A ED 4F       >            LD      R, A
1110   083C 00          >            NOP
1110   083D C3 50 08    >            JP      .end                    ;                       ' 10    |
1110   0840 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
1110   0843 22 26 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
1110   0846 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
1110   0849 22 28 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
1110   084C AF          >            XOR     A                       ;                           ' 4     |
1110   084D 32 24 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
1111   0850                         wait65                      ; sync                  ' 65    |
1111   0850 3E 03       >            LD      A, w            ; 7-2
1111   0852 3D          >            DEC     A               ; 4
1111   0853 20 FD       >            JR      NZ, .loop       ; 12
1111   0855 00          >            NOP
1111   0856 00          >            NOP
1111   0857 F6 00       >            OR      $0
1112   0859             
1113   0859             
1114   0859             ;    LD  A, (VCOUNTER)
1115   0859             ;    LD  (DEBUG_4), A
1116   0859             
1117   0859             ; PCM channel 3
1118   0859             ; -------------
1119   0859             
1120   0859             ; $7F+X
1121   0859                         sampleOutput                ;                       ' 36    |
1121   0859 D9          >            EXX                     ;                           ' 4     | 4
1121   085A 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1121   085B 03          >            INC     BC              ; increment read address    ' 6     |
1121   085C CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1121   085E 12          >            LD      (DE), A         ; play sample               ' 7     |
1121   085F D9          >            EXX                     ;                           ' 4     | (36)
1122   0860                         prepareChannelAlt 3         ;                       ' 176   | 254
1122   0860 2A 2E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
1122   0863 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
1122   0864 17          >            RLA                             ; C flag = bit 15       ' 4     |
1122   0865 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
1122   0866 17          >            RLA                             ; A = bit 15-22         ' 4     |
1122   0867 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
1122   086A 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
1122   086B 0F          >            RRCA                     ;                          ' 4
1122   086C 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
1122   086D 0F          >            RRCA                     ;                          ' 4
1122   086E 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
1122   086F 0F          >            RRCA                     ;                          ' 4
1122   0870 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
1122   0871 0F          >            RRCA                     ;                          ' 4
1122   0872 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
1122   0873 0F          >            RRCA                     ;                          ' 4
1122   0874 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
1122   0875 0F          >            RRCA                     ;                          ' 4
1122   0876 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
1122   0877 0F          >            RRCA                     ;                          ' 4
1122   0878 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
1122   0879 AF          >            XOR A                    ;                          ' 4
1122   087A 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
1122   087B 65          >            LD      H, L                    ;                       ' 4     |
1122   087C CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
1122   087E 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
1122   0880 ED 5B 38 01 >            LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
1123   0884 01 80 1C                LD      BC, $1C80           ; prepare loop counter  ' 10    |
1124   0887                         wait32                      ; sync                  ' 32    |
1124   0887 F6 00       >            OR      $0
1124   0889 00          >            NOP
1124   088A ED 4F       >            LD      R, A
1124   088C 18 00       >            JR      .go
1125   088E             
1126   088E             ; $80-$B7+X
1127   088E             .loop_ch3
1128   088E                         sampleOutput                ;                       ' 36    |
1128   088E D9          >            EXX                     ;                           ' 4     | 4
1128   088F 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1128   0890 03          >            INC     BC              ; increment read address    ' 6     |
1128   0891 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1128   0893 12          >            LD      (DE), A         ; play sample               ' 7     |
1128   0894 D9          >            EXX                     ;                           ' 4     | (36)
1129   0895                         readMixAndUnsign            ; mix/unsign 9 samples  ' 46    |
1129   0895 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1129   0896 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1129   0897 E2 9D 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1129   089A 79          >            LD      A, C            ; fix overflow              ' 4     |
1129   089B CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1129   089D 81          >            ADD     C               ; unsign                    ' 4     |
1129   089E 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1129   089F 1C          >            INC     E               ;                           ' 4     |
1129   08A0 2C          >            INC     L               ; next                      ' 4     |
1130   08A1                         readMixAndUnsign            ;                       ' 46    |
1130   08A1 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1130   08A2 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1130   08A3 E2 A9 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1130   08A6 79          >            LD      A, C            ; fix overflow              ' 4     |
1130   08A7 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1130   08A9 81          >            ADD     C               ; unsign                    ' 4     |
1130   08AA 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1130   08AB 1C          >            INC     E               ;                           ' 4     |
1130   08AC 2C          >            INC     L               ; next                      ' 4     |
1131   08AD                         readMixAndUnsign            ;                       ' 46    | 254+12
1131   08AD 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1131   08AE 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1131   08AF E2 B5 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1131   08B2 79          >            LD      A, C            ; fix overflow              ' 4     |
1131   08B3 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1131   08B5 81          >            ADD     C               ; unsign                    ' 4     |
1131   08B6 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1131   08B7 1C          >            INC     E               ;                           ' 4     |
1131   08B8 2C          >            INC     L               ; next                      ' 4     |
1132   08B9                         readMixAndUnsign            ;                       ' 46    |
1132   08B9 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1132   08BA 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1132   08BB E2 C1 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1132   08BE 79          >            LD      A, C            ; fix overflow              ' 4     |
1132   08BF CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1132   08C1 81          >            ADD     C               ; unsign                    ' 4     |
1132   08C2 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1132   08C3 1C          >            INC     E               ;                           ' 4     |
1132   08C4 2C          >            INC     L               ; next                      ' 4     |
1133   08C5                         readMixAndUnsign            ;                       ' 46    |
1133   08C5 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1133   08C6 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1133   08C7 E2 CD 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1133   08CA 79          >            LD      A, C            ; fix overflow              ' 4     |
1133   08CB CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1133   08CD 81          >            ADD     C               ; unsign                    ' 4     |
1133   08CE 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1133   08CF 1C          >            INC     E               ;                           ' 4     |
1133   08D0 2C          >            INC     L               ; next                      ' 4     |
1134   08D1             
1135   08D1                         sampleOutput                ; +12 --> late          ' 36    |
1135   08D1 D9          >            EXX                     ;                           ' 4     | 4
1135   08D2 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1135   08D3 03          >            INC     BC              ; increment read address    ' 6     |
1135   08D4 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1135   08D6 12          >            LD      (DE), A         ; play sample               ' 7     |
1135   08D7 D9          >            EXX                     ;                           ' 4     | (36)
1136   08D8                         readMixAndUnsign            ;                       ' 46    |
1136   08D8 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1136   08D9 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1136   08DA E2 E0 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1136   08DD 79          >            LD      A, C            ; fix overflow              ' 4     |
1136   08DE CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1136   08E0 81          >            ADD     C               ; unsign                    ' 4     |
1136   08E1 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1136   08E2 1C          >            INC     E               ;                           ' 4     |
1136   08E3 2C          >            INC     L               ; next                      ' 4     |
1137   08E4                         readMixAndUnsign            ;                       ' 46    |
1137   08E4 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1137   08E5 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1137   08E6 E2 EC 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1137   08E9 79          >            LD      A, C            ; fix overflow              ' 4     |
1137   08EA CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1137   08EC 81          >            ADD     C               ; unsign                    ' 4     |
1137   08ED 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1137   08EE 1C          >            INC     E               ;                           ' 4     |
1137   08EF 2C          >            INC     L               ; next                      ' 4     |
1138   08F0                         readMixAndUnsign            ;                       ' 46    | 254
1138   08F0 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1138   08F1 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1138   08F2 E2 F8 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1138   08F5 79          >            LD      A, C            ; fix overflow              ' 4     |
1138   08F6 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1138   08F8 81          >            ADD     C               ; unsign                    ' 4     |
1138   08F9 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1138   08FA 1C          >            INC     E               ;                           ' 4     |
1138   08FB 2C          >            INC     L               ; next                      ' 4     |
1139   08FC                         readMixAndUnsign            ;                       ' 46    |
1139   08FC 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1139   08FD 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1139   08FE E2 04 09    >            JP      PO, .ok         ; check overflow            ' 10    |
1139   0901 79          >            LD      A, C            ; fix overflow              ' 4     |
1139   0902 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1139   0904 81          >            ADD     C               ; unsign                    ' 4     |
1139   0905 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1139   0906 1C          >            INC     E               ;                           ' 4     |
1139   0907 2C          >            INC     L               ; next                      ' 4     |
1140   0908                         wait8                       ; sync                  ' 8     |
1140   0908 00          >            NOP
1140   0909 00          >            NOP
1141   090A 05                      DEC     B                   ;                       ' 4     |
1142   090B C2 8E 08                JP      NZ, .loop_ch3       ;                       ' 10    |
1143   090E             
1144   090E             ; $B8+X
1145   090E                         sampleOutput                ;                       ' 36    |
1145   090E D9          >            EXX                     ;                           ' 4     | 4
1145   090F 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1145   0910 03          >            INC     BC              ; increment read address    ' 6     |
1145   0911 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1145   0913 12          >            LD      (DE), A         ; play sample               ' 7     |
1145   0914 D9          >            EXX                     ;                           ' 4     | (36)
1146   0915                         readMixAndUnsign            ;                       ' 46    |
1146   0915 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1146   0916 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1146   0917 E2 1D 09    >            JP      PO, .ok         ; check overflow            ' 10    |
1146   091A 79          >            LD      A, C            ; fix overflow              ' 4     |
1146   091B CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1146   091D 81          >            ADD     C               ; unsign                    ' 4     |
1146   091E 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1146   091F 1C          >            INC     E               ;                           ' 4     |
1146   0920 2C          >            INC     L               ; next                      ' 4     |
1147   0921                         readMixAndUnsign            ;                       ' 46    | 254
1147   0921 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1147   0922 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1147   0923 E2 29 09    >            JP      PO, .ok         ; check overflow            ' 10    |
1147   0926 79          >            LD      A, C            ; fix overflow              ' 4     |
1147   0927 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1147   0929 81          >            ADD     C               ; unsign                    ' 4     |
1147   092A 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1147   092B 1C          >            INC     E               ;                           ' 4     |
1147   092C 2C          >            INC     L               ; next                      ' 4     |
1148   092D                         readMixAndUnsign            ;                       ' 46    |
1148   092D 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1148   092E 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1148   092F E2 35 09    >            JP      PO, .ok         ; check overflow            ' 10    |
1148   0932 79          >            LD      A, C            ; fix overflow              ' 4     |
1148   0933 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1148   0935 81          >            ADD     C               ; unsign                    ' 4     |
1148   0936 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1148   0937 1C          >            INC     E               ;                           ' 4     |
1148   0938 2C          >            INC     L               ; next                      ' 4     |
1149   0939                         readMixAndUnsign            ;                       ' 46    |
1149   0939 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1149   093A 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1149   093B E2 41 09    >            JP      PO, .ok         ; check overflow            ' 10    |
1149   093E 79          >            LD      A, C            ; fix overflow              ' 4     |
1149   093F CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1149   0941 81          >            ADD     C               ; unsign                    ' 4     |
1149   0942 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1149   0943 1C          >            INC     E               ;                           ' 4     |
1149   0944 2C          >            INC     L               ; next                      ' 4     |
1150   0945                         wait34                      ;                       ' 34    |
1150   0945 3E 02       >            LD      A, w            ; 7-2
1150   0947 3D          >            DEC     A               ; 4
1150   0948 20 FD       >            JR      NZ, .loop       ; 12
1151   094A             
1152   094A             ; $B9+X
1153   094A                         sampleOutput                ;                       ' 36    |
1153   094A D9          >            EXX                     ;                           ' 4     | 4
1153   094B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1153   094C 03          >            INC     BC              ; increment read address    ' 6     |
1153   094D CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1153   094F 12          >            LD      (DE), A         ; play sample               ' 7     |
1153   0950 D9          >            EXX                     ;                           ' 4     | (36)
1154   0951                         updateChannelData 3         ; update channel data   ' 153   | 254
1154   0951 2A 2E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
1154   0954 23          >            INC     HL                      ;                       ' 6     | (38)
1154   0955 22 2E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
1154   0958 2A 30 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
1154   095B 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
1154   095C 7C          >            LD      A, H                    ;                       ' 4     |
1154   095D B5          >            OR      L                       ;                       ' 4     | 18 (78)
1154   095E CA 72 09    >            JP      Z, .done                ; sample done ?         ' 10    |
1154   0961 22 30 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    |
1154   0964 ED 4F       >            LD      R, A
1154   0966 ED 4F       >            LD      R, A
1154   0968 ED 4F       >            LD      R, A
1154   096A ED 4F       >            LD      R, A
1154   096C ED 4F       >            LD      R, A
1154   096E 00          >            NOP
1154   096F C3 82 09    >            JP      .end                    ;                       ' 10    |
1154   0972 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
1154   0975 22 2E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
1154   0978 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
1154   097B 22 30 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
1154   097E AF          >            XOR     A                       ;                           ' 4     |
1154   097F 32 2C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
1155   0982                         wait65                      ; sync                  ' 65    |
1155   0982 3E 03       >            LD      A, w            ; 7-2
1155   0984 3D          >            DEC     A               ; 4
1155   0985 20 FD       >            JR      NZ, .loop       ; 12
1155   0987 00          >            NOP
1155   0988 00          >            NOP
1155   0989 F6 00       >            OR      $0
1156   098B             
1157   098B             
1158   098B             ;    LD  A, (VCOUNTER)
1159   098B             ;    LD  (DEBUG_5), A
1160   098B             
1161   098B             ; next write buffer
1162   098B             ; -----------------
1163   098B             
1164   098B             ; $BA+X
1165   098B             next_write_buf
1166   098B                         sampleOutput                ;                       ' 36    | 36
1166   098B D9          >            EXX                     ;                           ' 4     | 4
1166   098C 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1166   098D 03          >            INC     BC              ; increment read address    ' 6     |
1166   098E CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1166   0990 12          >            LD      (DE), A         ; play sample               ' 7     |
1166   0991 D9          >            EXX                     ;                           ' 4     | (36)
1167   0992             
1168   0992 3A 02 01                LD      A, (STATUS)         ; A = (STATUS)          ' 13    |
1169   0995 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1170   0998 36 2B                   LD      (HL), $2B           ; register = DAC enable ' 10    | 54 (90)
1171   099A 2C                      INC     L                   ; HL point on YM port1  ' 4     |
1172   099B E6 0F                   AND     $0F                 ; PCM is playing ?      ' 7     |
1173   099D C2 B0 09                JP      NZ, .still_pcm      ;                       ' 10    |
1174   09A0             
1175   09A0 3A 61 01                LD      A, (YM_2B_CNT)      ;                       ' 13    |
1176   09A3 B7                      OR      A                   ;                       ' 4     | 27 (117)
1177   09A4 CA C1 09                JP      Z, .no_pcm          ; DAC enabled expired ? ' 10    |
1178   09A7             
1179   09A7 3D                      DEC     A                   ; decrement expiration  ' 4     |
1180   09A8 32 61 01                LD      (YM_2B_CNT), A      ;                       ' 13    |
1181   09AB 3E 80                   LD      A, $80              ; DAC enabled           ' 7     | 34 (151)
1182   09AD C3 C8 09                JP      .set_dac            ; assume still PCM      ' 10    |
1183   09B0             
1184   09B0             .still_pcm                              ;                       ' 90
1185   09B0                         wait7                       ; sync                  ' 7     |
1185   09B0 F6 00       >            OR      $0
1186   09B2 3E 03                   LD      A, 3                ; set DAC ON expiration ' 7     | 27 (117)
1187   09B4 32 61 01                LD      (YM_2B_CNT), A      ; 4 frames to expire    ' 13    |
1188   09B7             
1189   09B7                         wait17                      ; sync                  ' 17    |
1189   09B7 C3 BA 09    >            JP      .go
1189   09BA F6 00       >            OR      $0
1190   09BC 3E 80                   LD      A, $80              ; DAC enabled           ' 7     | 34 (151)
1191   09BE C3 C8 09                JP      .set_dac            ; assume still PCM      ' 10    |
1192   09C1             
1193   09C1             .no_pcm                                 ;                       ' 117
1194   09C1                         wait21                      ; sync                  ' 21    |
1194   09C1 18 00       >            JR      .go
1194   09C3 ED 4F       >            LD      R, A
1195   09C5 3A 60 01                LD      A, (YM_2B_SAV)      ; use current DAC on    ' 13    | 34 (151)
1196   09C8             
1197   09C8             .set_dac                                ;                       ' 151
1198   09C8 77                      LD      (HL), A             ; set DAC enabled       ' 7     |
1199   09C9 2D                      DEC     L                   ; HL point on YM port0  ' 4     | 11 (162)
1200   09CA             
1201   09CA D9                      EXX                         ;                       ' 4     |
1202   09CB 78                      LD      A, B                ; A = read buffer high  ' 4     |
1203   09CC 32 3B 01                LD      (READBUF+1), A      ; save current read buf ' 13    | 25 (187)
1204   09CF D9                      EXX                         ;                       ' 4     |
1205   09D0             
1206   09D0 BA                      CP      D                   ; prepare DAC write     ' 4     |
1207   09D1 36 2A                   LD      (HL), 0x2A          ; write buf == read buf ' 10    | 24 (211)
1208   09D3 CA E0 09                JP      Z, .continu_pcm     ; continu to fill pcm   ' 10    |
1209   09D6             
1210   09D6 14                      INC     D                   ; inc write addr        ' 4     |
1211   09D7 CB 92                   RES     2, D                ; write addr &= 0x03FF  ' 8     | 42 (254-1)
1212   09D9 ED 53 38 01             LD      (WRITEBUF), DE      ; save new write addr   ' 20    |
1213   09DD C3 EA 09                JP      sync_frame          ;                       ' 10    |
1214   09E0             
1215   09E0             .continu_pcm
1216   09E0 14                      INC     D                   ; inc write addr        ' 4     |
1217   09E1 CB 92                   RES     2, D                ; write addr &= 0x03FF  ' 8     | 42 (254-1)
1218   09E3 ED 53 38 01             LD      (WRITEBUF), DE      ; save new write addr   ' 20    |
1219   09E7 C3 19 05                JP      pcm_mix             ; do pcm mix again      ' 10    |
1220   09EA             
1221   09EA             ; sync
1222   09EA             ; ----
1223   09EA             
1224   09EA             ; $BB+X
1225   09EA             sync_frame                              ; DE point on write buf
1226   09EA             
1227   09EA             ;    LD  A, (VCOUNTER)
1228   09EA             ;    LD  (DEBUG_6), A
1229   09EA             
1230   09EA             sync_frame_loop
1231   09EA                         sampleOutput                ;                       ' 36    | (36)
1231   09EA D9          >            EXX                     ;                           ' 4     | 4
1231   09EB 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1231   09EC 03          >            INC     BC              ; increment read address    ' 6     |
1231   09ED CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1231   09EF 12          >            LD      (DE), A         ; play sample               ' 7     |
1231   09F0 D9          >            EXX                     ;                           ' 4     | (36)
1232   09F1             
1233   09F1                         wait62                      ; sync                  ' 62    | (98)
1233   09F1 3E 03       >            LD      A, w            ; 7-2
1233   09F3 3D          >            DEC     A               ; 4
1233   09F4 20 FD       >            JR      NZ, .loop       ; 12
1233   09F6 18 00       >            JR      .go
1234   09F8             
1235   09F8 2A 80 01                LD      HL, (IDLE_LOOP)     ;                       ' 16    |
1236   09FB 23                      INC     HL                  ; increment idle loop   ' 6     | 38 (136)
1237   09FC 22 80 01                LD      (IDLE_LOOP), HL     ;                       ' 16    |
1238   09FF             
1239   09FF 3A 13 01                LD      A, (PENDING_FRM)    ; A = frame to process  ' 13    |
1240   0A02 B7                      OR      A                   ; something to do ?     ' 4     | 27 (163)
1241   0A03 C2 2E 0A                JP      NZ, .do_xgm         ; do the XGM frame      ' 10    |
1242   0A06             
1243   0A06 3A 11 01                LD      A, (PROTECT_ARG)    ; get BUS protect state ' 13    |
1244   0A09 B7                      OR      A                   ; protecting ?          ' 4     | 27 (190)
1245   0A0A C2 1E 0A                JP      NZ, .wait_dma       ; wait for it           ' 10    |
1246   0A0D             
1247   0A0D D9                      EXX                         ;                       ' 4     |
1248   0A0E 78                      LD      A, B                ; A = read buffer high  ' 4     |
1249   0A0F 32 3B 01                LD      (READBUF+1), A      ; save current read buf ' 13    | 25 (215)
1250   0A12 D9                      EXX                         ;                       ' 4     |
1251   0A13             
1252   0A13 C6 01                   ADD     $1                  ;                       ' 7     |
1253   0A15 CB 97                   RES     2, A                ; read pos &= 0x03FF    ' 8     |
1254   0A17 BA                      CP      D                   ; pcm buffer empty ?    ' 4     | 29 (244)
1255   0A18 CA 2B 0A                JP      Z, .do_pcm          ; fill pcm              ' 10    |
1256   0A1B             
1257   0A1B C3 EA 09                JP      sync_frame_loop     ; wait for a frame      ' 10    | (254)
1258   0A1E             
1259   0A1E             .wait_dma                               ;                       ' 190
1260   0A1E 2A 82 01                LD      HL, (WAIT_LOOP)     ;                       ' 16    |
1261   0A21 23                      INC     HL                  ; increment wait loop   ' 6     | 38 (228)
1262   0A22 22 82 01                LD      (WAIT_LOOP), HL     ;                       ' 16    |
1263   0A25             
1264   0A25                         wait16                      ; sync                  ' 16    |
1264   0A25 18 00       >            JR      .go
1264   0A27 00          >            NOP
1265   0A28 C3 EA 09                JP      sync_frame          ; wait for a frame      ' 10    | 26 (254)
1266   0A2B             
1267   0A2B             .do_pcm                                 ;                       ' 244
1268   0A2B C3 19 05                JP      pcm_mix             ; do pcm mix again      ' 10    | (254)
1269   0A2E             
1270   0A2E             .do_xgm                                 ;                       ' 163
1271   0A2E                         wait81                      ; sync                  ' 81    |
1271   0A2E 3E 04       >            LD      A, w            ; 7-2
1271   0A30 3D          >            DEC     A               ; 4
1271   0A31 20 FD       >            JR      NZ, .loop       ; 12
1271   0A33 00          >            NOP
1271   0A34 00          >            NOP
1271   0A35 F6 00       >            OR      $0
1272   0A37 11 00 17                LD      DE, XGM_BUFFER      ; DE point to XGM buf   ' 10    | 91 (254)
1273   0A3A             
1274   0A3A             
1275   0A3A             ;    LD  A, (VCOUNTER)
1276   0A3A             ;    LD  (DEBUG_7), A
1277   0A3A             
1278   0A3A             ; execute XGM command
1279   0A3A             ; -------------------
1280   0A3A             
1281   0A3A             ; $BC+X+Y
1282   0A3A             execute_xgm
1283   0A3A                         sampleOutput                ;                       ' 36    | (36)
1283   0A3A D9          >            EXX                     ;                           ' 4     | 4
1283   0A3B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1283   0A3C 03          >            INC     BC              ; increment read address    ' 6     |
1283   0A3D CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1283   0A3F 12          >            LD      (DE), A         ; play sample               ' 7     |
1283   0A40 D9          >            EXX                     ;                           ' 4     | (36)
1284   0A41             
1285   0A41 1A                      LD      A, (DE)             ; A = command           ' 7     |
1286   0A42 32 47 0A                LD      (.ld_hl_xx + 1), A  ; set jump address      ' 13    |
1287   0A45 1C                      INC     E                   ; next command          ' 4     | 44 (80)
1288   0A46             .ld_hl_xx                               ;                       '       |
1289   0A46 2A 00 16                LD      HL, (JUMP_TABLE)    ; LD HL, (jt)           ' 16    |
1290   0A49 E9                      JP      (HL)                ;                       ' 4     |
1291   0A4A             
1292   0A4A             
1293   0A4A             ; next frame command
1294   0A4A             ; ------------------
1295   0A4A             
1296   0A4A             com_next_frame                          ; 00                    ' 80
1297   0A4A C3 4B 12                JP      xgm_done            ; XGM frame done        ' 10    | (90)
1298   0A4D             
1299   0A4D             
1300   0A4D             ; PSG command
1301   0A4D             ; -----------
1302   0A4D             
1303   0A4D             com_psg_tone_w0                         ; 10                    ' 80
1304   0A4D                         wait126                     ; sync                  ' 126   |
1304   0A4D 3E 07       >            LD      A, w            ; 7-2
1304   0A4F 3D          >            DEC     A               ; 4
1304   0A50 20 FD       >            JR      NZ, .loop       ; 12
1304   0A52 18 00       >            JR      .go
1305   0A54 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 146 (226)
1306   0A57 C3 C4 0A                JP      psg_tone_write0     ;                       ' 10    |
1307   0A5A             
1308   0A5A             com_psg_tone_w1                         ; 11                    ' 80
1309   0A5A                         wait108                     ; sync                  ' 108   |
1309   0A5A 3E 06       >            LD      A, w            ; 7-2
1309   0A5C 3D          >            DEC     A               ; 4
1309   0A5D 20 FD       >            JR      NZ, .loop       ; 12
1309   0A5F C3 62 0A    >            JP      .go
1310   0A62 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 128 (208)
1311   0A65 C3 C1 0A                JP      psg_tone_write1     ;                       ' 10    |
1312   0A68             
1313   0A68             com_psg_tone_w2                         ; 12                    ' 80
1314   0A68                         wait90                      ; sync                  ' 90    |
1314   0A68 3E 05       >            LD      A, w            ; 7-2
1314   0A6A 3D          >            DEC     A               ; 4
1314   0A6B 20 FD       >            JR      NZ, .loop       ; 12
1314   0A6D 00          >            NOP
1314   0A6E 00          >            NOP
1315   0A6F 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 110 (190)
1316   0A72 C3 BE 0A                JP      psg_tone_write2     ;                       ' 10    |
1317   0A75             
1318   0A75             com_psg_tone_w3                         ; 13                    ' 80
1319   0A75                         wait72                      ; sync                  ' 72    |
1319   0A75 3E 03       >            LD      A, w            ; 7-2
1319   0A77 3D          >            DEC     A               ; 4
1319   0A78 20 FD       >            JR      NZ, .loop       ; 12
1319   0A7A ED 4F       >            LD      R, A
1319   0A7C ED 4F       >            LD      R, A
1319   0A7E 00          >            NOP
1320   0A7F 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 92 (172)
1321   0A82 C3 BB 0A                JP      psg_tone_write3     ;                       ' 10    |
1322   0A85             
1323   0A85             com_psg_tone_w4                         ; 14                    ' 80
1324   0A85                         wait54                      ; sync                  ' 54    |
1324   0A85 3E 03       >            LD      A, w            ; 7-2
1324   0A87 3D          >            DEC     A               ; 4
1324   0A88 20 FD       >            JR      NZ, .loop       ; 12
1324   0A8A 00          >            NOP
1325   0A8B 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 74 (154)
1326   0A8E C3 B8 0A                JP      psg_tone_write4     ;                       ' 10    |
1327   0A91             
1328   0A91             com_psg_tone_w5                         ; 15                    ' 80
1329   0A91                         wait36                      ; sync                  ' 36    |
1329   0A91 ED 4F       >            LD      R, A
1329   0A93 ED 4F       >            LD      R, A
1329   0A95 ED 4F       >            LD      R, A
1329   0A97 ED 4F       >            LD      R, A
1330   0A99 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 56 (136)
1331   0A9C C3 B5 0A                JP      psg_tone_write5     ;                       ' 10    |
1332   0A9F             
1333   0A9F             com_psg_tone_w6                         ; 16                    ' 80
1334   0A9F                         wait18                      ; sync                  ' 18    |
1334   0A9F ED 4F       >            LD      R, A
1334   0AA1 ED 4F       >            LD      R, A
1335   0AA3 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 38 (118)
1336   0AA6 C3 B2 0A                JP      psg_tone_write6     ;                       ' 10    |
1337   0AA9             
1338   0AA9             com_psg_tone_w7                         ; 17                    ' 80
1339   0AA9 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 20 (100)
1340   0AAC C3 AF 0A                JP      psg_tone_write7     ;                       ' 10    |
1341   0AAF             
1342   0AAF             
1343   0AAF             psg_tone_write7                         ;                       ' 100
1344   0AAF 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1345   0AB0 1C                      INC     E                   ; next data             ' 4     | 18 (118)
1346   0AB1 77                      LD      (HL), A             ; write to PSG          ' 7     |
1347   0AB2             
1348   0AB2             psg_tone_write6
1349   0AB2 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1350   0AB3 1C                      INC     E                   ; next data             ' 4     | 18 (136)
1351   0AB4 77                      LD      (HL), A             ; write to PSG          ' 7     |
1352   0AB5             
1353   0AB5             psg_tone_write5
1354   0AB5 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1355   0AB6 1C                      INC     E                   ; next data             ' 4     | 18 (154)
1356   0AB7 77                      LD      (HL), A             ; write to PSG          ' 7     |
1357   0AB8             
1358   0AB8             psg_tone_write4
1359   0AB8 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1360   0AB9 1C                      INC     E                   ; next data             ' 4     | 18 (172)
1361   0ABA 77                      LD      (HL), A             ; write to PSG          ' 7     |
1362   0ABB             
1363   0ABB             psg_tone_write3
1364   0ABB 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1365   0ABC 1C                      INC     E                   ; next data             ' 4     | 18 (190)
1366   0ABD 77                      LD      (HL), A             ; write to PSG          ' 7     |
1367   0ABE             
1368   0ABE             psg_tone_write2
1369   0ABE 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1370   0ABF 1C                      INC     E                   ; next data             ' 4     | 18 (208)
1371   0AC0 77                      LD      (HL), A             ; write to PSG          ' 7     |
1372   0AC1             
1373   0AC1             psg_tone_write1
1374   0AC1 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1375   0AC2 1C                      INC     E                   ; next data             ' 4     | 18 (226)
1376   0AC3 77                      LD      (HL), A             ; write to PSG          ' 7     |
1377   0AC4             
1378   0AC4             psg_tone_write0
1379   0AC4 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1380   0AC5 1C                      INC     E                   ; next data             ' 4     | 18 (244)
1381   0AC6 77                      LD      (HL), A             ; write to PSG          ' 7     |
1382   0AC7             
1383   0AC7 C3 3A 0A                JP      execute_xgm         ;                       ' 10    | (254)
1384   0ACA             
1385   0ACA             
1386   0ACA             com_psg_env_w0                          ; 18                    ' 80
1387   0ACA                         wait72                      ; sync                  ' 72    |
1387   0ACA 3E 03       >            LD      A, w            ; 7-2
1387   0ACC 3D          >            DEC     A               ; 4
1387   0ACD 20 FD       >            JR      NZ, .loop       ; 12
1387   0ACF ED 4F       >            LD      R, A
1387   0AD1 ED 4F       >            LD      R, A
1387   0AD3 00          >            NOP
1388   0AD4 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 102 (182)
1389   0AD7 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1390   0ADA C3 3E 0B                JP      psg_env_write0      ;                       ' 10    |
1391   0ADD             
1392   0ADD             com_psg_env_w1                          ; 18                    ' 80
1393   0ADD                         wait10                      ; sync                  ' 10    |
1393   0ADD C3 E0 0A    >            JP      .go
1394   0AE0 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 40 (120)
1395   0AE3 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1396   0AE6 C3 31 0B                JP      psg_env_write1      ;                       ' 10    |
1397   0AE9             
1398   0AE9             com_psg_env_w2                          ; 18                    ' 80
1399   0AE9                         wait154                     ; sync                  ' 154   |
1399   0AE9 3E 09       >            LD      A, w            ; 7-2
1399   0AEB 3D          >            DEC     A               ; 4
1399   0AEC 20 FD       >            JR      NZ, .loop       ; 12
1399   0AEE 00          >            NOP
1399   0AEF 00          >            NOP
1400   0AF0 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 174 (254)
1401   0AF3 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1402   0AF6             
1403   0AF6                         sampleOutput                ;                       ' 36    | (36)
1403   0AF6 D9          >            EXX                     ;                           ' 4     | 4
1403   0AF7 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1403   0AF8 03          >            INC     BC              ; increment read address    ' 6     |
1403   0AF9 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1403   0AFB 12          >            LD      (DE), A         ; play sample               ' 7     |
1403   0AFC D9          >            EXX                     ;                           ' 4     | (36)
1404   0AFD             
1405   0AFD                         wait12                      ; sync                  ' 12    |
1405   0AFD 18 00       >            JR      .go
1406   0AFF C3 24 0B                JP      psg_env_write2      ;                       ' 10    | 22 (58)
1407   0B02             
1408   0B02             com_psg_env_w3                          ; 18                    ' 80
1409   0B02                         wait110                     ; sync                  ' 110   |
1409   0B02 3E 06       >            LD      A, w            ; 7-2
1409   0B04 3D          >            DEC     A               ; 4
1409   0B05 20 FD       >            JR      NZ, .loop       ; 12
1409   0B07 18 00       >            JR      .go
1410   0B09 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 130 (210)
1411   0B0C 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1412   0B0F             
1413   0B0F             psg_env_write3
1414   0B0F 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1415   0B10 07                      RLCA                        ;                       ' 4     |
1416   0B11 07                      RLCA                        ;                       ' 4     |
1417   0B12 07                      RLCA                        ;                       ' 4     |
1418   0B13 E6 03                   AND     $3                  ; A = channel number    ' 7     | 41 (254-3)
1419   0B15 C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     |
1420   0B17 4F                      LD      C, A                ; BC point on save      ' 4     |
1421   0B18                         wait4                       ; sync                  ' 4     |
1421   0B18 00          >            NOP
1422   0B19             
1423   0B19                         sampleOutput                ;                       ' 36    | (36-3)
1423   0B19 D9          >            EXX                     ;                           ' 4     | 4
1423   0B1A 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1423   0B1B 03          >            INC     BC              ; increment read address    ' 6     |
1423   0B1C CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1423   0B1E 12          >            LD      (DE), A         ; play sample               ' 7     |
1423   0B1F D9          >            EXX                     ;                           ' 4     | (36)
1424   0B20             
1425   0B20 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1426   0B21 1C                      INC     E                   ; next data             ' 4     | 25 (58)
1427   0B22 77                      LD      (HL), A             ; write to PSG          ' 7     |
1428   0B23 02                      LD      (BC), A             ; write to save         ' 7     |
1429   0B24             
1430   0B24             psg_env_write2                          ;                       ' 58
1431   0B24 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1432   0B25 07                      RLCA                        ;                       ' 4     |
1433   0B26 07                      RLCA                        ;                       ' 4     |
1434   0B27 07                      RLCA                        ;                       ' 4     |
1435   0B28 E6 03                   AND     $3                  ; A = channel number    ' 7     |
1436   0B2A C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     | 62 (120)
1437   0B2C 4F                      LD      C, A                ; BC point on save      ' 4     |
1438   0B2D 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1439   0B2E 1C                      INC     E                   ; next data             ' 4     |
1440   0B2F 77                      LD      (HL), A             ; write to PSG          ' 7     |
1441   0B30 02                      LD      (BC), A             ; write to save         ' 7     |
1442   0B31             
1443   0B31             psg_env_write1
1444   0B31 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1445   0B32 07                      RLCA                        ;                       ' 4     |
1446   0B33 07                      RLCA                        ;                       ' 4     |
1447   0B34 07                      RLCA                        ;                       ' 4     |
1448   0B35 E6 03                   AND     $3                  ; A = channel number    ' 7     |
1449   0B37 C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     | 62 (182)
1450   0B39 4F                      LD      C, A                ; BC point on save      ' 4     |
1451   0B3A 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1452   0B3B 1C                      INC     E                   ; next data             ' 4     |
1453   0B3C 77                      LD      (HL), A             ; write to PSG          ' 7     |
1454   0B3D 02                      LD      (BC), A             ; write to save         ' 7     |
1455   0B3E             
1456   0B3E             psg_env_write0
1457   0B3E 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1458   0B3F 07                      RLCA                        ;                       ' 4     |
1459   0B40 07                      RLCA                        ;                       ' 4     |
1460   0B41 07                      RLCA                        ;                       ' 4     |
1461   0B42 E6 03                   AND     $3                  ; A = channel number    ' 7     |
1462   0B44 C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     | 62 (244)
1463   0B46 4F                      LD      C, A                ; BC point on save      ' 4     |
1464   0B47 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1465   0B48 1C                      INC     E                   ; next data             ' 4     |
1466   0B49 77                      LD      (HL), A             ; write to PSG          ' 7     |
1467   0B4A 02                      LD      (BC), A             ; write to save         ' 7     |
1468   0B4B             
1469   0B4B C3 3A 0A                JP      execute_xgm         ;                       ' 10    | (254)
1470   0B4E             
1471   0B4E             
1472   0B4E             ; YM port0 command
1473   0B4E             ; ----------------
1474   0B4E             
1475   0B4E             com_ym_port0_w0                         ; 20                    ' 80
1476   0B4E                         wait36                      ; sync                  ' 36    |
1476   0B4E ED 4F       >            LD      R, A
1476   0B50 ED 4F       >            LD      R, A
1476   0B52 ED 4F       >            LD      R, A
1476   0B54 ED 4F       >            LD      R, A
1477   0B56 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 66 (146)
1478   0B59 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1479   0B5C C3 4E 0D                JP      ym_port_write0      ;                       ' 10    |
1480   0B5F             
1481   0B5F             com_ym_port0_w1                         ; 21                    ' 80
1482   0B5F 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1483   0B62 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    | 30 (110)
1484   0B65 C3 48 0D                JP      ym_port_write1      ;                       ' 10    |
1485   0B68             
1486   0B68             com_ym_port0_w2                         ; 22                    ' 80
1487   0B68                         wait52                      ; sync                  ' 52    |
1487   0B68 3E 02       >            LD      A, w            ; 7-2
1487   0B6A 3D          >            DEC     A               ; 4
1487   0B6B 20 FD       >            JR      NZ, .loop       ; 12
1487   0B6D ED 4F       >            LD      R, A
1487   0B6F ED 4F       >            LD      R, A
1488   0B71 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1489   0B74 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1490   0B77 C3 45 0E                JP      ym_port_write2      ;                       ' 10    |
1491   0B7A             
1492   0B7A             com_ym_port0_w3                         ; 23                    ' 80
1493   0B7A 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1494   0B7D 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1495   0B7F 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1496   0B80 C3 24 0D                JP      com_ym_port_w3      ; execute               ' 10    |
1497   0B83             
1498   0B83             com_ym_port0_w4                         ; 24                    ' 80
1499   0B83                         wait144                     ; sync                  ' 144   |
1499   0B83 3E 08       >            LD      A, w            ; 7-2
1499   0B85 3D          >            DEC     A               ; 4
1499   0B86 20 FD       >            JR      NZ, .loop       ; 12
1499   0B88 F6 00       >            OR      $0
1499   0B8A F6 00       >            OR      $0
1500   0B8C 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 178 (254+4)
1501   0B8F 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1502   0B92 D9                      EXX                         ;                       ' 4     |
1503   0B93 C3 23 0E                JP      ym_port_write4      ;                       ' 10    |
1504   0B96             
1505   0B96             com_ym_port0_w5                         ; 25                    ' 80
1506   0B96                         wait52                      ; sync                  ' 52    |
1506   0B96 3E 02       >            LD      A, w            ; 7-2
1506   0B98 3D          >            DEC     A               ; 4
1506   0B99 20 FD       >            JR      NZ, .loop       ; 12
1506   0B9B ED 4F       >            LD      R, A
1506   0B9D ED 4F       >            LD      R, A
1507   0B9F 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1508   0BA2 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1509   0BA5 C3 10 0E                JP      ym_port_write5      ;                       ' 10    |
1510   0BA8             
1511   0BA8             com_ym_port0_w6                         ; 26                    ' 80
1512   0BA8 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1513   0BAB 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1514   0BAD 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1515   0BAE C3 2D 0D                JP      com_ym_port_w6      ; execute               ' 10    |
1516   0BB1             
1517   0BB1             com_ym_port0_w7                         ; 27                    ' 80
1518   0BB1                         wait144                     ; sync                  ' 144   |
1518   0BB1 3E 08       >            LD      A, w            ; 7-2
1518   0BB3 3D          >            DEC     A               ; 4
1518   0BB4 20 FD       >            JR      NZ, .loop       ; 12
1518   0BB6 F6 00       >            OR      $0
1518   0BB8 F6 00       >            OR      $0
1519   0BBA 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 178 (254+4)
1520   0BBD 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1521   0BC0 D9                      EXX                         ;                       ' 4     |
1522   0BC1 C3 EE 0D                JP      ym_port_write7      ;                       ' 10    |
1523   0BC4             
1524   0BC4             com_ym_port0_w8                         ; 28                    ' 80
1525   0BC4                         wait52                      ; sync                  ' 52    |
1525   0BC4 3E 02       >            LD      A, w            ; 7-2
1525   0BC6 3D          >            DEC     A               ; 4
1525   0BC7 20 FD       >            JR      NZ, .loop       ; 12
1525   0BC9 ED 4F       >            LD      R, A
1525   0BCB ED 4F       >            LD      R, A
1526   0BCD 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1527   0BD0 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1528   0BD3 C3 DB 0D                JP      ym_port_write8      ;                       ' 10    |
1529   0BD6             
1530   0BD6             com_ym_port0_w9                         ; 29                    ' 80
1531   0BD6 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1532   0BD9 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1533   0BDB 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1534   0BDC C3 36 0D                JP      com_ym_port_w9      ; execute               ' 10    |
1535   0BDF             
1536   0BDF             com_ym_port0_wA                         ; 2A                    ' 80
1537   0BDF                         wait144                     ; sync                  ' 144   |
1537   0BDF 3E 08       >            LD      A, w            ; 7-2
1537   0BE1 3D          >            DEC     A               ; 4
1537   0BE2 20 FD       >            JR      NZ, .loop       ; 12
1537   0BE4 F6 00       >            OR      $0
1537   0BE6 F6 00       >            OR      $0
1538   0BE8 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 178 (254+4)
1539   0BEB 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1540   0BEE D9                      EXX                         ;                       ' 4     |
1541   0BEF C3 B9 0D                JP      ym_port_writeA      ;                       ' 10    |
1542   0BF2             
1543   0BF2             com_ym_port0_wB                         ; 2B                    ' 80
1544   0BF2                         wait52                      ; sync                  ' 52    |
1544   0BF2 3E 02       >            LD      A, w            ; 7-2
1544   0BF4 3D          >            DEC     A               ; 4
1544   0BF5 20 FD       >            JR      NZ, .loop       ; 12
1544   0BF7 ED 4F       >            LD      R, A
1544   0BF9 ED 4F       >            LD      R, A
1545   0BFB 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1546   0BFE 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1547   0C01 C3 A6 0D                JP      ym_port_writeB      ;                       ' 10    |
1548   0C04             
1549   0C04             com_ym_port0_wC                         ; 2C                    ' 80
1550   0C04 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1551   0C07 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1552   0C09 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1553   0C0A C3 3F 0D                JP      com_ym_port_wC      ; execute               ' 10    |
1554   0C0D             
1555   0C0D             com_ym_port0_wD                         ; 2D                    ' 80
1556   0C0D                         wait144                     ; sync                  ' 144   |
1556   0C0D 3E 08       >            LD      A, w            ; 7-2
1556   0C0F 3D          >            DEC     A               ; 4
1556   0C10 20 FD       >            JR      NZ, .loop       ; 12
1556   0C12 F6 00       >            OR      $0
1556   0C14 F6 00       >            OR      $0
1557   0C16 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 174 (254)
1558   0C19 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1559   0C1C C3 83 0D                JP      ym_port_writeD      ;                       ' 10    |
1560   0C1F             
1561   0C1F             com_ym_port0_wE                         ; 2E                    ' 80
1562   0C1F                         wait36                      ; sync                  ' 36    |
1562   0C1F ED 4F       >            LD      R, A
1562   0C21 ED 4F       >            LD      R, A
1562   0C23 ED 4F       >            LD      R, A
1562   0C25 ED 4F       >            LD      R, A
1563   0C27 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 66 (146)
1564   0C2A 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1565   0C2D C3 6D 0D                JP      ym_port_writeE      ;                       ' 10    |
1566   0C30             
1567   0C30             com_ym_port0_wF                         ; 2F                    ' 80
1568   0C30 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1569   0C33 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    | 30 (110)
1570   0C36 C3 67 0D                JP      ym_port_writeF      ;                       ' 10    |
1571   0C39             
1572   0C39             
1573   0C39             ; YM port2 command
1574   0C39             ; ----------------
1575   0C39             
1576   0C39             com_ym_port2_w0                         ; 30                    ' 80
1577   0C39                         wait36                      ; sync                  ' 36    |
1577   0C39 ED 4F       >            LD      R, A
1577   0C3B ED 4F       >            LD      R, A
1577   0C3D ED 4F       >            LD      R, A
1577   0C3F ED 4F       >            LD      R, A
1578   0C41 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 66 (146)
1579   0C44 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1580   0C47 C3 4E 0D                JP      ym_port_write0      ;                       ' 10    |
1581   0C4A             
1582   0C4A             com_ym_port2_w1                         ; 31                    ' 80
1583   0C4A 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1584   0C4D 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    | 30 (110)
1585   0C50 C3 48 0D                JP      ym_port_write1      ;                       ' 10    |
1586   0C53             
1587   0C53             com_ym_port2_w2                         ; 32                    ' 80
1588   0C53                         wait52                      ; sync                  ' 52    |
1588   0C53 3E 02       >            LD      A, w            ; 7-2
1588   0C55 3D          >            DEC     A               ; 4
1588   0C56 20 FD       >            JR      NZ, .loop       ; 12
1588   0C58 ED 4F       >            LD      R, A
1588   0C5A ED 4F       >            LD      R, A
1589   0C5C 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1590   0C5F 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1591   0C62 C3 45 0E                JP      ym_port_write2      ;                       ' 10    |
1592   0C65             
1593   0C65             com_ym_port2_w3                         ; 33                    ' 80
1594   0C65 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1595   0C68 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1596   0C6A 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1597   0C6B C3 24 0D                JP      com_ym_port_w3      ; execute               ' 10    |
1598   0C6E             
1599   0C6E             com_ym_port2_w4                         ; 34                    ' 80
1600   0C6E                         wait144                     ; sync                  ' 144   |
1600   0C6E 3E 08       >            LD      A, w            ; 7-2
1600   0C70 3D          >            DEC     A               ; 4
1600   0C71 20 FD       >            JR      NZ, .loop       ; 12
1600   0C73 F6 00       >            OR      $0
1600   0C75 F6 00       >            OR      $0
1601   0C77 21 02 40                LD      HL, YMPORT2         ; HL point on YM port0  ' 10    | 178 (254+4)
1602   0C7A 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1603   0C7D D9                      EXX                         ;                       ' 4     |
1604   0C7E C3 23 0E                JP      ym_port_write4      ;                       ' 10    |
1605   0C81             
1606   0C81             com_ym_port2_w5                         ; 35                    ' 80
1607   0C81                         wait52                      ; sync                  ' 52    |
1607   0C81 3E 02       >            LD      A, w            ; 7-2
1607   0C83 3D          >            DEC     A               ; 4
1607   0C84 20 FD       >            JR      NZ, .loop       ; 12
1607   0C86 ED 4F       >            LD      R, A
1607   0C88 ED 4F       >            LD      R, A
1608   0C8A 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1609   0C8D 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1610   0C90 C3 10 0E                JP      ym_port_write5      ;                       ' 10    |
1611   0C93             
1612   0C93             com_ym_port2_w6                         ; 36                    ' 80
1613   0C93 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1614   0C96 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1615   0C98 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1616   0C99 C3 2D 0D                JP      com_ym_port_w6      ; execute               ' 10    |
1617   0C9C             
1618   0C9C             com_ym_port2_w7                         ; 37                    ' 80
1619   0C9C                         wait144                     ; sync                  ' 144   |
1619   0C9C 3E 08       >            LD      A, w            ; 7-2
1619   0C9E 3D          >            DEC     A               ; 4
1619   0C9F 20 FD       >            JR      NZ, .loop       ; 12
1619   0CA1 F6 00       >            OR      $0
1619   0CA3 F6 00       >            OR      $0
1620   0CA5 21 02 40                LD      HL, YMPORT2         ; HL point on YM port0  ' 10    | 178 (254+4)
1621   0CA8 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1622   0CAB D9                      EXX                         ;                       ' 4     |
1623   0CAC C3 EE 0D                JP      ym_port_write7      ;                       ' 10    |
1624   0CAF             
1625   0CAF             com_ym_port2_w8                         ; 38                    ' 80
1626   0CAF                         wait52                      ; sync                  ' 52    |
1626   0CAF 3E 02       >            LD      A, w            ; 7-2
1626   0CB1 3D          >            DEC     A               ; 4
1626   0CB2 20 FD       >            JR      NZ, .loop       ; 12
1626   0CB4 ED 4F       >            LD      R, A
1626   0CB6 ED 4F       >            LD      R, A
1627   0CB8 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1628   0CBB 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1629   0CBE C3 DB 0D                JP      ym_port_write8      ;                       ' 10    |
1630   0CC1             
1631   0CC1             com_ym_port2_w9                         ; 39                    ' 80
1632   0CC1 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1633   0CC4 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1634   0CC6 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1635   0CC7 C3 36 0D                JP      com_ym_port_w9      ; execute               ' 10    |
1636   0CCA             
1637   0CCA             com_ym_port2_wA                         ; 3A                    ' 80
1638   0CCA                         wait144                     ; sync                  ' 144   |
1638   0CCA 3E 08       >            LD      A, w            ; 7-2
1638   0CCC 3D          >            DEC     A               ; 4
1638   0CCD 20 FD       >            JR      NZ, .loop       ; 12
1638   0CCF F6 00       >            OR      $0
1638   0CD1 F6 00       >            OR      $0
1639   0CD3 21 02 40                LD      HL, YMPORT2         ; HL point on YM port0  ' 10    | 178 (254+4)
1640   0CD6 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1641   0CD9 D9                      EXX                         ;                       ' 4     |
1642   0CDA C3 B9 0D                JP      ym_port_writeA      ;                       ' 10    |
1643   0CDD             
1644   0CDD             com_ym_port2_wB                         ; 3B                    ' 80
1645   0CDD                         wait52                      ; sync                  ' 52    |
1645   0CDD 3E 02       >            LD      A, w            ; 7-2
1645   0CDF 3D          >            DEC     A               ; 4
1645   0CE0 20 FD       >            JR      NZ, .loop       ; 12
1645   0CE2 ED 4F       >            LD      R, A
1645   0CE4 ED 4F       >            LD      R, A
1646   0CE6 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1647   0CE9 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1648   0CEC C3 A6 0D                JP      ym_port_writeB      ;                       ' 10    |
1649   0CEF             
1650   0CEF             com_ym_port2_wC                         ; 3C                    ' 80
1651   0CEF 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1652   0CF2 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1653   0CF4 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1654   0CF5 C3 3F 0D                JP      com_ym_port_wC      ; execute               ' 10    |
1655   0CF8             
1656   0CF8             com_ym_port2_wD                         ; 3D                    ' 80
1657   0CF8                         wait144                     ; sync                  ' 144   |
1657   0CF8 3E 08       >            LD      A, w            ; 7-2
1657   0CFA 3D          >            DEC     A               ; 4
1657   0CFB 20 FD       >            JR      NZ, .loop       ; 12
1657   0CFD F6 00       >            OR      $0
1657   0CFF F6 00       >            OR      $0
1658   0D01 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 174 (254)
1659   0D04 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1660   0D07 C3 83 0D                JP      ym_port_writeD      ;                       ' 10    |
1661   0D0A             
1662   0D0A             com_ym_port2_wE                         ; 3E                    ' 80
1663   0D0A                         wait36                      ; sync                  ' 36    |
1663   0D0A ED 4F       >            LD      R, A
1663   0D0C ED 4F       >            LD      R, A
1663   0D0E ED 4F       >            LD      R, A
1663   0D10 ED 4F       >            LD      R, A
1664   0D12 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 66 (146)
1665   0D15 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1666   0D18 C3 6D 0D                JP      ym_port_writeE      ;                       ' 10    |
1667   0D1B             
1668   0D1B             com_ym_port2_wF                         ; 3F                    ' 80
1669   0D1B 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1670   0D1E 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    | 30 (110)
1671   0D21 C3 67 0D                JP      ym_port_writeF      ;                       ' 10    |
1672   0D24             
1673   0D24             
1674   0D24             com_ym_port_w3                          ;                       ' 116
1675   0D24 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1676   0D25 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1677   0D26 1C                      INC     E                   ; next data             ' 4     |
1678   0D27 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1679   0D28 1C                      INC     E                   ; next data             ' 4     |
1680   0D29 02                      LD      (BC), A             ; write data to YM      ' 7     |
1681   0D2A C3 45 0E                JP      ym_port_write2      ;                       ' 10    | (162)
1682   0D2D             
1683   0D2D             com_ym_port_w6                          ;                       ' 116
1684   0D2D 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1685   0D2E 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1686   0D2F 1C                      INC     E                   ; next data             ' 4     |
1687   0D30 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1688   0D31 1C                      INC     E                   ; next data             ' 4     |
1689   0D32 02                      LD      (BC), A             ; write data to YM      ' 7     |
1690   0D33 C3 10 0E                JP      ym_port_write5      ;                       ' 10    | (162)
1691   0D36             
1692   0D36             com_ym_port_w9                          ;                       ' 116
1693   0D36 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1694   0D37 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1695   0D38 1C                      INC     E                   ; next data             ' 4     |
1696   0D39 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1697   0D3A 1C                      INC     E                   ; next data             ' 4     |
1698   0D3B 02                      LD      (BC), A             ; write data to YM      ' 7     |
1699   0D3C C3 DB 0D                JP      ym_port_write8      ;                       ' 10    | (162)
1700   0D3F             
1701   0D3F             com_ym_port_wC                          ;                       ' 116
1702   0D3F 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1703   0D40 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1704   0D41 1C                      INC     E                   ; next data             ' 4     |
1705   0D42 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1706   0D43 1C                      INC     E                   ; next data             ' 4     |
1707   0D44 02                      LD      (BC), A             ; write data to YM      ' 7     |
1708   0D45 C3 A6 0D                JP      ym_port_writeB      ;                       ' 10    | (162)
1709   0D48             
1710   0D48             
1711   0D48             ym_port_write1                          ;                       ' 110
1712   0D48 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1713   0D49 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1714   0D4A 1C                      INC     E                   ; next data             ' 4     |
1715   0D4B 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (146)
1716   0D4C 1C                      INC     E                   ; next data             ' 4     |
1717   0D4D 02                      LD      (BC), A             ; write data to YM      ' 7     |
1718   0D4E             
1719   0D4E             ym_port_write0
1720   0D4E 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1721   0D4F                         waitYMReady                 ; wait YM to be ready   ' 30    |
1721   0D4F D9          >            EXX                     ;                           ' 4     | (4)
1721   0D50 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1721   0D52 C2 50 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1721   0D55 D9          >            EXX                     ;                           ' 4     | (30)
1722   0D56 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (212)
1723   0D57 1C                      INC     E                   ; next data             ' 4     |
1724   0D58 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1725   0D59 1C                      INC     E                   ; next data             ' 4     |
1726   0D5A 02                      LD      (BC), A             ; write to YM           ' 7     |
1727   0D5B             
1728   0D5B D9                      EXX                         ; switch to HL' (port0) ' 4     |
1729   0D5C             .wait                                   ;                       '       |
1730   0D5C CB 7E                   BIT     7, (HL)             ; test YM ready bit     ' 12    |
1731   0D5E C2 5C 0D                JP      NZ, .wait           ; wait while busy       ' 10    | 40 (252)
1732   0D61                                                     ;                       '       |
1733   0D61 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1734   0D63 D9                      EXX                         ; switch back           ' 4     |
1735   0D64             
1736   0D64 C3 3A 0A                JP      execute_xgm         ; +8 cycles here        ' 10    | (254+8)
1737   0D67             
1738   0D67             ym_port_writeF                          ;                       ' 110
1739   0D67 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1740   0D68 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1741   0D69 1C                      INC     E                   ; next data             ' 4     |
1742   0D6A 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (146)
1743   0D6B 1C                      INC     E                   ; next data             ' 4     |
1744   0D6C 02                      LD      (BC), A             ; write data to YM      ' 7     |
1745   0D6D             
1746   0D6D             ym_port_writeE
1747   0D6D 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1748   0D6E                         waitYMReady                 ; wait YM to be ready   ' 30    |
1748   0D6E D9          >            EXX                     ;                           ' 4     | (4)
1748   0D6F CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1748   0D71 C2 6F 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1748   0D74 D9          >            EXX                     ;                           ' 4     | (30)
1749   0D75 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (212)
1750   0D76 1C                      INC     E                   ; next data             ' 4     |
1751   0D77 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1752   0D78 1C                      INC     E                   ; next data             ' 4     |
1753   0D79 02                      LD      (BC), A             ; write to YM           ' 7     |
1754   0D7A             
1755   0D7A                         wait12                      ; sync                  ' 12    |
1755   0D7A 18 00       >            JR      .go
1756   0D7C                         waitYMReady                 ; wait YM to be ready   ' 30    | 42 (254)
1756   0D7C D9          >            EXX                     ;                           ' 4     | (4)
1756   0D7D CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1756   0D7F C2 7D 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1756   0D82 D9          >            EXX                     ;                           ' 4     | (30)
1757   0D83             
1758   0D83             ym_port_writeD
1759   0D83                         sampleOutputSafe            ;                       ' 46    | (46)
1759   0D83 D9          >            EXX                     ;                           ' 4     | 4
1759   0D84 36 2A       >            LD      (HL), $2A       ; prepare DAC write         ' 10    |
1759   0D86 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1759   0D87 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1759   0D88 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1759   0D8A 12          >            LD      (DE), A         ; play sample               ' 7     |
1759   0D8B D9          >            EXX                     ;                           ' 4     | (46)
1760   0D8C             
1761   0D8C 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1762   0D8D                         waitYMReady                 ; wait YM to be ready   ' 30    |
1762   0D8D D9          >            EXX                     ;                           ' 4     | (4)
1762   0D8E CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1762   0D90 C2 8E 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1762   0D93 D9          >            EXX                     ;                           ' 4     | (30)
1763   0D94 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (112)
1764   0D95 1C                      INC     E                   ; next data             ' 4     |
1765   0D96 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1766   0D97 1C                      INC     E                   ; next data             ' 4     |
1767   0D98 02                      LD      (BC), A             ; write to YM           ' 7     |
1768   0D99             
1769   0D99             ;ym_port_writeC
1770   0D99 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1771   0D9A                         waitYMReady                 ; wait YM to be ready   ' 30    |
1771   0D9A D9          >            EXX                     ;                           ' 4     | (4)
1771   0D9B CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1771   0D9D C2 9B 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1771   0DA0 D9          >            EXX                     ;                           ' 4     | (30)
1772   0DA1 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (178)
1773   0DA2 1C                      INC     E                   ; next data             ' 4     |
1774   0DA3 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1775   0DA4 1C                      INC     E                   ; next data             ' 4     |
1776   0DA5 02                      LD      (BC), A             ; write to YM           ' 7     |
1777   0DA6             
1778   0DA6             ym_port_writeB
1779   0DA6 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1780   0DA7                         waitYMReady                 ; wait YM to be ready   ' 30    |
1780   0DA7 D9          >            EXX                     ;                           ' 4     | (4)
1780   0DA8 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1780   0DAA C2 A8 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1780   0DAD D9          >            EXX                     ;                           ' 4     | (30)
1781   0DAE 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (244)
1782   0DAF 1C                      INC     E                   ; next data             ' 4     |
1783   0DB0 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1784   0DB1 1C                      INC     E                   ; next data             ' 4     |
1785   0DB2 02                      LD      (BC), A             ; write to YM           ' 7     |
1786   0DB3             
1787   0DB3 D9                      EXX                         ; switch to HL' (port0) ' 4     | (248)
1788   0DB4             .wait                                   ;                       '       |
1789   0DB4 CB 7E                   BIT     7, (HL)             ; test YM ready bit     ' 12    |
1790   0DB6 C2 B4 0D                JP      NZ, .wait           ; wait while busy       ' 10    | 22 (258+14)
1791   0DB9             
1792   0DB9             ym_port_writeA                          ;                       ' 4
1793   0DB9 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1794   0DBB 0A                      LD      A, (BC)             ;                       ' 7     |
1795   0DBC 03                      INC     BC                  ; play sample           ' 6     | 42 (46)
1796   0DBD CB 90                   RES     2, B                ;                       ' 8     |
1797   0DBF 12                      LD      (DE), A             ;                       ' 7     |
1798   0DC0 D9                      EXX                         ;                       ' 4     |
1799   0DC1             
1800   0DC1 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1801   0DC2                         waitYMReady                 ; wait YM to be ready   ' 30    |
1801   0DC2 D9          >            EXX                     ;                           ' 4     | (4)
1801   0DC3 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1801   0DC5 C2 C3 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1801   0DC8 D9          >            EXX                     ;                           ' 4     | (30)
1802   0DC9 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (112)
1803   0DCA 1C                      INC     E                   ; next data             ' 4     |
1804   0DCB 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1805   0DCC 1C                      INC     E                   ; next data             ' 4     |
1806   0DCD 02                      LD      (BC), A             ; write to YM           ' 7     |
1807   0DCE             
1808   0DCE             ;ym_port_write9
1809   0DCE 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1810   0DCF                         waitYMReady                 ; wait YM to be ready   ' 30    |
1810   0DCF D9          >            EXX                     ;                           ' 4     | (4)
1810   0DD0 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1810   0DD2 C2 D0 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1810   0DD5 D9          >            EXX                     ;                           ' 4     | (30)
1811   0DD6 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (178)
1812   0DD7 1C                      INC     E                   ; next data             ' 4     |
1813   0DD8 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1814   0DD9 1C                      INC     E                   ; next data             ' 4     |
1815   0DDA 02                      LD      (BC), A             ; write to YM           ' 7     |
1816   0DDB             
1817   0DDB             ym_port_write8
1818   0DDB 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1819   0DDC                         waitYMReady                 ; wait YM to be ready   ' 30    |
1819   0DDC D9          >            EXX                     ;                           ' 4     | (4)
1819   0DDD CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1819   0DDF C2 DD 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1819   0DE2 D9          >            EXX                     ;                           ' 4     | (30)
1820   0DE3 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (244)
1821   0DE4 1C                      INC     E                   ; next data             ' 4     |
1822   0DE5 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1823   0DE6 1C                      INC     E                   ; next data             ' 4     |
1824   0DE7 02                      LD      (BC), A             ; write to YM           ' 7     |
1825   0DE8             
1826   0DE8 D9                      EXX                         ; switch to HL' (port0) ' 4     | (248)
1827   0DE9             .wait                                   ;                       '       |
1828   0DE9 CB 7E                   BIT     7, (HL)             ; test YM ready bit     ' 12    |
1829   0DEB C2 E9 0D                JP      NZ, .wait           ; wait while busy       ' 10    | 22 (258+14)
1830   0DEE             
1831   0DEE             ym_port_write7                          ;                       ' 4
1832   0DEE 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1833   0DF0 0A                      LD      A, (BC)             ;                       ' 7     |
1834   0DF1 03                      INC     BC                  ; play sample           ' 6     | 42 (46)
1835   0DF2 CB 90                   RES     2, B                ;                       ' 8     |
1836   0DF4 12                      LD      (DE), A             ;                       ' 7     |
1837   0DF5 D9                      EXX                         ;                       ' 4     |
1838   0DF6             
1839   0DF6 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1840   0DF7                         waitYMReady                 ; wait YM to be ready   ' 30    |
1840   0DF7 D9          >            EXX                     ;                           ' 4     | (4)
1840   0DF8 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1840   0DFA C2 F8 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1840   0DFD D9          >            EXX                     ;                           ' 4     | (30)
1841   0DFE 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (112)
1842   0DFF 1C                      INC     E                   ; next data             ' 4     |
1843   0E00 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1844   0E01 1C                      INC     E                   ; next data             ' 4     |
1845   0E02 02                      LD      (BC), A             ; write to YM           ' 7     |
1846   0E03             
1847   0E03             ;ym_port_write6
1848   0E03 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1849   0E04                         waitYMReady                 ; wait YM to be ready   ' 30    |
1849   0E04 D9          >            EXX                     ;                           ' 4     | (4)
1849   0E05 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1849   0E07 C2 05 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1849   0E0A D9          >            EXX                     ;                           ' 4     | (30)
1850   0E0B 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (178)
1851   0E0C 1C                      INC     E                   ; next data             ' 4     |
1852   0E0D 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1853   0E0E 1C                      INC     E                   ; next data             ' 4     |
1854   0E0F 02                      LD      (BC), A             ; write to YM           ' 7     |
1855   0E10             
1856   0E10             ym_port_write5
1857   0E10 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1858   0E11                         waitYMReady                 ; wait YM to be ready   ' 30    |
1858   0E11 D9          >            EXX                     ;                           ' 4     | (4)
1858   0E12 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1858   0E14 C2 12 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1858   0E17 D9          >            EXX                     ;                           ' 4     | (30)
1859   0E18 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (244)
1860   0E19 1C                      INC     E                   ; next data             ' 4     |
1861   0E1A 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1862   0E1B 1C                      INC     E                   ; next data             ' 4     |
1863   0E1C 02                      LD      (BC), A             ; write to YM           ' 7     |
1864   0E1D             
1865   0E1D D9                      EXX                         ; switch to HL' (port0) ' 4     | (248)
1866   0E1E             .wait                                   ;                       '       |
1867   0E1E CB 7E                   BIT     7, (HL)             ; test YM ready bit     ' 12    |
1868   0E20 C2 1E 0E                JP      NZ, .wait           ; wait while busy       ' 10    | 22 (258+14)
1869   0E23             
1870   0E23             ym_port_write4                          ;                       ' 4
1871   0E23 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1872   0E25 0A                      LD      A, (BC)             ;                       ' 7     |
1873   0E26 03                      INC     BC                  ; play sample           ' 6     | 42 (46)
1874   0E27 CB 90                   RES     2, B                ;                       ' 8     |
1875   0E29 12                      LD      (DE), A             ;                       ' 7     |
1876   0E2A D9                      EXX                         ;                       ' 4     |
1877   0E2B             
1878   0E2B 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1879   0E2C                         waitYMReady                 ; wait YM to be ready   ' 30    |
1879   0E2C D9          >            EXX                     ;                           ' 4     | (4)
1879   0E2D CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1879   0E2F C2 2D 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1879   0E32 D9          >            EXX                     ;                           ' 4     | (30)
1880   0E33 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (112)
1881   0E34 1C                      INC     E                   ; next data             ' 4     |
1882   0E35 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1883   0E36 1C                      INC     E                   ; next data             ' 4     |
1884   0E37 02                      LD      (BC), A             ; write to YM           ' 7     |
1885   0E38             
1886   0E38             ;ym_port_write3
1887   0E38 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1888   0E39                         waitYMReady                 ; wait YM to be ready   ' 30    |
1888   0E39 D9          >            EXX                     ;                           ' 4     | (4)
1888   0E3A CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1888   0E3C C2 3A 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1888   0E3F D9          >            EXX                     ;                           ' 4     | (30)
1889   0E40 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (178)
1890   0E41 1C                      INC     E                   ; next data             ' 4     |
1891   0E42 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1892   0E43 1C                      INC     E                   ; next data             ' 4     |
1893   0E44 02                      LD      (BC), A             ; write to YM           ' 7     |
1894   0E45             
1895   0E45             ym_port_write2
1896   0E45 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1897   0E46                         waitYMReady                 ; wait YM to be ready   ' 30    |
1897   0E46 D9          >            EXX                     ;                           ' 4     | (4)
1897   0E47 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1897   0E49 C2 47 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1897   0E4C D9          >            EXX                     ;                           ' 4     | (30)
1898   0E4D 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (244)
1899   0E4E 1C                      INC     E                   ; next data             ' 4     |
1900   0E4F 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1901   0E50 1C                      INC     E                   ; next data             ' 4     |
1902   0E51 02                      LD      (BC), A             ; write to YM           ' 7     |
1903   0E52             
1904   0E52 D9                      EXX                         ; switch to HL' (port0) ' 4     | (248)
1905   0E53             .wait                                   ;                       '       |
1906   0E53 CB 7E                   BIT     7, (HL)             ; test YM ready bit     ' 12    |
1907   0E55 C2 53 0E                JP      NZ, .wait           ; wait while busy       ' 10    | 22 (258+14)
1908   0E58             
1909   0E58 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1910   0E5A 0A                      LD      A, (BC)             ;                       ' 7     |
1911   0E5B 03                      INC     BC                  ; play sample           ' 6     | 42 (46)
1912   0E5C CB 90                   RES     2, B                ;                       ' 8     |
1913   0E5E 12                      LD      (DE), A             ;                       ' 7     |
1914   0E5F D9                      EXX                         ;                       ' 4     |
1915   0E60             
1916   0E60                         wait24                      ; sync                  ' 24    | 54 (100)
1916   0E60 18 00       >            JR      .go
1916   0E62 18 00       >            JR      .go
1917   0E64                         waitYMReady                 ; wait YM to be ready   ' 30    |
1917   0E64 D9          >            EXX                     ;                           ' 4     | (4)
1917   0E65 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1917   0E67 C2 65 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1917   0E6A D9          >            EXX                     ;                           ' 4     | (30)
1918   0E6B             
1919   0E6B C3 48 0D                JP      ym_port_write1      ; execute next          ' 10    | (110)
1920   0E6E             
1921   0E6E             
1922   0E6E             ; YM KEY command
1923   0E6E             ; --------------
1924   0E6E             
1925   0E6E             com_ym_key_w0                           ; 40                    ' 80
1926   0E6E                         wait44                      ; sync                  ' 44    |
1926   0E6E 3E 02       >            LD      A, w            ; 7-2
1926   0E70 3D          >            DEC     A               ; 4
1926   0E71 20 FD       >            JR      NZ, .loop       ; 12
1926   0E73 C3 76 0E    >            JP      .go
1927   0E76 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1928   0E79 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    | 84 (164)
1929   0E7C 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    |
1930   0E7E C3 EC 0E                JP      ym_key_write0       ;                       ' 10    |
1931   0E81             
1932   0E81             com_ym_key_w1                           ; 41                    ' 80
1933   0E81                         wait4                       ; sync                  ' 4     |
1933   0E81 00          >            NOP
1934   0E82 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1935   0E85 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    | 44 (124)
1936   0E88 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    |
1937   0E8A C3 E4 0E                JP      ym_key_write1       ;                       ' 10    |
1938   0E8D             
1939   0E8D             com_ym_key_w2                           ; 43                    ' 80
1940   0E8D                         wait134                     ; sync                  ' 134   |
1940   0E8D 3E 08       >            LD      A, w            ; 7-2
1940   0E8F 3D          >            DEC     A               ; 4
1940   0E90 20 FD       >            JR      NZ, .loop       ; 12
1940   0E92 00          >            NOP
1941   0E93 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1942   0E96 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1943   0E99 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 174 (254)
1944   0E9B C3 1F 0F                JP      ym_key_write2       ;                       ' 10    |
1945   0E9E             
1946   0E9E             com_ym_key_w3                           ; 44                    ' 80
1947   0E9E                         wait64                      ; sync                  ' 64    |
1947   0E9E 3E 03       >            LD      A, w            ; 7-2
1947   0EA0 3D          >            DEC     A               ; 4
1947   0EA1 20 FD       >            JR      NZ, .loop       ; 12
1947   0EA3 F6 00       >            OR      $0
1947   0EA5 F6 00       >            OR      $0
1948   0EA7 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1949   0EAA 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1950   0EAD 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 104 (184)
1951   0EAF C3 10 0F                JP      ym_key_write3       ;                       ' 10    |
1952   0EB2             
1953   0EB2             com_ym_key_w4                           ; 45                    ' 80
1954   0EB2                         wait24                      ; sync                  ' 24    |
1954   0EB2 18 00       >            JR      .go
1954   0EB4 18 00       >            JR      .go
1955   0EB6 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1956   0EB9 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1957   0EBC 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 64 (144)
1958   0EBE C3 08 0F                JP      ym_key_write4       ;                       ' 10    |
1959   0EC1             
1960   0EC1             com_ym_key_w5                           ; 46                    ' 80
1961   0EC1                         wait154                     ; sync                  ' 174   |
1961   0EC1 3E 09       >            LD      A, w            ; 7-2
1961   0EC3 3D          >            DEC     A               ; 4
1961   0EC4 20 FD       >            JR      NZ, .loop       ; 12
1961   0EC6 00          >            NOP
1961   0EC7 00          >            NOP
1962   0EC8 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 174 (254)
1963   0ECB 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1964   0ECE             
1965   0ECE                         sampleOutputSafe            ;                       ' 46    | (46)
1965   0ECE D9          >            EXX                     ;                           ' 4     | 4
1965   0ECF 36 2A       >            LD      (HL), $2A       ; prepare DAC write         ' 10    |
1965   0ED1 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1965   0ED2 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1965   0ED3 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1965   0ED5 12          >            LD      (DE), A         ; play sample               ' 7     |
1965   0ED6 D9          >            EXX                     ;                           ' 4     | (46)
1966   0ED7             
1967   0ED7                         wait16                      ; sync                  ' 16    |
1967   0ED7 18 00       >            JR      .go
1967   0ED9 00          >            NOP
1968   0EDA                         waitYMReadyFast             ; wait YM to be ready   ' 22    |
1968   0EDA CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1968   0EDC C2 DA 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1969   0EDF 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 58 (104)
1970   0EE1 C3 00 0F                JP      ym_key_write5       ;                       ' 10    |
1971   0EE4             
1972   0EE4             
1973   0EE4             ym_key_write1                           ;                       ' 124
1974   0EE4 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1975   0EE5 1C                      INC     E                   ; next data             ' 4     |
1976   0EE6                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (164)
1976   0EE6 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1976   0EE8 C2 E6 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1977   0EEB 02                      LD      (BC), A             ; write to YM           ' 7     |
1978   0EEC             
1979   0EEC             ym_key_write0                           ;                       ' 164
1980   0EEC 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1981   0EED 1C                      INC     E                   ; next data             ' 4     |
1982   0EEE                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (204)
1982   0EEE CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1982   0EF0 C2 EE 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1983   0EF3 02                      LD      (BC), A             ; write to YM           ' 7     |
1984   0EF4             
1985   0EF4                         wait8                       ; sync                  ' 8     |
1985   0EF4 00          >            NOP
1985   0EF5 00          >            NOP
1986   0EF6                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (244)
1986   0EF6 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1986   0EF8 C2 F6 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1987   0EFB 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1988   0EFD             
1989   0EFD C3 3A 0A                JP      execute_xgm         ;                       ' 10    | (254)
1990   0F00             
1991   0F00             ym_key_write5                           ;                       ' 104
1992   0F00 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1993   0F01 1C                      INC     E                   ; next data             ' 4     |
1994   0F02                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (144)
1994   0F02 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1994   0F04 C2 02 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1995   0F07 02                      LD      (BC), A             ; write to YM           ' 7     |
1996   0F08             
1997   0F08             ym_key_write4                           ;                       ' 144
1998   0F08 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1999   0F09 1C                      INC     E                   ; next data             ' 4     |
2000   0F0A                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (184)
2000   0F0A CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2000   0F0C C2 0A 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2001   0F0F 02                      LD      (BC), A             ; write to YM           ' 7     |
2002   0F10             
2003   0F10             ym_key_write3                           ;                       ' 184
2004   0F10 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
2005   0F11 1C                      INC     E                   ; next data             ' 4     |
2006   0F12                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (224)
2006   0F12 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2006   0F14 C2 12 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2007   0F17 02                      LD      (BC), A             ; write to YM           ' 7     |
2008   0F18             
2009   0F18                         wait8                       ; sync                  ' 8     |
2009   0F18 00          >            NOP
2009   0F19 00          >            NOP
2010   0F1A                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 30 (254)
2010   0F1A CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2010   0F1C C2 1A 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2011   0F1F             
2012   0F1F             ym_key_write2
2013   0F1F                         sampleOutputSafe            ;                       ' 46    | (46)
2013   0F1F D9          >            EXX                     ;                           ' 4     | 4
2013   0F20 36 2A       >            LD      (HL), $2A       ; prepare DAC write         ' 10    |
2013   0F22 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2013   0F23 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
2013   0F24 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
2013   0F26 12          >            LD      (DE), A         ; play sample               ' 7     |
2013   0F27 D9          >            EXX                     ;                           ' 4     | (46)
2014   0F28             
2015   0F28                         wait8                       ; sync                  ' 8     |
2015   0F28 00          >            NOP
2015   0F29 00          >            NOP
2016   0F2A                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (86)
2016   0F2A CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2016   0F2C C2 2A 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2017   0F2F 36 28                   LD      (HL), $28           ; restore write to key  ' 10    |
2018   0F31             
2019   0F31 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
2020   0F32 13                      INC     DE                  ; next data             ' 6     |
2021   0F33                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (126)
2021   0F33 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2021   0F35 C2 33 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2022   0F38 02                      LD      (BC), A             ; write to YM           ' 7     |
2023   0F39             
2024   0F39             .write1
2025   0F39 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
2026   0F3A 1C                      INC     E                   ; next data             ' 4     |
2027   0F3B                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (166)
2027   0F3B CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2027   0F3D C2 3B 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2028   0F40 02                      LD      (BC), A             ; write to YM           ' 7     |
2029   0F41             
2030   0F41             .write0
2031   0F41 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
2032   0F42 1C                      INC     E                   ; next data             ' 4     |
2033   0F43                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (206)
2033   0F43 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2033   0F45 C2 43 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2034   0F48 02                      LD      (BC), A             ; write to YM           ' 7     |
2035   0F49             
2036   0F49                         wait7                       ; sync                  ' 7     |
2036   0F49 F6 00       >            OR      $0
2037   0F4B                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 39 (245)
2037   0F4B CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2037   0F4D C2 4B 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2038   0F50 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
2039   0F52             
2040   0F52 C3 3A 0A                JP      execute_xgm         ;                       ' 10    | (254+1)
2041   0F55             
2042   0F55             
2043   0F55             ; PCM command
2044   0F55             ; -----------
2045   0F55             
2046   0F55             com_pcm_p0_ch0                          ; 50                    ' 80
2047   0F55 0E 00                   LD      C, 0                ; C = prio              ' 7     |
2048   0F57 C3 A5 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
2049   0F5A             
2050   0F5A             com_pcm_p1_ch0                          ; 54                    ' 80
2051   0F5A 0E 01                   LD      C, 1                ; C = prio              ' 7     |
2052   0F5C C3 A5 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
2053   0F5F             
2054   0F5F             com_pcm_p2_ch0                          ; 58                    ' 80
2055   0F5F 0E 02                   LD      C, 2                ; C = prio              ' 7     |
2056   0F61 C3 A5 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
2057   0F64             
2058   0F64             com_pcm_p3_ch0                          ; 5C                    ' 80
2059   0F64 0E 03                   LD      C, 3                ; C = prio              ' 7     |
2060   0F66 C3 A5 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
2061   0F69             
2062   0F69             com_pcm_p0_ch1                          ; 51                    ' 80
2063   0F69 0E 00                   LD      C, 0                ; C = prio              ' 7     |
2064   0F6B C3 D4 0F                JP      com_pcm_ch1         ; execute PCM com       ' 10    | 17 (97)
2065   0F6E             
2066   0F6E             com_pcm_p1_ch1                          ; 55                    ' 80
2067   0F6E 0E 01                   LD      C, 1                ; C = prio              ' 7     |
2068   0F70 C3 D4 0F                JP      com_pcm_ch1         ; execute PCM com       ' 10    | 17 (97)
2069   0F73             
2070   0F73             com_pcm_p2_ch1                          ; 59                    ' 80
2071   0F73 0E 02                   LD      C, 2                ; C = prio              ' 7     |
2072   0F75 C3 D4 0F                JP      com_pcm_ch1         ; execute PCM com       ' 10    | (119)
2073   0F78             
2074   0F78             com_pcm_p3_ch1                          ; 5D                    ' 80
2075   0F78 0E 03                   LD      C, 3                ; C = prio              ' 7     |
2076   0F7A C3 D4 0F                JP      com_pcm_ch1         ; execute PCM com       ' 10    | (119)
2077   0F7D             
2078   0F7D             com_pcm_p0_ch2                          ; 52                    ' 80
2079   0F7D 0E 00                   LD      C, 0                ; C = prio              ' 7     |
2080   0F7F C3 03 10                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
2081   0F82             
2082   0F82             com_pcm_p1_ch2                          ; 56                    ' 80
2083   0F82 0E 01                   LD      C, 1                ; C = prio              ' 7     |
2084   0F84 C3 03 10                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
2085   0F87             
2086   0F87             com_pcm_p2_ch2                          ; 5A                    ' 80
2087   0F87 0E 02                   LD      C, 2                ; C = prio              ' 7     |
2088   0F89 C3 03 10                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
2089   0F8C             
2090   0F8C             com_pcm_p3_ch2                          ; 5E                    ' 80
2091   0F8C 0E 03                   LD      C, 3                ; C = prio              ' 7     |
2092   0F8E C3 03 10                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
2093   0F91             
2094   0F91             com_pcm_p0_ch3                          ; 53                    ' 80
2095   0F91 0E 00                   LD      C, 0                ; C = prio              ' 7     |
2096   0F93 C3 32 10                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
2097   0F96             
2098   0F96             com_pcm_p1_ch3                          ; 57                    ' 80
2099   0F96 0E 01                   LD      C, 1                ; C = prio              ' 7     |
2100   0F98 C3 32 10                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
2101   0F9B             
2102   0F9B             com_pcm_p2_ch3                          ; 5B                    ' 80
2103   0F9B 0E 02                   LD      C, 2                ; C = prio              ' 7     |
2104   0F9D C3 32 10                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
2105   0FA0             
2106   0FA0             com_pcm_p3_ch3                          ; 5F                    ' 80
2107   0FA0 0E 03                   LD      C, 3                ; C = prio              ' 7     |
2108   0FA2 C3 32 10                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
2109   0FA5             
2110   0FA5             
2111   0FA5             com_pcm_ch0                             ;                       ' 97
2112   0FA5                         handlePCMCommandXGM 0       ; handle command        ' 142   |
2112   0FA5 21 14 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    |
2112   0FA8 79          >            LD      A, C                    ; A = new prio              ' 4     |
2112   0FA9 BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | (31)
2112   0FAA D2 BA 0F    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2112   0FAD 1C          >            INC     E                       ; next XGM command          ' 4     |
2112   0FAE 3E 05       >            LD      A, w            ; 7-2
2112   0FB0 3D          >            DEC     A               ; 4
2112   0FB1 20 FD       >            JR      NZ, .loop       ; 12
2112   0FB3 00          >            NOP
2112   0FB4 00          >            NOP
2112   0FB5 F6 00       >            OR      $0
2112   0FB7 C3 D0 0F    >            JP      .end                    ; done                      ' 10    |
2112   0FBA 1A          >            LD      A, (DE)                 ; A = PCM id (max = $3F)    ' 7     |
2112   0FBB 1C          >            INC     E                       ; next XGM command          ' 4     |
2112   0FBC B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 27 (58)
2112   0FBD 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2112   0FBF 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2112   0FC1 71          >            LD      (HL), C                 ; set new prio              ' 7     | (65)
2112   0FC2 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
2112   0FC4 87          >            ADD     A                       ;                           ' 4     |
2112   0FC5 87          >            ADD     A                       ;                           ' 4     | 25 (90)
2112   0FC6 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
2112   0FC7 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2112   0FC8 E1          >            POP     HL                      ; copy params               ' 10    |
2112   0FC9 22 16 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2112   0FCC E1          >            POP     HL                      ;                           ' 10    | 52 (142)
2112   0FCD 22 18 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2113   0FD0                         wait4                       ; sync                  ' 4     | 156 (254-1)
2113   0FD0 00          >            NOP
2114   0FD1 C3 3A 0A                JP      execute_xgm         ;                       ' 10    |
2115   0FD4             
2116   0FD4             com_pcm_ch1                             ;                       ' 97
2117   0FD4                         handlePCMCommandXGM 1       ; handle command        ' 142   |
2117   0FD4 21 1C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    |
2117   0FD7 79          >            LD      A, C                    ; A = new prio              ' 4     |
2117   0FD8 BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | (31)
2117   0FD9 D2 E9 0F    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2117   0FDC 1C          >            INC     E                       ; next XGM command          ' 4     |
2117   0FDD 3E 05       >            LD      A, w            ; 7-2
2117   0FDF 3D          >            DEC     A               ; 4
2117   0FE0 20 FD       >            JR      NZ, .loop       ; 12
2117   0FE2 00          >            NOP
2117   0FE3 00          >            NOP
2117   0FE4 F6 00       >            OR      $0
2117   0FE6 C3 FF 0F    >            JP      .end                    ; done                      ' 10    |
2117   0FE9 1A          >            LD      A, (DE)                 ; A = PCM id (max = $3F)    ' 7     |
2117   0FEA 1C          >            INC     E                       ; next XGM command          ' 4     |
2117   0FEB B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 27 (58)
2117   0FEC 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2117   0FEE 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2117   0FF0 71          >            LD      (HL), C                 ; set new prio              ' 7     | (65)
2117   0FF1 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
2117   0FF3 87          >            ADD     A                       ;                           ' 4     |
2117   0FF4 87          >            ADD     A                       ;                           ' 4     | 25 (90)
2117   0FF5 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
2117   0FF6 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2117   0FF7 E1          >            POP     HL                      ; copy params               ' 10    |
2117   0FF8 22 1E 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2117   0FFB E1          >            POP     HL                      ;                           ' 10    | 52 (142)
2117   0FFC 22 20 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2118   0FFF                         wait4                       ; sync                  ' 4     | 156 (254-1)
2118   0FFF 00          >            NOP
2119   1000 C3 3A 0A                JP      execute_xgm         ;                       ' 10    |
2120   1003             
2121   1003             com_pcm_ch2                             ;                       ' 97
2122   1003                         handlePCMCommandXGM 2       ; handle command        ' 142   |
2122   1003 21 24 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    |
2122   1006 79          >            LD      A, C                    ; A = new prio              ' 4     |
2122   1007 BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | (31)
2122   1008 D2 18 10    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2122   100B 1C          >            INC     E                       ; next XGM command          ' 4     |
2122   100C 3E 05       >            LD      A, w            ; 7-2
2122   100E 3D          >            DEC     A               ; 4
2122   100F 20 FD       >            JR      NZ, .loop       ; 12
2122   1011 00          >            NOP
2122   1012 00          >            NOP
2122   1013 F6 00       >            OR      $0
2122   1015 C3 2E 10    >            JP      .end                    ; done                      ' 10    |
2122   1018 1A          >            LD      A, (DE)                 ; A = PCM id (max = $3F)    ' 7     |
2122   1019 1C          >            INC     E                       ; next XGM command          ' 4     |
2122   101A B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 27 (58)
2122   101B 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2122   101D 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2122   101F 71          >            LD      (HL), C                 ; set new prio              ' 7     | (65)
2122   1020 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
2122   1022 87          >            ADD     A                       ;                           ' 4     |
2122   1023 87          >            ADD     A                       ;                           ' 4     | 25 (90)
2122   1024 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
2122   1025 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2122   1026 E1          >            POP     HL                      ; copy params               ' 10    |
2122   1027 22 26 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2122   102A E1          >            POP     HL                      ;                           ' 10    | 52 (142)
2122   102B 22 28 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2123   102E                         wait4                       ; sync                  ' 4     | 156 (254-1)
2123   102E 00          >            NOP
2124   102F C3 3A 0A                JP      execute_xgm         ;                       ' 10    |
2125   1032             
2126   1032             com_pcm_ch3                             ;                       ' 97
2127   1032                         handlePCMCommandXGM 3       ; handle command        ' 142   |
2127   1032 21 2C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    |
2127   1035 79          >            LD      A, C                    ; A = new prio              ' 4     |
2127   1036 BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | (31)
2127   1037 D2 47 10    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2127   103A 1C          >            INC     E                       ; next XGM command          ' 4     |
2127   103B 3E 05       >            LD      A, w            ; 7-2
2127   103D 3D          >            DEC     A               ; 4
2127   103E 20 FD       >            JR      NZ, .loop       ; 12
2127   1040 00          >            NOP
2127   1041 00          >            NOP
2127   1042 F6 00       >            OR      $0
2127   1044 C3 5D 10    >            JP      .end                    ; done                      ' 10    |
2127   1047 1A          >            LD      A, (DE)                 ; A = PCM id (max = $3F)    ' 7     |
2127   1048 1C          >            INC     E                       ; next XGM command          ' 4     |
2127   1049 B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 27 (58)
2127   104A 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2127   104C 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2127   104E 71          >            LD      (HL), C                 ; set new prio              ' 7     | (65)
2127   104F 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
2127   1051 87          >            ADD     A                       ;                           ' 4     |
2127   1052 87          >            ADD     A                       ;                           ' 4     | 25 (90)
2127   1053 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
2127   1054 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2127   1055 E1          >            POP     HL                      ; copy params               ' 10    |
2127   1056 22 2E 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2127   1059 E1          >            POP     HL                      ;                           ' 10    | 52 (142)
2127   105A 22 30 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2128   105D                         wait4                       ; sync                  ' 4     | 156 (254-1)
2128   105D 00          >            NOP
2129   105E C3 3A 0A                JP      execute_xgm         ;                       ' 10    |
2130   1061             
2131   1061             
2132   1061             
2133   1061             ; STATE command
2134   1061             ; -------------
2135   1061             
2136   1061             com_state_w0                            ; 60                    ' 80
2137   1061                         wait114                     ; sync                  ' 114   |
2137   1061 3E 07       >            LD      A, w            ; 7-2
2137   1063 3D          >            DEC     A               ; 4
2137   1064 20 FD       >            JR      NZ, .loop       ; 12
2138   1066 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 131 (211)
2139   1068 C3 AD 11                JP      state_w0            ; execute               ' 10    |
2140   106B             
2141   106B             com_state_w1                            ; 61                    ' 80
2142   106B                         wait81                      ; sync                  ' 81    |
2142   106B 3E 04       >            LD      A, w            ; 7-2
2142   106D 3D          >            DEC     A               ; 4
2142   106E 20 FD       >            JR      NZ, .loop       ; 12
2142   1070 00          >            NOP
2142   1071 00          >            NOP
2142   1072 F6 00       >            OR      $0
2143   1074 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 98 (178)
2144   1076 C3 A7 11                JP      state_w1            ; execute               ' 10    |
2145   1079             
2146   1079             com_state_w2                            ; 62                    ' 80
2147   1079                         wait48                      ; sync                  ' 48    |
2147   1079 ED 4F       >            LD      R, A
2147   107B ED 4F       >            LD      R, A
2147   107D ED 4F       >            LD      R, A
2147   107F ED 4F       >            LD      R, A
2147   1081 18 00       >            JR      .go
2148   1083 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 65 (145)
2149   1085 C3 A1 11                JP      state_w2            ; execute               ' 10    |
2150   1088             
2151   1088             com_state_w3                            ; 63                    ' 80
2152   1088                         wait15                      ; sync                  ' 15    |
2152   1088 00          >            NOP
2152   1089 00          >            NOP
2152   108A F6 00       >            OR      $0
2153   108C 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 32 (112)
2154   108E C3 9B 11                JP      state_w3            ; execute               ' 10    |
2155   1091             
2156   1091             com_state_w4                            ; 64                    ' 80
2157   1091                         wait174                     ; sync                  ' 174   | (254)
2157   1091 3E 0A       >            LD      A, w            ; 7-2
2157   1093 3D          >            DEC     A               ; 4
2157   1094 20 FD       >            JR      NZ, .loop       ; 12
2157   1096 18 00       >            JR      .go
2158   1098                         sampleOutput                ; sample output         ' 36    | (36)
2158   1098 D9          >            EXX                     ;                           ' 4     | 4
2158   1099 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2158   109A 03          >            INC     BC              ; increment read address    ' 6     |
2158   109B CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2158   109D 12          >            LD      (DE), A         ; play sample               ' 7     |
2158   109E D9          >            EXX                     ;                           ' 4     | (36)
2159   109F             
2160   109F                         wait26                      ; sync                  ' 26    |
2160   109F ED 4F       >            LD      R, A
2160   10A1 ED 4F       >            LD      R, A
2160   10A3 00          >            NOP
2160   10A4 00          >            NOP
2161   10A5 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 43 (79)
2162   10A7 C3 95 11                JP      state_w4            ; execute               ' 10    |
2163   10AA             
2164   10AA             com_state_w5                            ; 65                    ' 80
2165   10AA                         wait157                     ; sync                  ' 157   |
2165   10AA 3E 09       >            LD      A, w            ; 7-2
2165   10AC 3D          >            DEC     A               ; 4
2165   10AD 20 FD       >            JR      NZ, .loop       ; 12
2165   10AF F6 00       >            OR      $0
2165   10B1 00          >            NOP
2166   10B2 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 174 (254)
2167   10B4 C3 85 11                JP      state_w5            ; execute               ' 10    |
2168   10B7             
2169   10B7             com_state_w6                            ; 66                    ' 80
2170   10B7                         wait124                     ; sync                  ' 124   |
2170   10B7 3E 07       >            LD      A, w            ; 7-2
2170   10B9 3D          >            DEC     A               ; 4
2170   10BA 20 FD       >            JR      NZ, .loop       ; 12
2170   10BC C3 BF 10    >            JP      .go
2171   10BF 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 141 (221)
2172   10C1 C3 7F 11                JP      state_w6            ; execute               ' 10    |
2173   10C4             
2174   10C4             com_state_w7                            ; 67                    ' 80
2175   10C4                         wait91                      ; sync                  ' 91    |
2175   10C4 3E 05       >            LD      A, w            ; 7-2
2175   10C6 3D          >            DEC     A               ; 4
2175   10C7 20 FD       >            JR      NZ, .loop       ; 12
2175   10C9 ED 4F       >            LD      R, A
2176   10CB 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 108 (188)
2177   10CD C3 79 11                JP      state_w7            ; execute               ' 10    |
2178   10D0             
2179   10D0             com_state_w8                            ; 68                    ' 80
2180   10D0                         wait58                      ; sync                  ' 58    |
2180   10D0 3E 03       >            LD      A, w            ; 7-2
2180   10D2 3D          >            DEC     A               ; 4
2180   10D3 20 FD       >            JR      NZ, .loop       ; 12
2180   10D5 00          >            NOP
2180   10D6 00          >            NOP
2181   10D7 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 75 (155)
2182   10D9 C3 73 11                JP      state_w8            ; execute               ' 10    |
2183   10DC             
2184   10DC             com_state_w9                            ; 69                    ' 80
2185   10DC                         wait25                      ; sync                  ' 25    |
2185   10DC 18 00       >            JR      .go
2185   10DE ED 4F       >            LD      R, A
2185   10E0 00          >            NOP
2186   10E1 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 42 (122)
2187   10E3 C3 6D 11                JP      state_w9            ; execute               ' 10    |
2188   10E6             
2189   10E6             com_state_wA                            ; 6A                    ' 80
2190   10E6                         wait174                     ; sync                  ' 174   | (254)
2190   10E6 3E 0A       >            LD      A, w            ; 7-2
2190   10E8 3D          >            DEC     A               ; 4
2190   10E9 20 FD       >            JR      NZ, .loop       ; 12
2190   10EB 18 00       >            JR      .go
2191   10ED                         sampleOutput                ; sample output         ' 36    | (36)
2191   10ED D9          >            EXX                     ;                           ' 4     | 4
2191   10EE 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2191   10EF 03          >            INC     BC              ; increment read address    ' 6     |
2191   10F0 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2191   10F2 12          >            LD      (DE), A         ; play sample               ' 7     |
2191   10F3 D9          >            EXX                     ;                           ' 4     | (36)
2192   10F4             
2193   10F4                         wait36                      ; sync                  ' 36    |
2193   10F4 ED 4F       >            LD      R, A
2193   10F6 ED 4F       >            LD      R, A
2193   10F8 ED 4F       >            LD      R, A
2193   10FA ED 4F       >            LD      R, A
2194   10FC 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 53 (89)
2195   10FE C3 67 11                JP      state_wA            ; execute               ' 10    |
2196   1101             
2197   1101             com_state_wB                            ; 6B                    ' 80
2198   1101                         wait157                     ; sync                  ' 157   |
2198   1101 3E 09       >            LD      A, w            ; 7-2
2198   1103 3D          >            DEC     A               ; 4
2198   1104 20 FD       >            JR      NZ, .loop       ; 12
2198   1106 F6 00       >            OR      $0
2198   1108 00          >            NOP
2199   1109 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 174 (254)
2200   110B C3 55 11                JP      state_wB            ; execute               ' 10    |
2201   110E             
2202   110E             com_state_wC                            ; 6C                    ' 80
2203   110E                         wait124                     ; sync                  ' 124   |
2203   110E 3E 07       >            LD      A, w            ; 7-2
2203   1110 3D          >            DEC     A               ; 4
2203   1111 20 FD       >            JR      NZ, .loop       ; 12
2203   1113 C3 16 11    >            JP      .go
2204   1116 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 141 (221)
2205   1118 C3 4F 11                JP      state_wC            ; execute               ' 10    |
2206   111B             
2207   111B             com_state_wD                            ; 6D                    ' 80
2208   111B                         wait91                      ; sync                  ' 91    |
2208   111B 3E 05       >            LD      A, w            ; 7-2
2208   111D 3D          >            DEC     A               ; 4
2208   111E 20 FD       >            JR      NZ, .loop       ; 12
2208   1120 ED 4F       >            LD      R, A
2209   1122 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 108 (188)
2210   1124 C3 49 11                JP      state_wD            ; execute               ' 10    |
2211   1127             
2212   1127             com_state_wE                            ; 6E                    ' 80
2213   1127                         wait58                      ; sync                  ' 58    |
2213   1127 3E 03       >            LD      A, w            ; 7-2
2213   1129 3D          >            DEC     A               ; 4
2213   112A 20 FD       >            JR      NZ, .loop       ; 12
2213   112C 00          >            NOP
2213   112D 00          >            NOP
2214   112E 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 75 (155)
2215   1130 C3 43 11                JP      state_wE            ; execute               ' 10    |
2216   1133             
2217   1133             com_state_wF                            ; 6F                    ' 80
2218   1133                         wait35                      ; sync                  ' 35    |
2218   1133 18 00       >            JR      .go
2218   1135 ED 4F       >            LD      R, A
2218   1137 F6 00       >            OR      $0
2218   1139 F6 00       >            OR      $0
2219   113B 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 42 (122)
2220   113D             
2221   113D             state_wF                                ;                       ' 122
2222   113D 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2223   113E 1C                      INC     E                   ; next data             ' 4     |
2224   113F 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (155)
2225   1140 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2226   1141 1C                      INC     E                   ; next data             ' 4     |
2227   1142 77                      LD      (HL), A             ; write to save         ' 7     |
2228   1143             
2229   1143             state_wE
2230   1143 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2231   1144 1C                      INC     E                   ; next data             ' 4     |
2232   1145 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (188)
2233   1146 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2234   1147 1C                      INC     E                   ; next data             ' 4     |
2235   1148 77                      LD      (HL), A             ; write to save         ' 7     |
2236   1149             
2237   1149             state_wD
2238   1149 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2239   114A 1C                      INC     E                   ; next data             ' 4     |
2240   114B 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (221)
2241   114C 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2242   114D 1C                      INC     E                   ; next data             ' 4     |
2243   114E 77                      LD      (HL), A             ; write to save         ' 7     |
2244   114F             
2245   114F             state_wC
2246   114F 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2247   1150 1C                      INC     E                   ; next data             ' 4     |
2248   1151 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (254)
2249   1152 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2250   1153 1C                      INC     E                   ; next data             ' 4     |
2251   1154 77                      LD      (HL), A             ; write to save         ' 7     |
2252   1155             
2253   1155             state_wB
2254   1155                         sampleOutput                ; sample output         ' 36    |
2254   1155 D9          >            EXX                     ;                           ' 4     | 4
2254   1156 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2254   1157 03          >            INC     BC              ; increment read address    ' 6     |
2254   1158 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2254   115A 12          >            LD      (DE), A         ; play sample               ' 7     |
2254   115B D9          >            EXX                     ;                           ' 4     | (36)
2255   115C                         wait20                      ; wait                  ' 20    | (56)
2255   115C F6 00       >            OR      $0
2255   115E 00          >            NOP
2255   115F ED 4F       >            LD      R, A
2256   1161             
2257   1161 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2258   1162 1C                      INC     E                   ; next data             ' 4     |
2259   1163 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (89)
2260   1164 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2261   1165 1C                      INC     E                   ; next data             ' 4     |
2262   1166 77                      LD      (HL), A             ; write to save         ' 7     |
2263   1167             
2264   1167             state_wA
2265   1167 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2266   1168 1C                      INC     E                   ; next data             ' 4     |
2267   1169 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (122)
2268   116A 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2269   116B 1C                      INC     E                   ; next data             ' 4     |
2270   116C 77                      LD      (HL), A             ; write to save         ' 7     |
2271   116D             
2272   116D             state_w9
2273   116D 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2274   116E 1C                      INC     E                   ; next data             ' 4     |
2275   116F 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (155)
2276   1170 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2277   1171 1C                      INC     E                   ; next data             ' 4     |
2278   1172 77                      LD      (HL), A             ; write to save         ' 7     |
2279   1173             
2280   1173             state_w8
2281   1173 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2282   1174 1C                      INC     E                   ; next data             ' 4     |
2283   1175 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (188)
2284   1176 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2285   1177 1C                      INC     E                   ; next data             ' 4     |
2286   1178 77                      LD      (HL), A             ; write to save         ' 7     |
2287   1179             
2288   1179             state_w7
2289   1179 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2290   117A 1C                      INC     E                   ; next data             ' 4     |
2291   117B 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (221)
2292   117C 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2293   117D 1C                      INC     E                   ; next data             ' 4     |
2294   117E 77                      LD      (HL), A             ; write to save         ' 7     |
2295   117F             
2296   117F             state_w6
2297   117F 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2298   1180 1C                      INC     E                   ; next data             ' 4     |
2299   1181 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (254)
2300   1182 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2301   1183 1C                      INC     E                   ; next data             ' 4     |
2302   1184 77                      LD      (HL), A             ; write to save         ' 7     |
2303   1185             
2304   1185             state_w5
2305   1185                         sampleOutput                ; sample output         ' 36    |
2305   1185 D9          >            EXX                     ;                           ' 4     | 4
2305   1186 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2305   1187 03          >            INC     BC              ; increment read address    ' 6     |
2305   1188 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2305   118A 12          >            LD      (DE), A         ; play sample               ' 7     |
2305   118B D9          >            EXX                     ;                           ' 4     | (36)
2306   118C                         wait10                      ; wait                  ' 10    | (46)
2306   118C C3 8F 11    >            JP      .go
2307   118F             
2308   118F 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2309   1190 1C                      INC     E                   ; next data             ' 4     |
2310   1191 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (79)
2311   1192 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2312   1193 1C                      INC     E                   ; next data             ' 4     |
2313   1194 77                      LD      (HL), A             ; write to save         ' 7     |
2314   1195             
2315   1195             state_w4
2316   1195 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2317   1196 1C                      INC     E                   ; next data             ' 4     |
2318   1197 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (112)
2319   1198 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2320   1199 1C                      INC     E                   ; next data             ' 4     |
2321   119A 77                      LD      (HL), A             ; write to save         ' 7     |
2322   119B             
2323   119B             state_w3
2324   119B 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2325   119C 1C                      INC     E                   ; next data             ' 4     |
2326   119D 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (145)
2327   119E 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2328   119F 1C                      INC     E                   ; next data             ' 4     |
2329   11A0 77                      LD      (HL), A             ; write to save         ' 7     |
2330   11A1             
2331   11A1             state_w2
2332   11A1 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2333   11A2 1C                      INC     E                   ; next data             ' 4     |
2334   11A3 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (178)
2335   11A4 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2336   11A5 1C                      INC     E                   ; next data             ' 4     |
2337   11A6 77                      LD      (HL), A             ; write to save         ' 7     |
2338   11A7             
2339   11A7             state_w1
2340   11A7 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2341   11A8 1C                      INC     E                   ; next data             ' 4     |
2342   11A9 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (211)
2343   11AA 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2344   11AB 1C                      INC     E                   ; next data             ' 4     |
2345   11AC 77                      LD      (HL), A             ; write to save         ' 7     |
2346   11AD             
2347   11AD             state_w0
2348   11AD 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2349   11AE 1C                      INC     E                   ; next data             ' 4     |
2350   11AF 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (244)
2351   11B0 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2352   11B1 1C                      INC     E                   ; next data             ' 4     |
2353   11B2 77                      LD      (HL), A             ; write to save         ' 7     |
2354   11B3             
2355   11B3 C3 3A 0A                JP      execute_xgm         ;                       ' 10    | (254)
2356   11B6             
2357   11B6             
2358   11B6             ; NULL command
2359   11B6             ; ------------
2360   11B6             
2361   11B6             com_null                                ; 01-0F / 60-7C         ' 80
2362   11B6                         wait164                     ; sync                  ' 164   |
2362   11B6 3E 09       >            LD      A, w            ; 7-2
2362   11B8 3D          >            DEC     A               ; 4
2362   11B9 20 FD       >            JR      NZ, .loop       ; 12
2362   11BB ED 4F       >            LD      R, A
2362   11BD ED 4F       >            LD      R, A
2363   11BF C3 3A 0A                JP      execute_xgm         ;                       ' 10    | 174 (254)
2364   11C2             
2365   11C2             
2366   11C2             ; EXTRA FRAME command
2367   11C2             ; -------------------
2368   11C2             
2369   11C2             com_extra_frm                           ; 7D                            ' 80
2370   11C2             
2371   11C2 3E 01                   LD      A, $1               ;                               ' 7     |
2372   11C4 32 12 01                LD      (MODIFYING_F), A    ; we are modifying variable     ' 13    | 20 (100)
2373   11C7             
2374   11C7 3A 13 01                LD      A, (PENDING_FRM)    ;                               ' 13    |
2375   11CA 3C                      INC     A                   ; force process 1 more frame    ' 4     | 30 (130)
2376   11CB 32 13 01                LD      (PENDING_FRM), A    ;                               ' 13    |
2377   11CE             
2378   11CE AF                      XOR     A                   ;                               ' 4     |
2379   11CF 32 12 01                LD      (MODIFYING_F), A    ; no more modifying variable    ' 13    | 17 (147)
2380   11D2             
2381   11D2 21 94 01                LD      HL, ELAPSED         ;                               ' 10    | 10 (157)
2382   11D5             
2383   11D5 7E                      LD      A, (HL)             ;                               ' 7     |
2384   11D6 D6 01                   SUB     A, #1               ;                               ' 7     |
2385   11D8 77                      LD      (HL), A             ;                               ' 7     |
2386   11D9 2C                      INC     L                   ;                               ' 4     |
2387   11DA 7E                      LD      A, (HL)             ;                               ' 7     |
2388   11DB DE 00                   SBC     A, #0               ; fix elapsed frame (24 bit)    ' 7     | 71 (228)
2389   11DD 77                      LD      (HL), A             ;                               ' 7     |
2390   11DE 2C                      INC     L                   ;                               ' 4     |
2391   11DF 7E                      LD      A, (HL)             ;                               ' 7     |
2392   11E0 DE 00                   SBC     A, #0               ;                               ' 7     |
2393   11E2 77                      LD      (HL), A             ;                               ' 7     |
2394   11E3             
2395   11E3                         wait16                      ; sync                          ' 16    | 26 (254)
2395   11E3 18 00       >            JR      .go
2395   11E5 00          >            NOP
2396   11E6 C3 3A 0A                JP      execute_xgm         ;                               ' 10    |
2397   11E9             
2398   11E9             
2399   11E9             ; LOOP command
2400   11E9             ; ------------
2401   11E9             
2402   11E9             com_loop                                ; 7E                        ' 80
2403   11E9             
2404   11E9 3A 3C 01                LD      A, (REM_LOOP)       ; A = remaining loop        ' 13    |
2405   11EC 3D                      DEC     A                   ; 0 mean infinite loop      ' 4     |
2406   11ED 32 3C 01                LD      (REM_LOOP), A       ; A = remaining loop        ' 13    | 40 (120)
2407   11F0 C2 0A 12                JP      NZ, .continue       ;                           ' 10    |
2408   11F3             
2409   11F3 21 00 01                LD      HL, COMMAND         ; HL = COMMAND              ' 10    | 25 (145)
2410   11F6 CB E6                   SET     XGM_PAUSE_SFT, (HL) ; request pause/end XGM     ' 15    |
2411   11F8             
2412   11F8 21 02 01                LD      HL, STATUS          ; HL = STATUS               ' 10    | 25 (170)
2413   11FB CB B6                   RES     XGM_PLAY_SFT, (HL)  ; clear play status         ' 15    |
2414   11FD             
2415   11FD 1C                      INC     E                   ; next param                ' 4     |
2416   11FE 1C                      INC     E                   ;                           ' 4     | 12 (182)
2417   11FF 1C                      INC     E                   ;                           ' 4     |
2418   1200             
2419   1200                         wait62                      ; sync                      ' 62    |
2419   1200 3E 03       >            LD      A, w            ; 7-2
2419   1202 3D          >            DEC     A               ; 4
2419   1203 20 FD       >            JR      NZ, .loop       ; 12
2419   1205 18 00       >            JR      .go
2420   1207 C3 3A 0A                JP      execute_xgm         ;                           ' 10    | 72 (254)
2421   120A             
2422   120A             .continue
2423   120A 1A                      LD      A, (DE)             ; A = loop addr b7-b0       ' 7     |
2424   120B 6F                      LD      L, A                ; L = loop addr b7-b0       ' 4     |
2425   120C 1C                      INC     E                   ; next param                ' 4     |
2426   120D 1A                      LD      A, (DE)             ; A = loop addr b15-b8      ' 7     | 30 (150)
2427   120E 67                      LD      H, A                ; HL = loop addr b15-b0     ' 4     |
2428   120F 1C                      INC     E                   ; next param                ' 4     |
2429   1210             
2430   1210 ED 4B 04 01             LD      BC, (XGM_ARG_A+0)   ; BC = XGM base addr (ML)   ' 20    |
2431   1214 09                      ADD     HL, BC              ; HL = XGM base addr + loop ' 11    | 47 (197)
2432   1215 22 34 01                LD      (XGM_ADDR+0), HL    ; set new XGM addr (ML)     ' 16    |
2433   1218             
2434   1218 1A                      LD      A, (DE)             ; A = loop addr b23-b16     ' 7     |
2435   1219 21 06 01                LD      HL, XGM_ARG_A+2     ; HL point XGM base adr H   ' 10    |
2436   121C 8E                      ADC     (HL)                ; A = XGM base addr + loop  ' 7     | 41 (238)
2437   121D 1C                      INC     E                   ; next param                ' 4     |
2438   121E 32 36 01                LD      (XGM_ADDR+2), A     ; set new XGM addr (H)      ' 13    |
2439   1221             
2440   1221 AF                      XOR     A                   ; force end frame           ' 4     |
2441   1222 12                      LD      (DE), A             ; after loop taken          ' 7     | 11 (249)
2442   1223             
2443   1223 C3 3A 0A                JP      execute_xgm         ; +5 cycles delay here..    ' 10    | (254+5)
2444   1226             
2445   1226             
2446   1226             ; END XGM command
2447   1226             ; ---------------
2448   1226             
2449   1226             com_end                                 ; 7F                        ' 80
2450   1226 21 00 01                LD      HL, COMMAND         ; HL = COMMAND              ' 10    | 25 (105)
2451   1229 CB E6                   SET     XGM_PAUSE_SFT, (HL) ; request pause/end XGM     ' 15    |
2452   122B             
2453   122B 21 02 01                LD      HL, STATUS          ; HL = STATUS               ' 10    | 25 (130)
2454   122E CB B6                   RES     XGM_PLAY_SFT, (HL)  ; clear play status         ' 15    |
2455   1230             
2456   1230                         wait114                     ; sync                      ' 114   |
2456   1230 3E 07       >            LD      A, w            ; 7-2
2456   1232 3D          >            DEC     A               ; 4
2456   1233 20 FD       >            JR      NZ, .loop       ; 12
2457   1235 C3 3A 0A                JP      execute_xgm         ;                           ' 10    | 124 (254)
2458   1238             
2459   1238             
2460   1238             ; $BC+X+Y+Z
2461   1238             do_xgm_again                            ;                           ' 135
2462   1238 2D                      DEC     L                   ; HL point on MODIFYING_F   ' 4     |
2463   1239 36 00                   LD      (HL), $0            ; no more modifying         ' 10    | 14 (149)
2464   123B             
2465   123B                         wait95                      ; sync                      ' 95    |
2465   123B 3E 05       >            LD      A, w            ; 7-2
2465   123D 3D          >            DEC     A               ; 4
2465   123E 20 FD       >            JR      NZ, .loop       ; 12
2465   1240 ED 4F       >            LD      R, A
2465   1242 00          >            NOP
2466   1243 C3 AF 02                JP      main_loop           ; restart loop (prep xgm)   ' 10    | 105 (254)
2467   1246             
2468   1246             
2469   1246             
2470   1246             xgm_stopped
2471   1246 36 00                   LD      (HL), $0            ; clear PENDING_FRM         ' xx
2472   1248 C3 58 12                JP      xgm_stopped_cont    ; continue                  ' xx
2473   124B             
2474   124B             
2475   124B             ; $BC+X+Y+Z
2476   124B             xgm_done                                ;                               ' 90
2477   124B             
2478   124B             ;    LD  A, (VCOUNTER)
2479   124B             ;    LD  (DEBUG_8), A
2480   124B             
2481   124B 21 12 01                LD      HL, MODIFYING_F     ;                               ' 10    |
2482   124E 36 01                   LD      (HL), $1            ; we are modifying variable     ' 10    | 24 (114)
2483   1250 2C                      INC     L                   ; HL point on PENDING_FRM       ' 4     |
2484   1251             
2485   1251 35                      DEC     (HL)                ; still have frame to process ? ' 11    |
2486   1252 FA 46 12                JP      M, xgm_stopped      ; for safety on 68k clear       ' xx
2487   1255 C2 38 12                JP      NZ, do_xgm_again    ; do XGM process again          ' 10    | 21 (135)
2488   1258             
2489   1258             xgm_stopped_cont
2490   1258 2D                      DEC     L                   ; HL point on MODIFYING_F       ' 4     |
2491   1259 36 00                   LD      (HL), $0            ; no more modifying variable    ' 10    | 14 (149)
2492   125B             
2493   125B             
2494   125B             ;    LD  A, (VCOUNTER)
2495   125B             ;    LD  (DEBUG_9), A
2496   125B             
2497   125B             ; execute external command
2498   125B             ; ------------------------
2499   125B             
2500   125B             ; $BC+X+Y+Z
2501   125B             external_com                            ;                           ' 149
2502   125B 31 00 16                LD      SP, STACK           ; restore stack             ' 10    |
2503   125E 21 00 01                LD      HL, COMMAND         ; HL point on COMMAND       ' 10    | 20 (159)
2504   1261             
2505   1261             .chk_xgm_play
2506   1261 CB 76                   BIT     XGM_PLAY_SFT, (HL)  ; play XGM command ?        ' 12    |
2507   1263 CA 8E 12                JP      Z, .chk_xgm_resume  ;                           ' 10    | 22 (181)
2508   1266             
2509   1266 CB B6                   RES     XGM_PLAY_SFT, (HL)  ; clear command             ' 15    |
2510   1268 2C                      INC     L                   ;                           ' 4     |
2511   1269 2C                      INC     L                   ; HL point on status        ' 4     | 38 (219)
2512   126A CB F6                   SET     XGM_PLAY_SFT, (HL)  ; set play status           ' 15    |
2513   126C             
2514   126C 2A 04 01                LD      HL, (XGM_ARG_A)     ; set new XGM address       ' 16    |
2515   126F 22 34 01                LD      (XGM_ADDR), HL      ;                           ' 16    | 58 (277)
2516   1272 3A 06 01                LD      A, (XGM_ARG_A+2)    ;                           ' 13    |
2517   1275 32 36 01                LD      (XGM_ADDR+2),A      ;                           ' 13    |
2518   1278             
2519   1278 3A 10 01                LD      A, (LOOP_ARG)       ; set remaining loop        ' 13    |
2520   127B 32 3C 01                LD      (REM_LOOP),A        ;                           ' 13    | 26 (303)
2521   127E             
2522   127E 21 00 00                LD      HL, #0000           ; clear elapsed frame       ' 10    |
2523   1281 22 94 01                LD      (ELAPSED), HL       ; (24 bit counter)          ' 16    |
2524   1284 AF                      XOR     A                   ;                           ' 4     | 43 (346)
2525   1285 32 96 01                LD      (ELAPSED+2), A      ;                           ' 13    |
2526   1288             
2527   1288 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2528   128B C3 20 13                JP      external_com_pcm    ; do PCM commands           ' 10    | 20 (254+112)
2529   128E                                                     ; +112 cycles here, ignore
2530   128E             
2531   128E             .chk_xgm_resume
2532   128E CB 6E                   BIT     XGM_RESUME_SFT, (HL)    ; play XGM command ?    ' 12    |
2533   1290 CA AF 12                JP      Z, .chk_xgm_stop        ;                       ' 10    | 22 (203)
2534   1293             
2535   1293 CB AE                   RES     XGM_RESUME_SFT, (HL)    ; clear command         ' 15    |
2536   1295 2C                      INC     L                       ;                       ' 4     |
2537   1296 2C                      INC     L                       ; HL point on status    ' 4     | 38 (241)
2538   1297 CB F6                   SET     XGM_PLAY_SFT, (HL)      ; set play status       ' 15    |
2539   1299             
2540   1299 11 44 01                LD      DE, YM_RR_SAV       ; DE point on save state    ' 10    |
2541   129C 31 00 16                LD      SP, STACK           ; set STACK                 ' 10    | 20 (254+7)
2542   129F                                                     ; +7 cycles here, ignore
2543   129F             
2544   129F CD F5 14                CALL    loadState           ; load state                ' 140+  | (140)
2545   12A2             
2546   12A2                         wait94                      ; sync                      ' 94    |
2546   12A2 3E 05       >            LD      A, w            ; 7-2
2546   12A4 3D          >            DEC     A               ; 4
2546   12A5 20 FD       >            JR      NZ, .loop       ; 12
2546   12A7 18 00       >            JR      .go
2547   12A9 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    | 114 (254)
2548   12AC C3 20 13                JP      external_com_pcm    ; do PCM commands           ' 10    |
2549   12AF             
2550   12AF             .chk_xgm_stop
2551   12AF CB 66                   BIT     XGM_PAUSE_SFT, (HL) ; pause/end XGM command ?   ' 12    |
2552   12B1 CA 19 13                JP      Z, .chk_pcm0_pre    ;                           ' 10    | 22 (225)
2553   12B4             
2554   12B4 CB A6                   RES     XGM_PAUSE_SFT, (HL) ; clear command             ' 15    |
2555   12B6 2C                      INC     L                   ;                           ' 4     |
2556   12B7 2C                      INC     L                   ; HL point on status        ' 4     | 38 (263)
2557   12B8 CB B6                   RES     XGM_PLAY_SFT, (HL)  ; clear play status         ' 15    |
2558   12BA             
2559   12BA 11 64 01                LD      DE, YM_RR_OFF       ; DE point on off state     ' 10    |
2560   12BD 31 00 16                LD      SP, STACK           ; set STACK                 ' 10    | 20 (254+29)
2561   12C0                                                     ; +29 cycles here, ignore
2562   12C0             
2563   12C0 CD F5 14                CALL    loadState           ; stop music                ' 140+  | (140)
2564   12C3             
2565   12C3 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0      ' 10    |
2566   12C6 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1      ' 10    | 20 (160)
2567   12C9             
2568   12C9 36 28                   LD      (HL), $28           ; set reg num to YM         ' 10    |
2569   12CB                         waitYMReadyFast             ; wait YM to be ready       ' 22    | 32 (192)
2569   12CB CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2569   12CD C2 CB 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2570   12D0             
2571   12D0 AF                      XOR     A                   ; A = $00                   ' 4     |
2572   12D1 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2573   12D2 3C                      INC     A                   ; A = $01                   ' 4     | 37 (229)
2574   12D3                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2574   12D3 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2574   12D5 C2 D3 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2575   12D8             
2576   12D8 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2577   12D9                         waitYMReadyFast             ; wait YM to be ready       ' 22    | 29 (254+4)
2577   12D9 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2577   12DB C2 D9 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2578   12DE             
2579   12DE                         sampleOutputSafe            ; *** sample output ****    ' 46    | (46+4)
2579   12DE D9          >            EXX                     ;                           ' 4     | 4
2579   12DF 36 2A       >            LD      (HL), $2A       ; prepare DAC write         ' 10    |
2579   12E1 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2579   12E2 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
2579   12E3 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
2579   12E5 12          >            LD      (DE), A         ; play sample               ' 7     |
2579   12E6 D9          >            EXX                     ;                           ' 4     | (46)
2580   12E7             
2581   12E7                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2581   12E7 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2581   12E9 C2 E7 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2582   12EC 36 28                   LD      (HL), $28           ; set reg num to YM         ' 10    |
2583   12EE 3E 02                   LD      A, $02              ; A = $02                   ' 7     | 61 (111)
2584   12F0                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2584   12F0 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2584   12F2 C2 F0 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2585   12F5             
2586   12F5 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2587   12F6 C6 02                   ADD     $2                  ; A = $04                   ' 7     | 36 (147)
2588   12F8                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2588   12F8 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2588   12FA C2 F8 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2589   12FD             
2590   12FD 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2591   12FE 3C                      INC     A                   ; A = $05                   ' 4     | 33 (180)
2592   12FF                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2592   12FF CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2592   1301 C2 FF 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2593   1304             
2594   1304 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2595   1305 3C                      INC     A                   ; A = $06                   ' 4     | 33 (213)
2596   1306                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2596   1306 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2596   1308 C2 06 13    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2597   130B             
2598   130B 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2599   130C                         waitYMReadyFast             ; wait YM to be ready       ' 22    | 39 (252)
2599   130C CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2599   130E C2 0C 13    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2600   1311 36 2A                   LD      (HL), $2A           ; restore DAC write         ' 10    |
2601   1313             
2602   1313 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2603   1316 C3 20 13                JP      external_com_pcm    ; continue                  ' 10    | 20 (254+18)
2604   1319                                                     ; +18 cycles here, ignore
2605   1319             
2606   1319             .chk_pcm0_pre                           ;                           ' 225
2607   1319 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2608   131C                         wait19                      ; sync                      ' 19    | 29 (254)
2608   131C 18 00       >            JR      .go
2608   131E F6 00       >            OR      $0
2609   1320             
2610   1320             ; $BD+X+Y+Z
2611   1320             external_com_pcm
2612   1320                         sampleOutput                ; *** sample output ****    ' 36    | (36)
2612   1320 D9          >            EXX                     ;                           ' 4     | 4
2612   1321 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2612   1322 03          >            INC     BC              ; increment read address    ' 6     |
2612   1323 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2612   1325 12          >            LD      (DE), A         ; play sample               ' 7     |
2612   1326 D9          >            EXX                     ;                           ' 4     | (36)
2613   1327             
2614   1327             .chk_pcm0
2615   1327 CB 46                   BIT     CH0_SFT, (HL)       ; play PCM0 command ?       ' 12    |
2616   1329 CA 6E 13                JP      Z, .chk_pcm1        ;                           ' 10    | 22 (58)
2617   132C             
2618   132C CB 86                   RES     CH0_SFT, (HL)       ; clear command             ' 15    | (73)
2619   132E             
2620   132E                         handlePCMCommand 0          ; handle play PCM command   ' 157   | 167 (240)
2620   132E ED 4B 08 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2620   1332 21 14 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2620   1335 79          >            LD      A, C                    ; A = new prio              ' 4     |
2620   1336 BE          >            CP      (HL)                    ; compare to old prio       ' 7     | 21 (51)
2620   1337 D2 46 13    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2620   133A 3E 05       >            LD      A, w            ; 7-2
2620   133C 3D          >            DEC     A               ; 4
2620   133D 20 FD       >            JR      NZ, .loop       ; 12
2620   133F F6 00       >            OR      $0
2620   1341 F6 00       >            OR      $0
2620   1343 C3 5B 13    >            JP      .end                    ;                           ' 10    | 106 (157)
2620   1346 78          >            LD      A, B                    ; A = SFX id                ' 4     |
2620   1347 B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 18 (69)
2620   1348 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2620   134A 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2620   134C 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2620   134D 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2620   134F 6F          >            LD      L, A                    ;                           ' 4     |
2620   1350 29          >            ADD     HL, HL                  ;                           ' 6     |
2620   1351 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     | 29 (105)
2620   1352 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2620   1353 E1          >            POP     HL                      ; copy params               ' 10    |
2620   1354 22 16 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2620   1357 E1          >            POP     HL                      ;                           ' 10    | 52 (157)
2620   1358 22 18 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2621   135B 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2622   135E             
2623   135E                         wait14                      ; sync                      ' 14    | (254)
2623   135E F6 00       >            OR      $0
2623   1360 F6 00       >            OR      $0
2624   1362             
2625   1362                         sampleOutput                ; *** sample output ****    ' 36    | (36)
2625   1362 D9          >            EXX                     ;                           ' 4     | 4
2625   1363 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2625   1364 03          >            INC     BC              ; increment read address    ' 6     |
2625   1365 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2625   1367 12          >            LD      (DE), A         ; play sample               ' 7     |
2625   1368 D9          >            EXX                     ;                           ' 4     | (36)
2626   1369             
2627   1369                         wait22                      ; sync                      ' 22    | (58)
2627   1369 ED 4F       >            LD      R, A
2627   136B ED 4F       >            LD      R, A
2627   136D 00          >            NOP
2628   136E             
2629   136E             .chk_pcm1
2630   136E CB 4E                   BIT     CH1_SFT, (HL)       ; play PCM1 command ?       ' 12    |
2631   1370 CA B4 13                JP      Z, .chk_pcm2        ;                           ' 10    | 22 (80)
2632   1373             
2633   1373 CB 8E                   RES     CH1_SFT, (HL)       ; clear command             ' 15    | (95)
2634   1375             
2635   1375                         handlePCMCommand 1          ; handle play PCM command   ' 157   | (254-2)
2635   1375 ED 4B 0A 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2635   1379 21 1C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2635   137C 79          >            LD      A, C                    ; A = new prio              ' 4     |
2635   137D BE          >            CP      (HL)                    ; compare to old prio       ' 7     | 21 (51)
2635   137E D2 8D 13    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2635   1381 3E 05       >            LD      A, w            ; 7-2
2635   1383 3D          >            DEC     A               ; 4
2635   1384 20 FD       >            JR      NZ, .loop       ; 12
2635   1386 F6 00       >            OR      $0
2635   1388 F6 00       >            OR      $0
2635   138A C3 A2 13    >            JP      .end                    ;                           ' 10    | 106 (157)
2635   138D 78          >            LD      A, B                    ; A = SFX id                ' 4     |
2635   138E B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 18 (69)
2635   138F 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2635   1391 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2635   1393 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2635   1394 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2635   1396 6F          >            LD      L, A                    ;                           ' 4     |
2635   1397 29          >            ADD     HL, HL                  ;                           ' 6     |
2635   1398 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     | 29 (105)
2635   1399 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2635   139A E1          >            POP     HL                      ; copy params               ' 10    |
2635   139B 22 1E 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2635   139E E1          >            POP     HL                      ;                           ' 10    | 52 (157)
2635   139F 22 20 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2636   13A2             
2637   13A2                         sampleOutput                ; *** sample output ****    ' 36    | (36-2)
2637   13A2 D9          >            EXX                     ;                           ' 4     | 4
2637   13A3 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2637   13A4 03          >            INC     BC              ; increment read address    ' 6     |
2637   13A5 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2637   13A7 12          >            LD      (DE), A         ; play sample               ' 7     |
2637   13A8 D9          >            EXX                     ;                           ' 4     | (36)
2638   13A9             
2639   13A9                         wait36                      ; sync                      ' 36    | 46 (80)
2639   13A9 ED 4F       >            LD      R, A
2639   13AB ED 4F       >            LD      R, A
2639   13AD ED 4F       >            LD      R, A
2639   13AF ED 4F       >            LD      R, A
2640   13B1 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2641   13B4             
2642   13B4             .chk_pcm2
2643   13B4 CB 56                   BIT     CH2_SFT, (HL)       ; play PCM2 command ?       ' 12    |
2644   13B6 CA FA 13                JP      Z, .chk_pcm3        ;                           ' 10    | 22 (102)
2645   13B9             
2646   13B9 CB 96                   RES     CH2_SFT, (HL)       ; clear command             ' 15    | (117)
2647   13BB             
2648   13BB                         handlePCMCommand 2          ; handle play PCM command   ' 157   | (254+20)
2648   13BB ED 4B 0C 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2648   13BF 21 24 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2648   13C2 79          >            LD      A, C                    ; A = new prio              ' 4     |
2648   13C3 BE          >            CP      (HL)                    ; compare to old prio       ' 7     | 21 (51)
2648   13C4 D2 D3 13    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2648   13C7 3E 05       >            LD      A, w            ; 7-2
2648   13C9 3D          >            DEC     A               ; 4
2648   13CA 20 FD       >            JR      NZ, .loop       ; 12
2648   13CC F6 00       >            OR      $0
2648   13CE F6 00       >            OR      $0
2648   13D0 C3 E8 13    >            JP      .end                    ;                           ' 10    | 106 (157)
2648   13D3 78          >            LD      A, B                    ; A = SFX id                ' 4     |
2648   13D4 B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 18 (69)
2648   13D5 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2648   13D7 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2648   13D9 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2648   13DA 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2648   13DC 6F          >            LD      L, A                    ;                           ' 4     |
2648   13DD 29          >            ADD     HL, HL                  ;                           ' 6     |
2648   13DE 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     | 29 (105)
2648   13DF F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2648   13E0 E1          >            POP     HL                      ; copy params               ' 10    |
2648   13E1 22 26 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2648   13E4 E1          >            POP     HL                      ;                           ' 10    | 52 (157)
2648   13E5 22 28 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2649   13E8             
2650   13E8                         sampleOutput                ; *** sample output ****    ' 36    | (36+20)
2650   13E8 D9          >            EXX                     ;                           ' 4     | 4
2650   13E9 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2650   13EA 03          >            INC     BC              ; increment read address    ' 6     |
2650   13EB CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2650   13ED 12          >            LD      (DE), A         ; play sample               ' 7     |
2650   13EE D9          >            EXX                     ;                           ' 4     | (36)
2651   13EF             
2652   13EF                         wait36                      ; sync                      ' 36    | 46 (102)
2652   13EF ED 4F       >            LD      R, A
2652   13F1 ED 4F       >            LD      R, A
2652   13F3 ED 4F       >            LD      R, A
2652   13F5 ED 4F       >            LD      R, A
2653   13F7 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2654   13FA             
2655   13FA             .chk_pcm3
2656   13FA CB 5E                   BIT     CH3_SFT, (HL)       ; play PCM3 command ?       ' 12    |
2657   13FC CA 3C 14                JP      Z, ext_com_done     ;                           ' 10    | 22 (124)
2658   13FF             
2659   13FF CB 9E                   RES     CH3_SFT, (HL)       ; clear command             ' 15    | (139)
2660   1401             
2661   1401                         handlePCMCommand 3          ; handle play PCM command   ' 157   | (254+42)
2661   1401 ED 4B 0E 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2661   1405 21 2C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2661   1408 79          >            LD      A, C                    ; A = new prio              ' 4     |
2661   1409 BE          >            CP      (HL)                    ; compare to old prio       ' 7     | 21 (51)
2661   140A D2 19 14    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2661   140D 3E 05       >            LD      A, w            ; 7-2
2661   140F 3D          >            DEC     A               ; 4
2661   1410 20 FD       >            JR      NZ, .loop       ; 12
2661   1412 F6 00       >            OR      $0
2661   1414 F6 00       >            OR      $0
2661   1416 C3 2E 14    >            JP      .end                    ;                           ' 10    | 106 (157)
2661   1419 78          >            LD      A, B                    ; A = SFX id                ' 4     |
2661   141A B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 18 (69)
2661   141B 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2661   141D 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2661   141F 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2661   1420 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2661   1422 6F          >            LD      L, A                    ;                           ' 4     |
2661   1423 29          >            ADD     HL, HL                  ;                           ' 6     |
2661   1424 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     | 29 (105)
2661   1425 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2661   1426 E1          >            POP     HL                      ; copy params               ' 10    |
2661   1427 22 2E 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2661   142A E1          >            POP     HL                      ;                           ' 10    | 52 (157)
2661   142B 22 30 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2662   142E             
2663   142E                         sampleOutput                ; *** sample output ****    ' 36    | (36+42)
2663   142E D9          >            EXX                     ;                           ' 4     | 4
2663   142F 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2663   1430 03          >            INC     BC              ; increment read address    ' 6     |
2663   1431 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2663   1433 12          >            LD      (DE), A         ; play sample               ' 7     |
2663   1434 D9          >            EXX                     ;                           ' 4     | (36)
2664   1435             
2665   1435                         wait46                      ; sync                      ' 46    | (124)
2665   1435 3E 02       >            LD      A, w            ; 7-2
2665   1437 3D          >            DEC     A               ; 4
2665   1438 20 FD       >            JR      NZ, .loop       ; 12
2665   143A 18 00       >            JR      .go
2666   143C             
2667   143C             ; $BD+X+Y+Z
2668   143C             ext_com_done                                ;                           ' 124
2669   143C 01 02 01                LD      BC, STATUS              ; BC point on STATUS        ' 10    |
2670   143F 0A                      LD      A, (BC)                 ; A = STATUS                ' 7     | 24 (148)
2671   1440 E6 F0                   AND     $F0                     ; clear PCM play status     ' 7     |
2672   1442             
2673   1442 2A 00 1C                LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
2674   1445 ED 5B 16 01             LD      DE, (PCM_ADDR+(0*8))    ; DE = PCM ch0 addr         ' 20    |
2675   1449 ED 52                   SBC     HL, DE                  ; HL == DE ?                ' 15    | 63 (211)
2676   144B 28 02                   JR      Z, .ch0_silent          ; ch0 is not playing        ' 12    |
2677   144D             
2678   144D F6 01                   OR      A, $01                  ; set play status for ch0   ' +2
2679   144F             
2680   144F             .ch0_silent
2681   144F 08                      EX      AF, AF'                 ; preserve AF               ' 4     |
2682   1450                         wait35                          ; sync                      ' 35    | 39 (254-4)
2682   1450 18 00       >            JR      .go
2682   1452 ED 4F       >            LD      R, A
2682   1454 F6 00       >            OR      $0
2682   1456 F6 00       >            OR      $0
2683   1458             
2684   1458             ; $BE+X+Y+Z
2685   1458                         sampleOutput                    ; sample output             ' 36-4  | (36)
2685   1458 D9          >            EXX                     ;                           ' 4     | 4
2685   1459 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2685   145A 03          >            INC     BC              ; increment read address    ' 6     |
2685   145B CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2685   145D 12          >            LD      (DE), A         ; play sample               ' 7     |
2685   145E D9          >            EXX                     ;                           ' 4     | (36)
2686   145F 08                      EX      AF, AF'                 ; restore AF                ' 4     |
2687   1460             
2688   1460 2A 00 1C                LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
2689   1463 ED 5B 1E 01             LD      DE, (PCM_ADDR+(1*8))    ; DE = PCM ch1 addr         ' 20    |
2690   1467 ED 52                   SBC     HL, DE                  ; HL == DE ?                ' 15    | 63 (99)
2691   1469 28 02                   JR      Z, .ch1_silent          ; ch1 is not playing        ' 12    |
2692   146B             
2693   146B F6 02                   OR      A, $02                  ; set play status for ch1   ' +2
2694   146D             
2695   146D             .ch1_silent
2696   146D 2A 00 1C                LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
2697   1470 ED 5B 26 01             LD      DE, (PCM_ADDR+(2*8))    ; DE = PCM ch2 addr         ' 20    |
2698   1474 ED 52                   SBC     HL, DE                  ; HL == DE ?                ' 15    | 63 (162)
2699   1476 28 02                   JR      Z, .ch2_silent          ; ch2 is not playing        ' 12    |
2700   1478             
2701   1478 F6 04                   OR      A, $04                  ; set play status for ch2   ' +2
2702   147A             
2703   147A             .ch2_silent
2704   147A 2A 00 1C                LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
2705   147D ED 5B 2E 01             LD      DE, (PCM_ADDR+(3*8))    ; DE = PCM ch3 addr         ' 20    |
2706   1481 ED 52                   SBC     HL, DE                  ; HL == DE ?                ' 15    | 63 (225)
2707   1483 28 02                   JR      Z, .ch3_silent          ; ch3 is not playing        ' 12    |
2708   1485             
2709   1485 F6 08                   OR      A, $08                  ; set play status for ch3   ' +2
2710   1487             
2711   1487             .ch3_silent
2712   1487 02                      LD      (BC), A                 ; set new status            ' 7     | (229)
2713   1488             
2714   1488 3A 11 01                LD      A, (PROTECT_ARG)        ; get BUS protect state     ' 13    |
2715   148B B7                      OR      A                       ; no protecting ?           ' 4     | 27 (254+2)
2716   148C CA AF 02                JP      Z, main_loop            ; process next frame        ' 10    |
2717   148F                                                         ; +2 cycles here, ignore...
2718   148F             
2719   148F             ; frame done
2720   148F             ;
2721   148F             ; 1 frame of PCM sample (256 bytes) is ~287 lines.
2722   148F             ;
2723   148F             ; NTSC: we should be <= 0xE8 to respect frame time here and we need to update PCM buffer 0.9 time per frame
2724   148F             ; so we have a free PCM mix frame from time to time.
2725   148F             ; Median (X+Y+Z) should be < 0x2A (< 42) plus some lines from the free PCM mix
2726   148F             ;
2727   148F             ; PAL: we should be <= 0118 to respect frame time here but we need to update PCM buffer 1.1 time per frame
2728   148F             ; so we have a penalty PCM mix frame from time to time.
2729   148F             ; Median (X+Y+Z) should be < 0x5A (< 90) minus some lines for the extra PCM mix
2730   148F             ; -------------------------------------------------------------------------------------
2731   148F             
2732   148F             
2733   148F             ;    LD  A, (VCOUNTER)
2734   148F             ;    LD  (DEBUG_A), A
2735   148F             
2736   148F             ; BUS protection wait (to avoid BUS contention with DMA)
2737   148F             ;
2738   148F             ; $BF+X+Y+Z
2739   148F             
2740   148F             bus_protect_wait
2741   148F                         sampleOutput                ; *** sample output *** ' 36    | (36)
2741   148F D9          >            EXX                     ;                           ' 4     | 4
2741   1490 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2741   1491 03          >            INC     BC              ; increment read address    ' 6     |
2741   1492 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2741   1494 12          >            LD      (DE), A         ; play sample               ' 7     |
2741   1495 D9          >            EXX                     ;                           ' 4     | (36)
2742   1496             
2743   1496                         wait105                     ; sync                  ' 105   | (141)
2743   1496 3E 06       >            LD      A, w            ; 7-2
2743   1498 3D          >            DEC     A               ; 4
2743   1499 20 FD       >            JR      NZ, .loop       ; 12
2743   149B F6 00       >            OR      $0
2744   149D             
2745   149D 3A 11 01                LD      A, (PROTECT_ARG)    ; get BUS protect state ' 13    |
2746   14A0 B7                      OR      A                   ; no more protecting ?  ' 4     | 27 (168)
2747   14A1 CA B5 14                JP      Z, .continue        ; continue              ' 10    |
2748   14A4             
2749   14A4 2A 80 01                LD      HL, (IDLE_LOOP)     ;                       ' 16    |
2750   14A7 23                      INC     HL                  ; increment idle loop   ' 6     | 38 (206)
2751   14A8 22 80 01                LD      (IDLE_LOOP), HL     ;                       ' 16    |
2752   14AB             
2753   14AB 2A 82 01                LD      HL, (WAIT_LOOP)     ;                       ' 16    |
2754   14AE 23                      INC     HL                  ; increment wait loop   ' 6     | 38 (244)
2755   14AF 22 82 01                LD      (WAIT_LOOP), HL     ;                       ' 16    |
2756   14B2             
2757   14B2 C3 8F 14                JP      bus_protect_wait    ; wait until bus is ok  ' 10    | (254)
2758   14B5             
2759   14B5             .continue                               ;                       ' 168
2760   14B5             
2761   14B5             ;    LD  A, (VCOUNTER)
2762   14B5             ;    LD  (DEBUG_B), A
2763   14B5             
2764   14B5                         wait76                      ; sync                  ' 76    |
2764   14B5 3E 04       >            LD      A, w            ; 7-2
2764   14B7 3D          >            DEC     A               ; 4
2764   14B8 20 FD       >            JR      NZ, .loop       ; 12
2764   14BA C3 BD 14    >            JP      .go
2765   14BD C3 AF 02                JP      main_loop           ; process next frame    ' 10    | 86 (254)
2766   14C0             
2767   14C0             
2768   14C0             
2769   14C0             ; ##############################  functions  ################################
2770   14C0             
2771   14C0                         INCLUDE "z80_fct.i80"   ; basic functions
0001+  14C0             ; ########################### function #############################
0002+  14C0             
0003+  14C0             ; initDAC
0004+  14C0             ; -----------
0005+  14C0             ; HL <-  YMPORT0
0006+  14C0             ; DE <-  $2A80
0007+  14C0             ;
0008+  14C0             ; prepare DAC for output
0009+  14C0             
0010+  14C0             initDAC
0011+  14C0 11 80 2B                LD      DE, $2B80
0012+  14C3 CD CD 14                CALL    writeYM0        ; enable DAC
0013+  14C6 11 80 2A                LD      DE, $2A80
0014+  14C9 CD CD 14                CALL    writeYM0        ; DAC data to silent
0015+  14CC C9                      RET
0016+  14CD             
0017+  14CD             ; writeYM0 / writeYM1
0018+  14CD             ; -------------------
0019+  14CD             ; D   -> address
0020+  14CD             ; E   -> value
0021+  14CD             ; HL <-  YMPORT0 / YMPORT2
0022+  14CD             ;
0023+  14CD             ; write to YM2612 (safe)
0024+  14CD             ; 81 cycles
0025+  14CD             
0026+  14CD             writeYM0                            ;                           ' 17
0027+  14CD 21 00 40                LD      HL, YMPORT0     ; HL = YM port 0            ' 10    | (27)
0028+  14D0             
0029+  14D0             .wait
0030+  14D0 CB 7E                   BIT     7, (HL)         ; test YM not busy          ' 12    |
0031+  14D2 20 FC                   JR      NZ, .wait       ;                           ' 7     | 19 (46)
0032+  14D4             
0033+  14D4 2E 00                   LD      L, $0           ; HL = YM port 0            ' 7     |
0034+  14D6 72                      LD      (HL), D         ; write address             ' 7     |
0035+  14D7 2C                      INC     L               ; next port                 ' 4     | 25 (71)
0036+  14D8 73                      LD      (HL), E         ; write value               ' 7     |
0037+  14D9             
0038+  14D9 C9                      RET                     ; end                       ' 10    | (81)
0039+  14DA             
0040+  14DA             
0041+  14DA             writeYM1                            ;                           ' 17
0042+  14DA 21 00 40                LD      HL, YMPORT0     ; HL = YM port 0            ' 10    | (27)
0043+  14DD             
0044+  14DD             .wait
0045+  14DD CB 7E                   BIT     7, (HL)         ; test YM not busy          ' 12    |
0046+  14DF 20 FC                   JR      NZ, .wait       ;                           ' 7     | 19 (46)
0047+  14E1             
0048+  14E1 2E 02                   LD      L, $2           ; HL = YM port 2            ' 7     |
0049+  14E3 72                      LD      (HL), D         ; write address             ' 7     | 25 (71)
0050+  14E4 2C                      INC     L               ; HL = YM port 3            ' 4     |
0051+  14E5 73                      LD      (HL), E         ; write value               ' 7     |
0052+  14E6             
0053+  14E6 C9                      RET                     ; end                       ' 10    | (81)
0054+  14E7             
0055+  14E7             
0056+  14E7             ; writeYM0Fast / writeYM1Fast
0057+  14E7             ; ---------------------------
0058+  14E7             ; D   -> address
0059+  14E7             ; E   -> value
0060+  14E7             ; HL <-  YMPORT0 / YMPORT2
0061+  14E7             ;
0062+  14E7             ; write to YM2612
0063+  14E7             ; 55 cycles
0064+  14E7             
0065+  14E7             writeYM0Fast                        ;                           ' 17
0066+  14E7             
0067+  14E7 21 00 40                LD      HL, YMPORT0     ; HL = YM port 0            ' 10    |
0068+  14EA 72                      LD      (HL), D         ; write address             ' 7     |
0069+  14EB 2C                      INC     L               ; next port                 ' 4     | 28 (45)
0070+  14EC 73                      LD      (HL), E         ; write value               ' 7     |
0071+  14ED             
0072+  14ED C9                      RET                     ; end                       ' 10    | (55)
0073+  14EE             
0074+  14EE             
0075+  14EE             writeYM1Fast                        ;                           ' 17
0076+  14EE             
0077+  14EE 21 02 40                LD      HL, YMPORT2     ; HL = YM port 2            ' 10    |
0078+  14F1 72                      LD      (HL), D         ; write address             ' 7     |
0079+  14F2 2C                      INC     L               ; next port                 ' 4     | 28 (45)
0080+  14F3 73                      LD      (HL), E         ; write value               ' 7     |
0081+  14F4             
0082+  14F4 C9                      RET                     ; end                       ' 10    | (55)
0083+  14F5             
2772   14F5             
2773   14F5             
2774   14F5             ; loadState
2775   14F5             ; ---------
2776   14F5             ;     ?       ->  HL  -> ?
2777   14F5             ;     ?       ->  BC  -> ?
2778   14F5             ; reg source  ->  DE  -> ?
2779   14F5             ;
2780   14F5             ; load the YM and PSG state
2781   14F5             ; = 8 samples + 140 cycles
2782   14F5             
2783   14F5             loadState
2784   14F5             
2785   14F5                         sampleOutput                ; *** sample output ****    ' 36    | (36)
2785   14F5 D9          >            EXX                     ;                           ' 4     | 4
2785   14F6 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2785   14F7 03          >            INC     BC              ; increment read address    ' 6     |
2785   14F8 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2785   14FA 12          >            LD      (DE), A         ; play sample               ' 7     |
2785   14FB D9          >            EXX                     ;                           ' 4     | (36)
2786   14FC             
2787   14FC 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0      ' 10    |
2788   14FF 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1      ' 10    | 20 (56)
2789   1502             
2790   1502 CD 26 15                CALL    loadYMState         ; load YM state             ' 188+  | (244)
2791   1505             
2792   1505 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2      ' 10    |
2793   1508 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3      ' 10    | 20 (254+10)
2794   150B             
2795   150B                         sampleOutputSafe            ; *** sample output ****    ' 46    | (46+10)
2795   150B D9          >            EXX                     ;                           ' 4     | 4
2795   150C 36 2A       >            LD      (HL), $2A       ; prepare DAC write         ' 10    |
2795   150E 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2795   150F 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
2795   1510 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
2795   1512 12          >            LD      (DE), A         ; play sample               ' 7     |
2795   1513 D9          >            EXX                     ;                           ' 4     | (46)
2796   1514             
2797   1514 CD 26 15                CALL    loadYMState         ; load YM state             ' 188+  | (244)
2798   1517             
2799   1517 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG           ' 10    | (254)
2800   151A             
2801   151A                         sampleOutputSafe            ; *** sample output ****    ' 46    | (46+10)
2801   151A D9          >            EXX                     ;                           ' 4     | 4
2801   151B 36 2A       >            LD      (HL), $2A       ; prepare DAC write         ' 10    |
2801   151D 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2801   151E 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
2801   151F CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
2801   1521 12          >            LD      (DE), A         ; play sample               ' 7     |
2801   1522 D9          >            EXX                     ;                           ' 4     | (46)
2802   1523             
2803   1523 C3 EB 15                JP      loadPSGState        ; load PSG state            ' 10+94 | (140)
2804   1526             
2805   1526             
2806   1526             ; loadYMState
2807   1526             ; -----------
2808   1526             ; YMPORT0/2   ->  HL
2809   1526             ; YMPORT1/3   ->  BC
2810   1526             ; reg source  ->  DE  -> ?
2811   1526             ;
2812   1526             ; load the YM RR state
2813   1526             ; = 4 samples (244 cycles)
2814   1526             
2815   1526             loadYMState                             ;                           ' 56
2816   1526             
2817   1526                         waitYMReady                 ; wait YM to be ready       ' 30    |
2817   1526 D9          >            EXX                     ;                           ' 4     | (4)
2817   1527 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2817   1529 C2 27 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2817   152C D9          >            EXX                     ;                           ' 4     | (30)
2818   152D 36 80                   LD      (HL), $80           ; set reg num to YM         ' 10    |
2819   152F 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2820   1530 1C                      INC     E                   ; next                      ' 4     | 62 (118)
2821   1531                         wait4                       ; wait YM to be ready       ' 4     |
2821   1531 00          >            NOP
2822   1532 02                      LD      (BC), A             ; restore state             ' 7     |
2823   1533             
2824   1533                         waitYMReady                 ; wait YM to be ready       ' 30    |
2824   1533 D9          >            EXX                     ;                           ' 4     | (4)
2824   1534 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2824   1536 C2 34 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2824   1539 D9          >            EXX                     ;                           ' 4     | (30)
2825   153A 36 81                   LD      (HL), $81           ; set reg num to YM         ' 10    |
2826   153C 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (180)
2827   153D 1C                      INC     E                   ; next                      ' 4     |
2828   153E                         wait4                       ; wait YM to be ready       ' 4     |
2828   153E 00          >            NOP
2829   153F 02                      LD      (BC), A             ; restore state             ' 7     |
2830   1540             
2831   1540                         waitYMReady                 ; wait YM to be ready       ' 30    |
2831   1540 D9          >            EXX                     ;                           ' 4     | (4)
2831   1541 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2831   1543 C2 41 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2831   1546 D9          >            EXX                     ;                           ' 4     | (30)
2832   1547 36 82                   LD      (HL), $82           ; set reg num to YM         ' 10    |
2833   1549 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (242)
2834   154A 1C                      INC     E                   ; next                      ' 4     |
2835   154B                         wait4                       ; wait YM to be ready       ' 4     |
2835   154B 00          >            NOP
2836   154C 02                      LD      (BC), A             ; restore state             ' 7     |
2837   154D             
2838   154D D9                      EXX                         ;                           ' 4     | (246)
2839   154E             
2840   154E             .wait1
2841   154E CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2842   1550 C2 4E 15                JP      NZ, .wait1          ; wait while busy           ' 10    | 22 (254+14)
2843   1553             
2844   1553 36 2A                   LD      (HL), $2A           ;                           ' 10    |
2845   1555 0A                      LD      A, (BC)             ;                           ' 7     |
2846   1556 03                      INC     BC                  ; *** sample output ****    ' 6     | 38 (52)
2847   1557 CB 90                   RES     2, B                ;                           ' 8     |
2848   1559 12                      LD      (DE), A             ;                           ' 7     |
2849   155A             
2850   155A             .wait2
2851   155A CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2852   155C C2 5A 15                JP      NZ, .wait2          ; wait while busy           ' 10    | 22 (74)
2853   155F             
2854   155F D9                      EXX                         ;                           ' 4     | (78)
2855   1560             
2856   1560 36 84                   LD      (HL), $84           ; set reg num to YM         ' 10    |
2857   1562 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2858   1563 1C                      INC     E                   ; next                      ' 4     | 32 (110)
2859   1564                         wait4                       ; wait YM to be ready       ' 4     |
2859   1564 00          >            NOP
2860   1565 02                      LD      (BC), A             ; restore state             ' 7     |
2861   1566             
2862   1566                         waitYMReady                 ; wait YM to be ready       ' 30    |
2862   1566 D9          >            EXX                     ;                           ' 4     | (4)
2862   1567 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2862   1569 C2 67 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2862   156C D9          >            EXX                     ;                           ' 4     | (30)
2863   156D 36 85                   LD      (HL), $85           ; set reg num to YM         ' 10    |
2864   156F 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (172)
2865   1570 1C                      INC     E                   ; next                      ' 4     |
2866   1571                         wait4                       ; wait YM to be ready       ' 4     |
2866   1571 00          >            NOP
2867   1572 02                      LD      (BC), A             ; restore state             ' 7     |
2868   1573             
2869   1573                         waitYMReady                 ; wait YM to be ready       ' 30    |
2869   1573 D9          >            EXX                     ;                           ' 4     | (4)
2869   1574 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2869   1576 C2 74 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2869   1579 D9          >            EXX                     ;                           ' 4     | (30)
2870   157A 36 86                   LD      (HL), $86           ; set reg num to YM         ' 10    |
2871   157C 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (234)
2872   157D 1C                      INC     E                   ; next                      ' 4     |
2873   157E                         wait4                       ; wait YM to be ready       ' 4     |
2873   157E 00          >            NOP
2874   157F 02                      LD      (BC), A             ; restore state             ' 7     |
2875   1580             
2876   1580 D9                      EXX                         ;                           ' 4     | (238)
2877   1581             
2878   1581             .wait3
2879   1581 CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2880   1583 C2 81 15                JP      NZ, .wait3          ; wait while busy           ' 10    | 22 (254+6)
2881   1586             
2882   1586 36 2A                   LD      (HL), $2A           ;                           ' 10    |
2883   1588 0A                      LD      A, (BC)             ;                           ' 7     |
2884   1589 03                      INC     BC                  ; *** sample output ****    ' 6     | 38 (44)
2885   158A CB 90                   RES     2, B                ;                           ' 8     |
2886   158C 12                      LD      (DE), A             ;                           ' 7     |
2887   158D             
2888   158D             .wait4
2889   158D CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2890   158F C2 8D 15                JP      NZ, .wait4          ; wait while busy           ' 10    | 22 (66)
2891   1592             
2892   1592 D9                      EXX                         ;                           ' 4     | (78)
2893   1593                         wait8                       ; sync                      ' 8     |
2893   1593 00          >            NOP
2893   1594 00          >            NOP
2894   1595             
2895   1595 36 88                   LD      (HL), $88           ; set reg num to YM         ' 10    |
2896   1597 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2897   1598 1C                      INC     E                   ; next                      ' 4     | 32 (110)
2898   1599                         wait4                       ; wait YM to be ready       ' 4     |
2898   1599 00          >            NOP
2899   159A 02                      LD      (BC), A             ; restore state             ' 7     |
2900   159B             
2901   159B                         waitYMReady                 ; wait YM to be ready       ' 30    |
2901   159B D9          >            EXX                     ;                           ' 4     | (4)
2901   159C CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2901   159E C2 9C 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2901   15A1 D9          >            EXX                     ;                           ' 4     | (30)
2902   15A2 36 89                   LD      (HL), $89           ; set reg num to YM         ' 10    |
2903   15A4 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (172)
2904   15A5 1C                      INC     E                   ; next                      ' 4     |
2905   15A6                         wait4                       ; wait YM to be ready       ' 4     |
2905   15A6 00          >            NOP
2906   15A7 02                      LD      (BC), A             ; restore state             ' 7     |
2907   15A8             
2908   15A8                         waitYMReady                 ; wait YM to be ready       ' 30    |
2908   15A8 D9          >            EXX                     ;                           ' 4     | (4)
2908   15A9 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2908   15AB C2 A9 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2908   15AE D9          >            EXX                     ;                           ' 4     | (30)
2909   15AF 36 8A                   LD      (HL), $8A           ; set reg num to YM         ' 10    |
2910   15B1 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (234)
2911   15B2 1C                      INC     E                   ; next                      ' 4     |
2912   15B3                         wait4                       ; wait YM to be ready       ' 4     |
2912   15B3 00          >            NOP
2913   15B4 02                      LD      (BC), A             ; restore state             ' 7     |
2914   15B5             
2915   15B5 D9                      EXX                         ;                           ' 4     | (238)
2916   15B6             
2917   15B6             .wait5
2918   15B6 CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2919   15B8 C2 B6 15                JP      NZ, .wait5          ; wait while busy           ' 10    | 22 (254+6)
2920   15BB             
2921   15BB 36 2A                   LD      (HL), $2A           ;                           ' 10    |
2922   15BD 0A                      LD      A, (BC)             ;                           ' 7     |
2923   15BE 03                      INC     BC                  ; *** sample output ****    ' 6     | 38 (44)
2924   15BF CB 90                   RES     2, B                ;                           ' 8     |
2925   15C1 12                      LD      (DE), A             ;                           ' 7     |
2926   15C2             
2927   15C2             .wait6
2928   15C2 CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2929   15C4 C2 C2 15                JP      NZ, .wait6          ; wait while busy           ' 10    | 22 (66)
2930   15C7             
2931   15C7 D9                      EXX                         ;                           ' 4     | (78)
2932   15C8                         wait8                       ; sync                      ' 8     |
2932   15C8 00          >            NOP
2932   15C9 00          >            NOP
2933   15CA             
2934   15CA 36 8C                   LD      (HL), $8C           ; set reg num to YM         ' 10    |
2935   15CC 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2936   15CD 1C                      INC     E                   ; next                      ' 4     | 32 (110)
2937   15CE                         wait4                       ; wait YM to be ready       ' 4     |
2937   15CE 00          >            NOP
2938   15CF 02                      LD      (BC), A             ; restore state             ' 7     |
2939   15D0             
2940   15D0                         waitYMReady                 ; wait YM to be ready       ' 30    |
2940   15D0 D9          >            EXX                     ;                           ' 4     | (4)
2940   15D1 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2940   15D3 C2 D1 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2940   15D6 D9          >            EXX                     ;                           ' 4     | (30)
2941   15D7 36 8D                   LD      (HL), $8D           ; set reg num to YM         ' 10    |
2942   15D9 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (172)
2943   15DA 1C                      INC     E                   ; next                      ' 4     |
2944   15DB                         wait4                       ; wait YM to be ready       ' 4     |
2944   15DB 00          >            NOP
2945   15DC 02                      LD      (BC), A             ; restore state             ' 7     |
2946   15DD             
2947   15DD                         waitYMReady                 ; wait YM to be ready       ' 30    |
2947   15DD D9          >            EXX                     ;                           ' 4     | (4)
2947   15DE CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2947   15E0 C2 DE 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2947   15E3 D9          >            EXX                     ;                           ' 4     | (30)
2948   15E4 36 8E                   LD      (HL), $8E           ; set reg num to YM         ' 10    |
2949   15E6 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (234)
2950   15E7 1C                      INC     E                   ; next                      ' 4     |
2951   15E8                         wait4                       ; wait YM to be ready       ' 4     |
2951   15E8 00          >            NOP
2952   15E9 02                      LD      (BC), A             ; restore state             ' 7     |
2953   15EA             
2954   15EA C9                      RET                         ; done                      ' 10    | (244)
2955   15EB             
2956   15EB             
2957   15EB             ; loadPSGState
2958   15EB             ; ------------
2959   15EB             ; PSGPORT     ->  HL
2960   15EB             ; reg source  ->  DE  -> ?
2961   15EB             ;
2962   15EB             ; load the PSG env state
2963   15EB             ; 94 cycles
2964   15EB             
2965   15EB             loadPSGState
2966   15EB             
2967   15EB 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2968   15EC 1C                      INC     E                   ; next                      ' 4     | (21)
2969   15ED 77                      LD      (HL), A             ; PSG restore channel 0 env ' 10    |
2970   15EE             
2971   15EE 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2972   15EF 1C                      INC     E                   ; next                      ' 4     | 21 (42)
2973   15F0 77                      LD      (HL), A             ; PSG restore channel 1 env ' 10    |
2974   15F1             
2975   15F1 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2976   15F2 1C                      INC     E                   ; next                      ' 4     | 21 (63)
2977   15F3 77                      LD      (HL), A             ; PSG restore channel 2 env ' 10    |
2978   15F4             
2979   15F4 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2980   15F5 1C                      INC     E                   ; next                      ' 4     | 21 (84)
2981   15F6 77                      LD      (HL), A             ; PSG restore channel 3 env ' 10    |
2982   15F7             
2983   15F7 C9                      RET                         ; done                      ' 10    | (94)
2984   15F8             
2985   15F8             
2986   15F8             ; ##############################  jump table  ################################
2987   15F8             
2988   15F8 00                      BLOCK   $1600-$
2989   1600             
2990   1600 4A 0A                   DW      com_next_frame                                                                  ; 00
2991   1602             
2992   1602                         DW      com_null, com_null, com_null                                                    ; 01-03
2992   1602 B611B611B611
2993   1608                         DW      com_null, com_null, com_null, com_null                                          ; 04-07
2993   1608 B611B611B611B611
2994   1610                         DW      com_null, com_null, com_null, com_null                                          ; 08-0B
2994   1610 B611B611B611B611
2995   1618                         DW      com_null, com_null, com_null, com_null                                          ; 0C-0F
2995   1618 B611B611B611B611
2996   1620             
2997   1620                         DW      com_psg_tone_w0, com_psg_tone_w1, com_psg_tone_w2, com_psg_tone_w3              ; 10-13
2997   1620 4D0A5A0A680A750A
2998   1628                         DW      com_psg_tone_w4, com_psg_tone_w5, com_psg_tone_w6, com_psg_tone_w7              ; 14-17
2998   1628 850A910A9F0AA90A
2999   1630                         DW      com_psg_env_w0, com_psg_env_w1, com_psg_env_w2, com_psg_env_w3                  ; 18-1B
2999   1630 CA0ADD0AE90A020B
3000   1638                         DW      com_null, com_null, com_null, com_null                                          ; 1C-1F
3000   1638 B611B611B611B611
3001   1640             
3002   1640                         DW      com_ym_port0_w0, com_ym_port0_w1, com_ym_port0_w2, com_ym_port0_w3              ; 20-23
3002   1640 4E0B5F0B680B7A0B
3003   1648                         DW      com_ym_port0_w4, com_ym_port0_w5, com_ym_port0_w6, com_ym_port0_w7              ; 24-27
3003   1648 830B960BA80BB10B
3004   1650                         DW      com_ym_port0_w8, com_ym_port0_w9, com_ym_port0_wA, com_ym_port0_wB              ; 28-2B
3004   1650 C40BD60BDF0BF20B
3005   1658                         DW      com_ym_port0_wC, com_ym_port0_wD, com_ym_port0_wE, com_ym_port0_wF              ; 2C-2F
3005   1658 040C0D0C1F0C300C
3006   1660             
3007   1660                         DW      com_ym_port2_w0, com_ym_port2_w1, com_ym_port2_w2, com_ym_port2_w3              ; 30-33
3007   1660 390C4A0C530C650C
3008   1668                         DW      com_ym_port2_w4, com_ym_port2_w5, com_ym_port2_w6, com_ym_port2_w7              ; 34-37
3008   1668 6E0C810C930C9C0C
3009   1670                         DW      com_ym_port2_w8, com_ym_port2_w9, com_ym_port2_wA, com_ym_port2_wB              ; 38-3B
3009   1670 AF0CC10CCA0CDD0C
3010   1678                         DW      com_ym_port2_wC, com_ym_port2_wD, com_ym_port2_wE, com_ym_port2_wF              ; 3C-3F
3010   1678 EF0CF80C0A0D1B0D
3011   1680             
3012   1680                         DW      com_ym_key_w0, com_ym_key_w1, com_ym_key_w2, com_ym_key_w3                      ; 40-43
3012   1680 6E0E810E8D0E9E0E
3013   1688                         DW      com_ym_key_w4, com_ym_key_w5, com_null, com_null                                ; 44-47
3013   1688 B20EC10EB611B611
3014   1690                         DW      com_null, com_null, com_null, com_null                                          ; 48-4B
3014   1690 B611B611B611B611
3015   1698                         DW      com_null, com_null, com_null, com_null                                          ; 4C-4F
3015   1698 B611B611B611B611
3016   16A0             
3017   16A0                         DW      com_pcm_p0_ch0, com_pcm_p0_ch1, com_pcm_p0_ch2, com_pcm_p0_ch3                  ; 50-53
3017   16A0 550F690F7D0F910F
3018   16A8                         DW      com_pcm_p1_ch0, com_pcm_p1_ch1, com_pcm_p1_ch2, com_pcm_p1_ch3                  ; 54-57
3018   16A8 5A0F6E0F820F960F
3019   16B0                         DW      com_pcm_p2_ch0, com_pcm_p2_ch1, com_pcm_p2_ch2, com_pcm_p2_ch3                  ; 58-5B
3019   16B0 5F0F730F870F9B0F
3020   16B8                         DW      com_pcm_p3_ch0, com_pcm_p3_ch1, com_pcm_p3_ch2, com_pcm_p3_ch3                  ; 5C-5F
3020   16B8 640F780F8C0FA00F
3021   16C0             
3022   16C0                         DW      com_state_w0, com_state_w1, com_state_w2, com_state_w3                          ; 60-63
3022   16C0 61106B1079108810
3023   16C8                         DW      com_state_w4, com_state_w5, com_state_w6, com_state_w7                          ; 64-67
3023   16C8 9110AA10B710C410
3024   16D0                         DW      com_state_w8, com_state_w9, com_state_wA, com_state_wB                          ; 68-6B
3024   16D0 D010DC10E6100111
3025   16D8                         DW      com_state_wC, com_state_wD, com_state_wE, com_state_wF                          ; 6C-6F
3025   16D8 0E111B1127113311
3026   16E0             
3027   16E0                         DW      com_null, com_null, com_null, com_null                                          ; 70-74
3027   16E0 B611B611B611B611
3028   16E8                         DW      com_null, com_null, com_null, com_null                                          ; 74-77
3028   16E8 B611B611B611B611
3029   16F0                         DW      com_null, com_null, com_null, com_null                                          ; 78-7B
3029   16F0 B611B611B611B611
3030   16F8 B6 11                   DW      com_null                                                                        ; 7C
3031   16FA             
3032   16FA C2 11                   DW      com_extra_frm                                                                   ; 7D
3033   16FC E9 11                   DW      com_loop                                                                        ; 7E
3034   16FE 26 12                   DW      com_end                                                                         ; 7F
3035   1700             
3036   1700             
3037   1700                         END
